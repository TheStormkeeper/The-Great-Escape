; @start
; @org=$4000
; screen
;
; #UDGTABLE
; { #SCR(loading) | This is the loading screen. }
; TABLE#
b$4000 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4008 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4010 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4018 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4020 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4028 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4030 DEFB $00,$00,$00,$00,$06,$CC,$67,$18
 $4038 DEFB $D9,$9C,$1B,$31,$B6,$E6,$CE,$D8
 $4040 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4048 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4050 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4058 DEFB $00,$00,$0D,$B5,$B6,$36,$DB,$60
 $4060 DEFB $FF,$00,$00,$04,$10,$00,$00,$00
 $4068 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4070 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4078 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4080 DEFB $00,$00,$00,$00,$1C,$00,$00,$00
 $4088 DEFB $FF,$D0,$00,$00,$00,$20,$00,$00
 $4090 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4098 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $40A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $40A8 DEFB $00,$00,$00,$00,$00,$04,$20,$00
 $40B0 DEFB $FF,$00,$04,$04,$00,$00,$00,$00
 $40B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $40C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $40C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $40D0 DEFB $00,$00,$00,$08,$00,$00,$00,$0F
 $40D8 DEFB $FF,$00,$00,$00,$10,$00,$00,$00
 $40E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $40E8 DEFB $00,$00,$00,$00,$00,$07,$FF,$E2
 $40F0 DEFB $78,$00,$00,$00,$00,$00,$00,$00
 $40F8 DEFB $00,$00,$00,$00,$02,$08,$00,$00
 $4100 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4108 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4110 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4118 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4120 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4128 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4130 DEFB $00,$00,$00,$00,$07,$8F,$63,$18
 $4138 DEFB $71,$8C,$1E,$3C,$E6,$7E,$C6,$70
 $4140 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4148 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4150 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4158 DEFB $00,$00,$0C,$B1,$F3,$3E,$DB,$30
 $4160 DEFB $00,$FF,$00,$04,$20,$00,$00,$00
 $4168 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4170 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4178 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4180 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4188 DEFB $0F,$FF,$00,$00,$00,$10,$04,$00
 $4190 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4198 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $41A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $41A8 DEFB $00,$00,$00,$00,$00,$02,$40,$00
 $41B0 DEFB $00,$FF,$07,$54,$00,$00,$00,$00
 $41B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $41C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $41C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $41D0 DEFB $00,$00,$00,$08,$00,$00,$00,$05
 $41D8 DEFB $F0,$FF,$00,$00,$08,$00,$00,$00
 $41E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $41E8 DEFB $00,$00,$00,$00,$00,$0F,$FF,$F3
 $41F0 DEFB $78,$00,$00,$00,$00,$00,$00,$00
 $41F8 DEFB $00,$00,$00,$00,$04,$08,$00,$00
 $4200 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4208 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4210 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4218 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4220 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4228 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4230 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4238 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4240 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4248 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4250 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4258 DEFB $00,$00,$0D,$B1,$81,$B0,$DB,$18
 $4260 DEFB $00,$00,$FF,$0D,$A0,$00,$00,$00
 $4268 DEFB $02,$00,$00,$00,$00,$00,$00,$00
 $4270 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4278 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4280 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4288 DEFB $09,$F0,$FF,$00,$00,$08,$18,$00
 $4290 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4298 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $42A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $42A8 DEFB $00,$00,$00,$00,$00,$00,$40,$00
 $42B0 DEFB $00,$00,$FF,$F8,$00,$00,$00,$00
 $42B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $42C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $42C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $42D0 DEFB $00,$00,$00,$00,$00,$00,$00,$18
 $42D8 DEFB $A0,$00,$FF,$00,$04,$06,$00,$00
 $42E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $42E8 DEFB $00,$00,$00,$00,$00,$0F,$FF,$FF
 $42F0 DEFB $78,$00,$00,$00,$00,$00,$00,$00
 $42F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4300 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4308 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4310 DEFB $00,$00,$00,$00,$07,$8F,$63,$7E
 $4318 DEFB $71,$8C,$1E,$3C,$E6,$7C,$C6,$70
 $4320 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4328 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4330 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4338 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4340 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4348 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4350 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4358 DEFB $00,$00,$0F,$30,$F7,$1E,$DB,$70
 $4360 DEFB $00,$00,$00,$FF,$D0,$00,$00,$00
 $4368 DEFB $04,$00,$00,$00,$00,$00,$00,$00
 $4370 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4378 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4380 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4388 DEFB $04,$A0,$00,$FF,$00,$1A,$20,$00
 $4390 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4398 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $43A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $43A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $43B0 DEFB $00,$00,$07,$FF,$00,$00,$00,$00
 $43B8 DEFB $08,$00,$00,$00,$00,$00,$00,$00
 $43C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $43C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $43D0 DEFB $00,$00,$00,$00,$00,$00,$00,$20
 $43D8 DEFB $40,$00,$00,$FF,$0F,$58,$00,$00
 $43E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $43E8 DEFB $00,$00,$00,$00,$00,$1E,$0F,$FF
 $43F0 DEFB $78,$40,$30,$00,$00,$00,$00,$00
 $43F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4400 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4408 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4410 DEFB $00,$00,$00,$00,$06,$CC,$73,$18
 $4418 DEFB $D9,$CC,$1B,$31,$B6,$E6,$E6,$D8
 $4420 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4428 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4430 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4438 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4440 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4448 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4450 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4458 DEFB $00,$00,$0C,$00,$00,$00,$00,$00
 $4460 DEFB $00,$00,$00,$0F,$FF,$00,$00,$00
 $4468 DEFB $04,$02,$00,$00,$00,$00,$00,$00
 $4470 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4478 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4480 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4488 DEFB $04,$18,$00,$00,$FF,$1F,$40,$00
 $4490 DEFB $00,$00,$02,$00,$00,$00,$00,$00
 $4498 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $44A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $44A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $44B0 DEFB $00,$00,$05,$68,$FF,$00,$00,$30
 $44B8 DEFB $08,$00,$00,$00,$00,$00,$00,$00
 $44C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $44C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $44D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $44D8 DEFB $40,$00,$00,$00,$FF,$A0,$00,$00
 $44E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $44E8 DEFB $00,$00,$00,$00,$00,$18,$1F,$FF
 $44F0 DEFB $79,$C0,$F0,$00,$00,$00,$00,$00
 $44F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4500 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4508 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4510 DEFB $00,$00,$00,$00,$06,$6C,$7B,$19
 $4518 DEFB $8D,$EC,$19,$B1,$86,$C0,$F6,$C0
 $4520 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4528 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4530 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4538 DEFB $00,$00,$00,$00,$00,$00,$03,$00
 $4540 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4548 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4550 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4558 DEFB $00,$00,$0C,$00,$00,$00,$00,$00
 $4560 DEFB $00,$00,$00,$16,$F0,$FF,$00,$00
 $4568 DEFB $08,$04,$00,$00,$00,$00,$00,$00
 $4570 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4578 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4580 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4588 DEFB $04,$06,$00,$00,$00,$FF,$E0,$00
 $4590 DEFB $00,$00,$02,$00,$00,$00,$00,$00
 $4598 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $45A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $45A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $45B0 DEFB $00,$00,$02,$48,$00,$FF,$00,$08
 $45B8 DEFB $10,$00,$00,$00,$00,$00,$00,$00
 $45C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $45C8 DEFB $00,$00,$00,$00,$00,$00,$3C,$00
 $45D0 DEFB $07,$00,$00,$00,$00,$00,$00,$00
 $45D8 DEFB $20,$00,$00,$00,$05,$FF,$00,$00
 $45E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $45E8 DEFB $00,$00,$00,$00,$00,$10,$1F,$7E
 $45F0 DEFB $7F,$E3,$F8,$00,$00,$00,$00,$00
 $45F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4600 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4608 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4610 DEFB $00,$00,$00,$00,$06,$6F,$6B,$19
 $4618 DEFB $8D,$AC,$19,$BC,$E6,$CE,$D6,$70
 $4620 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4628 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4630 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4638 DEFB $00,$00,$00,$00,$00,$00,$07,$80
 $4640 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4648 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4650 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4658 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4660 DEFB $00,$00,$00,$20,$50,$00,$FF,$00
 $4668 DEFB $04,$08,$00,$00,$00,$00,$00,$00
 $4670 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4678 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4680 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4688 DEFB $04,$00,$00,$00,$00,$17,$FF,$00
 $4690 DEFB $00,$00,$02,$00,$00,$00,$00,$00
 $4698 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $46A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $46A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $46B0 DEFB $00,$00,$04,$10,$00,$00,$FE,$0D
 $46B8 DEFB $10,$00,$00,$00,$00,$00,$00,$00
 $46C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $46C8 DEFB $00,$00,$00,$00,$00,$00,$FF,$00
 $46D0 DEFB $1C,$00,$00,$00,$00,$00,$00,$00
 $46D8 DEFB $10,$00,$00,$00,$02,$B0,$FF,$00
 $46E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $46E8 DEFB $00,$00,$00,$00,$00,$10,$3F,$98
 $46F0 DEFB $7D,$E7,$B8,$00,$00,$00,$00,$00
 $46F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4700 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4708 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4710 DEFB $00,$00,$00,$00,$06,$6C,$6F,$19
 $4718 DEFB $8D,$BC,$19,$B0,$36,$C6,$DE,$18
 $4720 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4728 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4730 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4738 DEFB $00,$00,$0B,$2C,$E3,$9C,$F3,$38
 $4740 DEFB $00,$00,$00,$18,$0C,$00,$00,$00
 $4748 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4750 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4758 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4760 DEFB $00,$00,$00,$40,$20,$00,$00,$FF
 $4768 DEFB $0D,$50,$00,$00,$00,$20,$00,$00
 $4770 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4778 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4780 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4788 DEFB $00,$00,$00,$00,$00,$09,$60,$FF
 $4790 DEFB $00,$00,$02,$03,$00,$00,$00,$00
 $4798 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $47A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $47A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $47B0 DEFB $00,$00,$08,$10,$00,$00,$00,$FF
 $47B8 DEFB $A0,$00,$00,$00,$20,$00,$00,$00
 $47C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $47C8 DEFB $00,$00,$00,$00,$00,$03,$FF,$C4
 $47D0 DEFB $B8,$00,$00,$00,$00,$00,$00,$00
 $47D8 DEFB $00,$00,$00,$00,$02,$10,$00,$FF
 $47E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $47E8 DEFB $00,$00,$00,$00,$00,$08,$3F,$C0
 $47F0 DEFB $79,$F7,$9C,$00,$00,$00,$00,$00
 $47F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4800 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4808 DEFB $00,$00,$00,$00,$00,$06,$3F,$C0
 $4810 DEFB $78,$F7,$9C,$00,$00,$00,$00,$00
 $4818 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4820 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4828 DEFB $00,$00,$00,$00,$00,$10,$7F,$F8
 $4830 DEFB $F8,$E1,$F8,$00,$00,$00,$00,$00
 $4838 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4840 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4848 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4850 DEFB $08,$00,$00,$00,$00,$00,$00,$00
 $4858 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4860 DEFB $40,$00,$00,$00,$00,$00,$0F,$3C
 $4868 DEFB $7F,$08,$20,$18,$01,$00,$60,$03
 $4870 DEFB $C3,$38,$0C,$10,$0C,$01,$03,$02
 $4878 DEFB $00,$C0,$00,$00,$00,$00,$00,$08
 $4880 DEFB $00,$18,$40,$00,$00,$00,$1E,$0F
 $4888 DEFB $CF,$9E,$03,$C8,$78,$F1,$E0,$07
 $4890 DEFB $C8,$F8,$7C,$FD,$E0,$78,$F1,$E3
 $4898 DEFB $DE,$40,$00,$00,$00,$07,$00,$04
 $48A0 DEFB $00,$00,$22,$00,$00,$00,$00,$00
 $48A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $48B0 DEFB $00,$00,$00,$00,$00,$00,$01,$E0
 $48B8 DEFB $00,$00,$CF,$00,$00,$00,$00,$00
 $48C0 DEFB $00,$00,$00,$00,$40,$00,$00,$00
 $48C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $48D0 DEFB $00,$00,$00,$00,$00,$00,$40,$07
 $48D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $48E0 DEFB $00,$00,$00,$00,$00,$B8,$00,$00
 $48E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $48F0 DEFB $00,$00,$00,$00,$07,$30,$80,$00
 $48F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4900 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4908 DEFB $00,$00,$00,$00,$00,$00,$3F,$C0
 $4910 DEFB $78,$F7,$8E,$00,$00,$00,$00,$00
 $4918 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4920 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4928 DEFB $00,$00,$00,$00,$00,$00,$1F,$E0
 $4930 DEFB $7C,$E0,$F0,$00,$00,$00,$00,$00
 $4938 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4940 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4948 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4950 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4958 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4960 DEFB $20,$00,$00,$00,$00,$00,$1F,$3C
 $4968 DEFB $7F,$1C,$60,$78,$03,$80,$60,$07
 $4970 DEFB $C3,$86,$1E,$30,$3E,$03,$83,$C7
 $4978 DEFB $03,$C0,$00,$00,$00,$00,$00,$12
 $4980 DEFB $00,$04,$40,$00,$00,$00,$1F,$07
 $4988 DEFB $CF,$9E,$03,$D0,$78,$F1,$E0,$07
 $4990 DEFB $C4,$F8,$30,$7D,$E0,$78,$F1,$E3
 $4998 DEFB $DE,$80,$00,$00,$00,$38,$00,$00
 $49A0 DEFB $00,$00,$21,$80,$00,$00,$00,$00
 $49A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $49B0 DEFB $00,$00,$00,$00,$00,$00,$00,$E0
 $49B8 DEFB $00,$00,$3D,$00,$00,$00,$00,$00
 $49C0 DEFB $00,$00,$00,$00,$20,$80,$00,$00
 $49C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $49D0 DEFB $00,$00,$00,$00,$00,$00,$40,$38
 $49D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $49E0 DEFB $00,$00,$00,$00,$00,$14,$00,$00
 $49E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $49F0 DEFB $00,$00,$00,$00,$38,$18,$00,$00
 $49F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4A00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4A08 DEFB $00,$00,$00,$00,$00,$00,$1F,$C0
 $4A10 DEFB $78,$F7,$8C,$00,$00,$00,$00,$00
 $4A18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4A20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4A28 DEFB $00,$00,$00,$00,$00,$00,$07,$80
 $4A30 DEFB $30,$C0,$60,$00,$00,$00,$00,$00
 $4A38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4A40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4A48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4A50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4A58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4A60 DEFB $18,$00,$00,$00,$00,$00,$1E,$7C
 $4A68 DEFB $3E,$3E,$F1,$FC,$0F,$E0,$E0,$07
 $4A70 DEFB $C7,$8B,$3F,$F0,$FE,$0F,$E3,$EF
 $4A78 DEFB $8F,$E0,$00,$00,$00,$00,$00,$1B
 $4A80 DEFB $00,$02,$80,$00,$00,$00,$0F,$47
 $4A88 DEFB $8F,$1E,$01,$E0,$78,$F1,$E0,$03
 $4A90 DEFB $E3,$F0,$00,$3D,$E0,$78,$F1,$E3
 $4A98 DEFB $CF,$00,$00,$00,$01,$C0,$00,$00
 $4AA0 DEFB $00,$00,$40,$40,$00,$00,$00,$00
 $4AA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4AB0 DEFB $00,$00,$00,$00,$00,$00,$00,$C0
 $4AB8 DEFB $00,$01,$F4,$80,$00,$00,$00,$00
 $4AC0 DEFB $00,$00,$00,$00,$19,$00,$00,$00
 $4AC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4AD0 DEFB $00,$00,$00,$00,$00,$00,$81,$C0
 $4AD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4AE0 DEFB $00,$00,$00,$00,$00,$22,$00,$00
 $4AE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4AF0 DEFB $00,$00,$00,$01,$C0,$08,$00,$00
 $4AF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4B00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4B08 DEFB $00,$00,$00,$00,$00,$00,$FF,$80
 $4B10 DEFB $78,$F7,$90,$00,$00,$00,$00,$00
 $4B18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4B20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4B28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4B30 DEFB $00,$C0,$00,$00,$00,$00,$00,$00
 $4B38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4B40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4B48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4B50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4B58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4B60 DEFB $04,$00,$00,$00,$00,$00,$3E,$7E
 $4B68 DEFB $1C,$7F,$F3,$DC,$3B,$F8,$E0,$0F
 $4B70 DEFB $87,$EB,$6F,$E1,$EF,$3B,$F9,$F7
 $4B78 DEFB $DE,$E0,$00,$00,$00,$00,$00,$0F
 $4B80 DEFB $00,$01,$E0,$00,$00,$00,$0F,$47
 $4B88 DEFB $9F,$1E,$01,$E0,$78,$F1,$E0,$03
 $4B90 DEFB $E1,$E0,$07,$39,$E0,$78,$F3,$F3
 $4B98 DEFB $CF,$00,$00,$80,$0E,$00,$00,$00
 $4BA0 DEFB $00,$00,$40,$20,$00,$00,$00,$00
 $4BA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4BB0 DEFB $00,$00,$00,$00,$00,$00,$00,$C0
 $4BB8 DEFB $00,$0E,$10,$00,$00,$00,$00,$00
 $4BC0 DEFB $00,$00,$00,$00,$05,$00,$00,$00
 $4BC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4BD0 DEFB $00,$00,$00,$00,$01,$02,$8E,$00
 $4BD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4BE0 DEFB $00,$00,$00,$00,$00,$21,$80,$00
 $4BE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4BF0 DEFB $00,$00,$00,$0E,$00,$04,$00,$00
 $4BF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4C00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4C08 DEFB $00,$00,$00,$00,$00,$03,$FF,$00
 $4C10 DEFB $78,$F7,$A0,$00,$00,$00,$00,$00
 $4C18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4C20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4C28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4C30 DEFB $01,$80,$00,$00,$00,$00,$00,$00
 $4C38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4C40 DEFB $00,$00,$00,$00,$00,$00,$00,$FC
 $4C48 DEFB $82,$00,$00,$00,$00,$00,$00,$00
 $4C50 DEFB $3E,$20,$00,$00,$00,$00,$00,$00
 $4C58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4C60 DEFB $02,$00,$00,$00,$00,$00,$3E,$7F
 $4C68 DEFB $7E,$1E,$FB,$CE,$79,$F1,$FC,$0F
 $4C70 DEFB $87,$F6,$EF,$C1,$EF,$78,$F1,$E3
 $4C78 DEFB $DE,$70,$00,$00,$00,$00,$00,$7D
 $4C80 DEFB $00,$06,$F0,$00,$00,$00,$07,$3E
 $4C88 DEFB $1E,$1E,$10,$F2,$78,$F1,$E4,$01
 $4C90 DEFB $F0,$02,$3F,$F1,$F3,$78,$F7,$FB
 $4C98 DEFB $87,$90,$01,$00,$70,$00,$00,$00
 $4CA0 DEFB $00,$00,$00,$18,$00,$00,$00,$00
 $4CA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4CB0 DEFB $00,$00,$00,$00,$00,$00,$00,$40
 $4CB8 DEFB $00,$70,$20,$00,$00,$00,$00,$00
 $4CC0 DEFB $00,$00,$00,$00,$02,$82,$00,$00
 $4CC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4CD0 DEFB $00,$00,$00,$00,$00,$8B,$70,$00
 $4CD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4CE0 DEFB $00,$00,$00,$00,$00,$40,$40,$00
 $4CE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4CF0 DEFB $00,$00,$00,$70,$00,$00,$00,$00
 $4CF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4D00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4D08 DEFB $00,$00,$00,$00,$00,$07,$FE,$01
 $4D10 DEFB $78,$F3,$C0,$00,$00,$00,$00,$00
 $4D18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4D20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4D28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4D30 DEFB $01,$80,$00,$00,$00,$00,$00,$00
 $4D38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4D40 DEFB $00,$00,$00,$00,$00,$00,$03,$C3
 $4D48 DEFB $04,$00,$00,$00,$00,$00,$20,$00
 $4D50 DEFB $F1,$70,$01,$C0,$00,$00,$00,$00
 $4D58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4D60 DEFB $01,$80,$00,$00,$00,$00,$3E,$3F
 $4D68 DEFB $BF,$1E,$F3,$CE,$78,$F7,$FC,$0F
 $4D70 DEFB $83,$F8,$E3,$31,$E6,$78,$F1,$E3
 $4D78 DEFB $DE,$70,$00,$00,$00,$00,$03,$84
 $4D80 DEFB $00,$08,$6C,$C0,$00,$00,$03,$80
 $4D88 DEFB $3C,$3F,$E0,$FC,$3D,$FB,$F8,$00
 $4D90 DEFB $FC,$1C,$FF,$C1,$FE,$3D,$F9,$FF
 $4D98 DEFB $87,$E0,$01,$03,$80,$00,$00,$00
 $4DA0 DEFB $00,$00,$00,$04,$00,$00,$00,$00
 $4DA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4DB0 DEFB $00,$00,$00,$00,$00,$00,$00,$40
 $4DB8 DEFB $03,$80,$00,$00,$00,$00,$00,$00
 $4DC0 DEFB $00,$00,$00,$00,$01,$D2,$00,$00
 $4DC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4DD0 DEFB $00,$00,$00,$00,$00,$6F,$80,$00
 $4DD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4DE0 DEFB $00,$00,$00,$00,$00,$00,$20,$00
 $4DE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4DF0 DEFB $00,$00,$03,$80,$00,$00,$00,$00
 $4DF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4E00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4E08 DEFB $00,$00,$00,$00,$00,$0F,$FF,$8E
 $4E10 DEFB $78,$F3,$C0,$00,$00,$00,$00,$00
 $4E18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4E20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4E28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4E30 DEFB $03,$00,$00,$00,$00,$00,$00,$00
 $4E38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4E40 DEFB $00,$00,$00,$00,$00,$00,$07,$8E
 $4E48 DEFB $9C,$00,$00,$00,$00,$00,$20,$01
 $4E50 DEFB $E0,$FB,$02,$20,$00,$00,$00,$00
 $4E58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4E60 DEFB $00,$40,$00,$00,$00,$00,$3E,$3F
 $4E68 DEFB $9F,$1E,$63,$C7,$78,$F1,$E0,$0F
 $4E70 DEFB $83,$F8,$F0,$F9,$E0,$78,$F1,$E3
 $4E78 DEFB $DE,$38,$00,$00,$00,$00,$1C,$02
 $4E80 DEFB $00,$00,$BB,$00,$00,$00,$01,$C0
 $4E88 DEFB $78,$0F,$80,$78,$3E,$F1,$F0,$00
 $4E90 DEFB $7F,$F0,$1F,$80,$F8,$3E,$F1,$FE
 $4E98 DEFB $03,$C0,$02,$1C,$00,$00,$00,$00
 $4EA0 DEFB $00,$00,$00,$02,$00,$00,$00,$00
 $4EA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4EB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4EB8 DEFB $1C,$00,$00,$00,$00,$00,$00,$00
 $4EC0 DEFB $00,$00,$00,$00,$0E,$E4,$00,$00
 $4EC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4ED0 DEFB $00,$00,$00,$00,$00,$3D,$00,$00
 $4ED8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4EE0 DEFB $00,$00,$00,$00,$00,$00,$18,$00
 $4EE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4EF0 DEFB $00,$00,$1C,$00,$00,$00,$00,$00
 $4EF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4F08 DEFB $00,$00,$00,$00,$00,$09,$FF,$FC
 $4F10 DEFB $78,$E1,$E4,$00,$00,$00,$00,$00
 $4F18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4F20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4F28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4F30 DEFB $06,$00,$00,$00,$00,$00,$00,$00
 $4F38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4F40 DEFB $80,$00,$00,$00,$00,$00,$0F,$1C
 $4F48 DEFB $3E,$00,$00,$00,$00,$00,$20,$03
 $4F50 DEFB $E1,$7C,$00,$10,$00,$00,$01,$80
 $4F58 DEFB $00,$00,$00,$00,$00,$00,$00,$04
 $4F60 DEFB $00,$20,$80,$00,$00,$00,$3E,$1F
 $4F68 DEFB $DF,$9E,$43,$C6,$78,$F1,$E0,$0F
 $4F70 DEFB $89,$FC,$7F,$F9,$E0,$78,$F1,$E3
 $4F78 DEFB $DE,$30,$00,$00,$00,$00,$E0,$02
 $4F80 DEFB $00,$00,$14,$00,$00,$00,$00,$79
 $4F88 DEFB $E0,$02,$00,$30,$18,$40,$40,$00
 $4F90 DEFB $1F,$80,$06,$00,$60,$18,$41,$E8
 $4F98 DEFB $01,$81,$0B,$E0,$00,$00,$00,$00
 $4FA0 DEFB $00,$00,$00,$01,$80,$00,$00,$00
 $4FA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4FB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4FB8 DEFB $E0,$00,$00,$00,$00,$00,$00,$00
 $4FC0 DEFB $00,$00,$00,$00,$00,$74,$00,$00
 $4FC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4FD0 DEFB $00,$00,$00,$00,$00,$F4,$80,$00
 $4FD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4FE0 DEFB $00,$00,$00,$00,$00,$00,$04,$00
 $4FE8 DEFB $00,$00,$00,$00,$00,$00,$00,$02
 $4FF0 DEFB $08,$00,$E0,$00,$00,$00,$00,$00
 $4FF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5000 DEFB $00,$00,$00,$00,$00,$00,$02,$00
 $5008 DEFB $00,$00,$00,$00,$00,$00,$00,$01
 $5010 DEFB $04,$07,$00,$00,$00,$00,$00,$00
 $5018 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5020 DEFB $00,$00,$00,$00,$00,$00,$00,$1A
 $5028 DEFB $F6,$00,$00,$00,$00,$00,$07,$00
 $5030 DEFB $40,$00,$00,$00,$00,$00,$00,$00
 $5038 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5040 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5048 DEFB $00,$18,$04,$B7,$00,$00,$00,$00
 $5050 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5058 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5060 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5068 DEFB $07,$00,$00,$00,$00,$00,$00,$00
 $5070 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5078 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5080 DEFB $00,$00,$00,$00,$00,$0F,$60,$00
 $5088 DEFB $00,$00,$00,$41,$40,$00,$00,$00
 $5090 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5098 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $50A0 DEFB $00,$80,$07,$00,$00,$00,$00,$00
 $50A8 DEFB $00,$00,$00,$00,$00,$08,$00,$00
 $50B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $50B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $50C0 DEFB $08,$40,$00,$00,$00,$00,$00,$00
 $50C8 DEFB $00,$00,$00,$00,$00,$00,$2F,$08
 $50D0 DEFB $00,$00,$3C,$00,$00,$00,$00,$20
 $50D8 DEFB $F1,$EF,$1E,$F1,$EF,$1F,$9E,$10
 $50E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $50E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $50F0 DEFB $40,$00,$00,$00,$00,$00,$00,$20
 $50F8 DEFB $7F,$C7,$FC,$7F,$C7,$FF,$0E,$10
 $5100 DEFB $00,$00,$00,$00,$00,$00,$01,$80
 $5108 DEFB $00,$00,$00,$00,$00,$00,$00,$01
 $5110 DEFB $08,$38,$00,$00,$00,$00,$00,$00
 $5118 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5120 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5128 DEFB $78,$00,$00,$00,$00,$00,$38,$00
 $5130 DEFB $20,$00,$00,$00,$00,$00,$00,$00
 $5138 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5140 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5148 DEFB $00,$04,$02,$F8,$00,$00,$00,$00
 $5150 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5158 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5160 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5168 DEFB $38,$00,$01,$88,$00,$00,$00,$00
 $5170 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5178 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5180 DEFB $00,$00,$00,$00,$00,$3D,$20,$00
 $5188 DEFB $00,$00,$00,$02,$30,$00,$00,$00
 $5190 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5198 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $51A0 DEFB $00,$80,$38,$00,$00,$00,$00,$00
 $51A8 DEFB $00,$00,$00,$00,$00,$04,$00,$00
 $51B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $51B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $51C0 DEFB $10,$20,$00,$00,$00,$00,$00,$00
 $51C8 DEFB $00,$00,$00,$00,$00,$00,$46,$B0
 $51D0 DEFB $00,$00,$42,$18,$3C,$3C,$3C,$21
 $51D8 DEFB $E0,$FE,$0F,$E0,$FE,$0F,$0E,$10
 $51E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $51E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $51F0 DEFB $20,$00,$00,$00,$00,$00,$00,$20
 $51F8 DEFB $1F,$01,$F0,$1F,$01,$F7,$0E,$10
 $5200 DEFB $00,$00,$00,$00,$00,$00,$00,$40
 $5208 DEFB $80,$00,$00,$00,$00,$00,$00,$01
 $5210 DEFB $2D,$C0,$00,$00,$00,$00,$00,$00
 $5218 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5220 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5228 DEFB $38,$00,$00,$00,$00,$01,$C0,$00
 $5230 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5238 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5240 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5248 DEFB $00,$02,$03,$D0,$00,$00,$00,$00
 $5250 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5258 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5260 DEFB $00,$00,$00,$00,$00,$00,$10,$01
 $5268 DEFB $C0,$00,$00,$44,$00,$00,$00,$00
 $5270 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5278 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5280 DEFB $00,$00,$00,$00,$01,$C4,$10,$00
 $5288 DEFB $00,$00,$00,$02,$08,$00,$00,$00
 $5290 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5298 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $52A0 DEFB $01,$01,$C0,$00,$00,$00,$00,$00
 $52A8 DEFB $00,$00,$00,$00,$00,$02,$00,$00
 $52B0 DEFB $00,$00,$00,$00,$00,$00,$00,$1F
 $52B8 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0
 $52C0 DEFB $10,$00,$00,$00,$00,$00,$00,$00
 $52C8 DEFB $00,$00,$00,$00,$00,$00,$43,$C0
 $52D0 DEFB $00,$00,$99,$28,$42,$42,$40,$21
 $52D8 DEFB $C0,$7C,$01,$FF,$FC,$07,$0E,$10
 $52E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $52E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $52F0 DEFB $18,$00,$00,$00,$00,$00,$00,$20
 $52F8 DEFB $00,$00,$00,$00,$00,$00,$00,$10
 $5300 DEFB $00,$00,$00,$00,$00,$00,$00,$20
 $5308 DEFB $80,$00,$00,$00,$00,$00,$00,$00
 $5310 DEFB $BE,$00,$00,$00,$00,$00,$00,$00
 $5318 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5320 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5328 DEFB $44,$00,$00,$00,$00,$0E,$00,$00
 $5330 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5338 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5340 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5348 DEFB $00,$00,$0F,$48,$00,$00,$00,$00
 $5350 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5358 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5360 DEFB $00,$00,$00,$00,$00,$00,$20,$0E
 $5368 DEFB $00,$00,$00,$2C,$00,$00,$00,$00
 $5370 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5378 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5380 DEFB $00,$00,$00,$00,$0E,$08,$00,$00
 $5388 DEFB $00,$00,$00,$04,$04,$00,$00,$00
 $5390 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5398 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $53A0 DEFB $41,$0E,$00,$00,$00,$00,$00,$00
 $53A8 DEFB $00,$00,$00,$00,$00,$01,$84,$00
 $53B0 DEFB $00,$00,$00,$00,$00,$00,$00,$30
 $53B8 DEFB $00,$00,$00,$00,$00,$00,$00,$30
 $53C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $53C8 DEFB $00,$00,$00,$00,$00,$00,$02,$A0
 $53D0 DEFB $00,$00,$A1,$08,$42,$3C,$7C,$21
 $53D8 DEFB $C0,$7C,$01,$FF,$FC,$07,$0E,$10
 $53E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $53E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $53F0 DEFB $04,$00,$00,$00,$00,$00,$00,$30
 $53F8 DEFB $00,$00,$00,$00,$00,$00,$00,$30
 $5400 DEFB $00,$00,$00,$00,$00,$00,$00,$18
 $5408 DEFB $80,$00,$00,$00,$00,$00,$00,$00
 $5410 DEFB $F4,$00,$00,$00,$00,$00,$00,$00
 $5418 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5420 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5428 DEFB $42,$00,$00,$04,$00,$70,$00,$00
 $5430 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5438 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5440 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5448 DEFB $00,$00,$72,$04,$00,$00,$00,$00
 $5450 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5458 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5460 DEFB $00,$00,$00,$00,$00,$00,$40,$70
 $5468 DEFB $00,$00,$00,$1E,$80,$00,$00,$00
 $5470 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5478 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5480 DEFB $00,$00,$00,$00,$70,$10,$00,$00
 $5488 DEFB $00,$00,$00,$00,$03,$00,$00,$00
 $5490 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5498 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $54A0 DEFB $25,$F0,$00,$00,$00,$00,$00,$00
 $54A8 DEFB $00,$00,$00,$00,$00,$00,$44,$00
 $54B0 DEFB $00,$00,$00,$00,$00,$00,$00,$20
 $54B8 DEFB $00,$00,$00,$00,$00,$00,$00,$10
 $54C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $54C8 DEFB $00,$00,$00,$00,$00,$00,$01,$18
 $54D0 DEFB $00,$00,$A1,$08,$3E,$42,$42,$21
 $54D8 DEFB $C0,$7C,$01,$FF,$FC,$07,$0E,$10
 $54E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $54E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $54F0 DEFB $02,$00,$00,$00,$00,$00,$00,$1F
 $54F8 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0
 $5500 DEFB $00,$00,$00,$00,$00,$00,$00,$05
 $5508 DEFB $80,$00,$00,$00,$00,$00,$00,$03
 $5510 DEFB $D3,$00,$00,$00,$00,$00,$00,$00
 $5518 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5520 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5528 DEFB $81,$80,$00,$04,$03,$80,$00,$00
 $5530 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5538 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5540 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5548 DEFB $00,$03,$84,$02,$00,$00,$00,$00
 $5550 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5558 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5560 DEFB $00,$00,$00,$00,$00,$00,$83,$80
 $5568 DEFB $00,$00,$00,$2D,$00,$00,$00,$00
 $5570 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5578 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5580 DEFB $00,$00,$00,$03,$80,$20,$00,$00
 $5588 DEFB $00,$00,$00,$00,$00,$80,$00,$00
 $5590 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5598 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $55A0 DEFB $17,$80,$00,$00,$00,$00,$00,$00
 $55A8 DEFB $00,$00,$00,$00,$00,$00,$28,$00
 $55B0 DEFB $00,$00,$00,$00,$00,$00,$00,$20
 $55B8 DEFB $1F,$01,$F0,$1F,$01,$F7,$70,$10
 $55C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $55C8 DEFB $00,$00,$00,$00,$00,$00,$01,$04
 $55D0 DEFB $00,$00,$99,$08,$02,$42,$42,$21
 $55D8 DEFB $E0,$FE,$0F,$E0,$1E,$0F,$0E,$10
 $55E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $55E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $55F0 DEFB $01,$80,$00,$00,$00,$00,$00,$00
 $55F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5600 DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $5608 DEFB $51,$00,$00,$00,$00,$00,$00,$1C
 $5610 DEFB $40,$80,$00,$00,$00,$00,$00,$00
 $5618 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5620 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5628 DEFB $80,$40,$00,$08,$1C,$00,$00,$00
 $5630 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5638 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5640 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5648 DEFB $00,$1C,$04,$00,$00,$00,$00,$00
 $5650 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5658 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5660 DEFB $00,$00,$00,$00,$00,$32,$DC,$00
 $5668 DEFB $00,$00,$00,$47,$CC,$00,$00,$00
 $5670 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5678 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5680 DEFB $00,$00,$00,$1C,$00,$00,$00,$00
 $5688 DEFB $00,$00,$00,$00,$00,$40,$00,$00
 $5690 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5698 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $56A0 DEFB $1E,$80,$00,$00,$00,$00,$00,$00
 $56A8 DEFB $00,$00,$00,$00,$00,$00,$1C,$00
 $56B0 DEFB $00,$00,$00,$00,$00,$00,$00,$20
 $56B8 DEFB $7F,$C7,$FC,$7F,$C7,$FF,$FC,$10
 $56C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $56C8 DEFB $00,$00,$00,$00,$00,$00,$06,$02
 $56D0 DEFB $00,$00,$42,$3E,$3C,$3C,$3C,$20
 $56D8 DEFB $F1,$EF,$1E,$F1,$EF,$1F,$0E,$10
 $56E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $56E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $56F0 DEFB $00,$40,$00,$00,$00,$00,$00,$00
 $56F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5700 DEFB $00,$00,$00,$00,$00,$00,$00,$25
 $5708 DEFB $E1,$00,$00,$00,$00,$00,$00,$E0
 $5710 DEFB $80,$00,$00,$00,$00,$00,$00,$00
 $5718 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5720 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5728 DEFB $00,$20,$08,$28,$E0,$00,$00,$00
 $5730 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5738 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5740 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5748 DEFB $00,$E0,$00,$00,$00,$00,$00,$00
 $5750 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5758 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5760 DEFB $00,$00,$00,$00,$00,$0B,$E0,$00
 $5768 DEFB $00,$00,$00,$4B,$B0,$00,$00,$00
 $5770 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5778 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5780 DEFB $00,$00,$00,$E0,$00,$00,$00,$00
 $5788 DEFB $00,$00,$00,$00,$00,$30,$00,$00
 $5790 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5798 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $57A0 DEFB $FA,$40,$00,$00,$00,$00,$00,$00
 $57A8 DEFB $00,$00,$00,$00,$00,$00,$1E,$00
 $57B0 DEFB $00,$00,$00,$00,$00,$00,$00,$20
 $57B8 DEFB $FF,$EF,$FE,$FF,$EF,$FF,$FC,$10
 $57C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $57C8 DEFB $00,$00,$00,$00,$00,$00,$00,$01
 $57D0 DEFB $80,$00,$3C,$00,$00,$00,$00,$20
 $57D8 DEFB $FF,$EF,$FE,$FF,$EF,$FF,$0E,$10
 $57E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $57E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $57F0 DEFB $00,$20,$00,$00,$00,$00,$00,$00
 $57F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5800 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5808 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5810 DEFB $06,$06,$06,$07,$07,$07,$07,$07
 $5818 DEFB $07,$07,$07,$07,$07,$07,$07,$07
 $5820 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5828 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5830 DEFB $06,$06,$07,$07,$07,$07,$07,$07
 $5838 DEFB $07,$07,$07,$07,$07,$07,$07,$07
 $5840 DEFB $06,$06,$06,$04,$04,$06,$06,$06
 $5848 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5850 DEFB $06,$06,$06,$07,$07,$07,$07,$07
 $5858 DEFB $07,$07,$07,$07,$07,$07,$07,$07
 $5860 DEFB $04,$04,$04,$04,$04,$04,$04,$04
 $5868 DEFB $04,$04,$06,$06,$06,$04,$06,$06
 $5870 DEFB $06,$06,$06,$06,$06,$06,$07,$07
 $5878 DEFB $07,$07,$07,$07,$07,$07,$07,$07
 $5880 DEFB $06,$06,$06,$06,$04,$06,$06,$06
 $5888 DEFB $04,$04,$04,$04,$04,$04,$04,$04
 $5890 DEFB $06,$06,$04,$04,$06,$06,$06,$06
 $5898 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $58A0 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $58A8 DEFB $06,$06,$06,$06,$06,$04,$04,$06
 $58B0 DEFB $04,$04,$04,$04,$04,$04,$04,$04
 $58B8 DEFB $04,$04,$06,$06,$04,$06,$06,$06
 $58C0 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $58C8 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $58D0 DEFB $06,$06,$06,$04,$06,$06,$06,$04
 $58D8 DEFB $04,$04,$04,$04,$04,$04,$04,$04
 $58E0 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $58E8 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $58F0 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $58F8 DEFB $06,$06,$06,$06,$04,$04,$06,$06
 $5900 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5908 DEFB $06,$06,$06,$06,$42,$42,$42,$42
 $5910 DEFB $42,$42,$42,$42,$06,$06,$06,$06
 $5918 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5920 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5928 DEFB $06,$06,$06,$06,$06,$42,$42,$42
 $5930 DEFB $42,$42,$42,$42,$06,$06,$06,$06
 $5938 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5940 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5948 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5950 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5958 DEFB $06,$06,$06,$06,$06,$06,$06,$05
 $5960 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5968 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5970 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5978 DEFB $06,$06,$06,$06,$06,$05,$05,$05
 $5980 DEFB $06,$06,$06,$06,$06,$42,$42,$42
 $5988 DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $5990 DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $5998 DEFB $42,$42,$05,$05,$05,$05,$06,$05
 $59A0 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $59A8 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $59B0 DEFB $06,$06,$06,$06,$06,$06,$02,$42
 $59B8 DEFB $05,$05,$05,$05,$06,$06,$06,$06
 $59C0 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $59C8 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $59D0 DEFB $06,$06,$06,$06,$05,$05,$05,$05
 $59D8 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $59E0 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $59E8 DEFB $06,$06,$06,$06,$06,$06,$06,$05
 $59F0 DEFB $05,$06,$05,$05,$05,$05,$05,$06
 $59F8 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5A00 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5A08 DEFB $06,$06,$06,$06,$06,$06,$06,$05
 $5A10 DEFB $05,$05,$06,$06,$06,$06,$06,$06
 $5A18 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5A20 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5A28 DEFB $06,$06,$05,$05,$05,$05,$05,$05
 $5A30 DEFB $05,$06,$06,$06,$06,$06,$06,$06
 $5A38 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5A40 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5A48 DEFB $06,$05,$05,$05,$06,$06,$06,$06
 $5A50 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5A58 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5A60 DEFB $06,$06,$06,$06,$06,$05,$05,$05
 $5A68 DEFB $05,$06,$06,$06,$06,$06,$06,$06
 $5A70 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5A78 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5A80 DEFB $06,$06,$06,$05,$05,$05,$05,$06
 $5A88 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5A90 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5A98 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5AA0 DEFB $05,$05,$05,$06,$06,$06,$06,$06
 $5AA8 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5AB0 DEFB $06,$01,$01,$01,$01,$01,$01,$01
 $5AB8 DEFB $01,$01,$01,$01,$01,$01,$01,$01
 $5AC0 DEFB $05,$05,$06,$06,$06,$06,$06,$06
 $5AC8 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5AD0 DEFB $06,$06,$41,$41,$41,$41,$41,$01
 $5AD8 DEFB $01,$01,$01,$01,$01,$01,$01,$01
 $5AE0 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5AE8 DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $5AF0 DEFB $06,$06,$01,$01,$01,$01,$01,$01
 $5AF8 DEFB $01,$01,$01,$01,$01,$01,$01,$01

; super_tiles
;
; Super tiles.
; .
; The game's exterior map (at $BCEE) is constructed of references to these.
; .
; Each super tile is a 4x4 array of tile indices.
b$5B00 DEFB $94,$93,$92,$94 ; {super_tile $00 #CALL:supertile($5B00)
 $5B04 DEFB $92,$92,$94,$93
 $5B08 DEFB $91,$94,$07,$08
 $5B0C DEFB $03,$04,$05,$06 ; }
 $5B10 DEFB $91,$92,$07,$08 ; {super_tile $01 #CALL:supertile($5B10)
 $5B14 DEFB $07,$08,$09,$0A
 $5B18 DEFB $09,$0A,$0B,$17
 $5B1C DEFB $0C,$17,$18,$1F ; }
 $5B20 DEFB $94,$93,$92,$94 ; {super_tile $02 #CALL:supertile($5B20)
 $5B24 DEFB $92,$91,$94,$93
 $5B28 DEFB $91,$94,$07,$08
 $5B2C DEFB $07,$08,$09,$0A ; }
 $5B30 DEFB $91,$92,$07,$08 ; {super_tile $03 #CALL:supertile($5B30)
 $5B34 DEFB $07,$08,$09,$0A
 $5B38 DEFB $09,$0A,$0B,$17
 $5B3C DEFB $0B,$17,$18,$1F ; }
 $5B40 DEFB $09,$0A,$0B,$17 ; {super_tile $04 #CALL:supertile($5B40)
 $5B44 DEFB $0B,$17,$18,$1F
 $5B48 DEFB $18,$1F,$19,$1A
 $5B4C DEFB $19,$1A,$1E,$17 ; }
 $5B50 DEFB $18,$1F,$19,$1A ; {super_tile $05 #CALL:supertile($5B50)
 $5B54 DEFB $19,$1A,$1E,$17
 $5B58 DEFB $1E,$17,$1D,$1C
 $5B5C DEFB $1D,$1C,$19,$1B ; }
 $5B60 DEFB $93,$92,$91,$92 ; {super_tile $06 #CALL:supertile($5B60)
 $5B64 DEFB $91,$93,$91,$94
 $5B68 DEFB $91,$91,$93,$94
 $5B6C DEFB $26,$27,$28,$29 ; }
 $5B70 DEFB $94,$93,$92,$94 ; {super_tile $07 #CALL:supertile($5B70)
 $5B74 DEFB $92,$91,$94,$93
 $5B78 DEFB $91,$94,$93,$94
 $5B7C DEFB $2A,$92,$94,$91 ; }
 $5B80 DEFB $6D,$2B,$91,$93 ; {super_tile $08 #CALL:supertile($5B80)
 $5B84 DEFB $19,$2C,$2D,$93
 $5B88 DEFB $1E,$17,$18,$2E
 $5B8C DEFB $1D,$1C,$19,$2F ; }
 $5B90 DEFB $1E,$17,$1D,$1C ; {super_tile $09 #CALL:supertile($5B90)
 $5B94 DEFB $1D,$1C,$19,$1B
 $5B98 DEFB $19,$1B,$35,$36
 $5B9C DEFB $35,$36,$34,$00 ; }
 $5BA0 DEFB $1E,$17,$1D,$1C ; {super_tile $0A #CALL:supertile($5BA0)
 $5BA4 DEFB $1D,$1C,$19,$1B
 $5BA8 DEFB $19,$1B,$35,$37
 $5BAC DEFB $35,$36,$34,$38 ; }
 $5BB0 DEFB $1E,$17,$1D,$1C ; {super_tile $0B #CALL:supertile($5BB0)
 $5BB4 DEFB $1D,$1C,$19,$1B
 $5BB8 DEFB $19,$1B,$35,$37
 $5BBC DEFB $32,$33,$34,$38 ; }
 $5BC0 DEFB $0D,$0E,$19,$1A ; {super_tile $0C #CALL:supertile($5BC0)
 $5BC4 DEFB $00,$0F,$10,$17
 $5BC8 DEFB $00,$00,$11,$12
 $5BCC DEFB $8B,$00,$13,$14 ; }
 $5BD0 DEFB $02,$00,$00,$00 ; {super_tile $0D #CALL:supertile($5BD0)
 $5BD4 DEFB $85,$00,$86,$87
 $5BD8 DEFB $01,$00,$88,$89
 $5BDC DEFB $01,$00,$00,$8A ; }
 $5BE0 DEFB $01,$00,$00,$81 ; {super_tile $0E #CALL:supertile($5BE0)
 $5BE4 DEFB $85,$00,$00,$4E
 $5BE8 DEFB $6C,$00,$00,$50
 $5BEC DEFB $6B,$69,$66,$4E ; }
 $5BF0 DEFB $82,$00,$00,$15 ; {super_tile $0F #CALL:supertile($5BF0)
 $5BF4 DEFB $83,$84,$00,$55
 $5BF8 DEFB $00,$68,$00,$55
 $5BFC DEFB $00,$4E,$00,$62 ; }
 $5C00 DEFB $93,$94,$65,$6A ; {super_tile $10 #CALL:supertile($5C00)
 $5C04 DEFB $94,$91,$8C,$8D
 $5C08 DEFB $91,$92,$94,$94
 $5C0C DEFB $92,$94,$93,$91 ; }
 $5C10 DEFB $00,$4E,$00,$61 ; {super_tile $11 #CALL:supertile($5C10)
 $5C14 DEFB $8E,$67,$66,$60
 $5C18 DEFB $8F,$90,$65,$5F
 $5C1C DEFB $93,$92,$91,$5E ; }
 $5C20 DEFB $16,$73,$78,$38 ; {super_tile $12 #CALL:supertile($5C20)
 $5C24 DEFB $01,$73,$00,$38
 $5C28 DEFB $77,$73,$00,$63
 $5C2C DEFB $76,$58,$00,$64 ; }
 $5C30 DEFB $75,$59,$00,$49 ; {super_tile $13 #CALL:supertile($5C30)
 $5C34 DEFB $74,$5A,$4A,$4B
 $5C38 DEFB $5C,$5B,$91,$93
 $5C3C DEFB $5D,$93,$92,$94 ; }
 $5C40 DEFB $09,$21,$22,$24 ; {super_tile $14 #CALL:supertile($5C40)
 $5C44 DEFB $0B,$20,$23,$25
 $5C48 DEFB $18,$1F,$19,$1A
 $5C4C DEFB $19,$1A,$1E,$17 ; }
 $5C50 DEFB $00,$00,$00,$49 ; {super_tile $15 #CALL:supertile($5C50)
 $5C54 DEFB $00,$4C,$4A,$4B
 $5C58 DEFB $4A,$4B,$91,$93
 $5C5C DEFB $94,$93,$92,$94 ; }
 $5C60 DEFB $39,$3A,$3F,$3E ; {super_tile $16 #CALL:supertile($5C60)
 $5C64 DEFB $40,$41,$42,$43
 $5C68 DEFB $44,$45,$46,$47
 $5C6C DEFB $48,$47,$4A,$4B ; }
 $5C70 DEFB $19,$1B,$35,$36 ; {super_tile $17 #CALL:supertile($5C70)
 $5C74 DEFB $35,$36,$34,$00
 $5C78 DEFB $34,$7D,$00,$00
 $5C7C DEFB $00,$3B,$3C,$3D ; }
 $5C80 DEFB $4A,$4B,$93,$91 ; {super_tile $18 #CALL:supertile($5C80)
 $5C84 DEFB $93,$94,$91,$92
 $5C88 DEFB $94,$92,$93,$94
 $5C8C DEFB $93,$91,$92,$91 ; }
 $5C90 DEFB $4A,$5B,$93,$94 ; {super_tile $19 #CALL:supertile($5C90)
 $5C94 DEFB $93,$94,$91,$92
 $5C98 DEFB $94,$92,$93,$94
 $5C9C DEFB $93,$91,$92,$91 ; }
 $5CA0 DEFB $91,$93,$94,$92 ; {super_tile $1A #CALL:supertile($5CA0)
 $5CA4 DEFB $92,$94,$91,$94
 $5CA8 DEFB $94,$93,$91,$92
 $5CAC DEFB $30,$92,$94,$93 ; }
 $5CB0 DEFB $31,$93,$92,$91 ; {super_tile $1B #CALL:supertile($5CB0)
 $5CB4 DEFB $91,$92,$91,$94
 $5CB8 DEFB $93,$94,$93,$91
 $5CBC DEFB $94,$93,$94,$92 ; }
 $5CC0 DEFB $19,$1B,$35,$6E ; {super_tile $1C #CALL:supertile($5CC0)
 $5CC4 DEFB $35,$33,$34,$55
 $5CC8 DEFB $34,$73,$00,$56
 $5CCC DEFB $00,$73,$00,$55 ; }
 $5CD0 DEFB $79,$73,$00,$55 ; {super_tile $1D #CALL:supertile($5CD0)
 $5CD4 DEFB $00,$58,$00,$7E
 $5CD8 DEFB $7A,$59,$79,$56
 $5CDC DEFB $78,$5A,$4A,$57 ; }
 $5CE0 DEFB $34,$00,$00,$7C ; {super_tile $1E #CALL:supertile($5CE0)
 $5CE4 DEFB $00,$3B,$72,$00
 $5CE8 DEFB $39,$4F,$4E,$00
 $5CEC DEFB $4E,$00,$80,$7B ; }
 $5CF0 DEFB $50,$00,$7F,$4C ; {super_tile $1F #CALL:supertile($5CF0)
 $5CF4 DEFB $51,$00,$4D,$4B
 $5CF8 DEFB $52,$53,$54,$91
 $5CFC DEFB $6F,$70,$71,$94 ; }
 $5D00 DEFB $34,$00,$00,$38 ; {super_tile $20 #CALL:supertile($5D00)
 $5D04 DEFB $7B,$78,$00,$38
 $5D08 DEFB $7C,$79,$00,$38
 $5D0C DEFB $7A,$00,$00,$38 ; }
 $5D10 DEFB $19,$1B,$35,$36 ; {super_tile $21 #CALL:supertile($5D10)
 $5D14 DEFB $35,$36,$34,$7B
 $5D18 DEFB $34,$00,$00,$7C
 $5D1C DEFB $00,$3B,$3C,$3D ; }
 $5D20 DEFB $34,$00,$00,$38 ; {super_tile $22 #CALL:supertile($5D20)
 $5D24 DEFB $77,$00,$00,$38
 $5D28 DEFB $79,$00,$00,$63
 $5D2C DEFB $7A,$00,$00,$64 ; }
 $5D30 DEFB $94,$93,$92,$94 ; {super_tile $23 #CALL:supertile($5D30)
 $5D34 DEFB $92,$91,$94,$93
 $5D38 DEFB $91,$94,$93,$94
 $5D3C DEFB $93,$92,$94,$91 ; }
 $5D40 DEFB $93,$92,$91,$92 ; {super_tile $24 #CALL:supertile($5D40)
 $5D44 DEFB $91,$93,$91,$93
 $5D48 DEFB $91,$91,$93,$94
 $5D4C DEFB $94,$92,$94,$93 ; }
 $5D50 DEFB $93,$94,$93,$91 ; {super_tile $25 #CALL:supertile($5D50)
 $5D54 DEFB $94,$91,$94,$93
 $5D58 DEFB $91,$92,$94,$94
 $5D5C DEFB $92,$94,$93,$91 ; }
 $5D60 DEFB $AF,$B9,$C4,$B0 ; {super_tile $26 #CALL:supertile($5D60)
 $5D64 DEFB $C5,$B9,$BA,$B0
 $5D68 DEFB $96,$BB,$B6,$C6
 $5D6C DEFB $94,$93,$BC,$98 ; }
 $5D70 DEFB $00,$F0,$F1,$00 ; {super_tile $27 #CALL:supertile($5D70)
 $5D74 DEFB $B3,$F2,$F3,$00
 $5D78 DEFB $AF,$B5,$95,$B4
 $5D7C DEFB $AF,$B7,$B8,$B0 ; }
 $5D80 DEFB $00,$00,$00,$00 ; {super_tile $28 #CALL:supertile($5D80)
 $5D84 DEFB $B3,$F4,$00,$00
 $5D88 DEFB $AF,$B5,$95,$B4
 $5D8C DEFB $AF,$B7,$B8,$B0 ; }
 $5D90 DEFB $AE,$C0,$C1,$9C ; {super_tile $29 #CALL:supertile($5D90)
 $5D94 DEFB $F8,$C2,$91,$92
 $5D98 DEFB $94,$92,$93,$94
 $5D9C DEFB $93,$91,$92,$91 ; }
 $5DA0 DEFB $B2,$9B,$BE,$B0 ; {super_tile $2A #CALL:supertile($5DA0)
 $5DA4 DEFB $AF,$BD,$BF,$B0
 $5DA8 DEFB $AF,$B9,$BA,$F9
 $5DAC DEFB $AF,$B9,$BA,$C3 ; }
 $5DB0 DEFB $E3,$E2,$E5,$00 ; {super_tile $2B #CALL:supertile($5DB0)
 $5DB4 DEFB $E5,$00,$00,$00
 $5DB8 DEFB $00,$00,$00,$00
 $5DBC DEFB $00,$00,$F5,$B1 ; }
 $5DC0 DEFB $F6,$C7,$99,$9C ; {super_tile $2C #CALL:supertile($5DC0)
 $5DC4 DEFB $99,$C8,$91,$93
 $5DC8 DEFB $91,$91,$93,$94
 $5DCC DEFB $94,$92,$94,$93 ; }
 $5DD0 DEFB $1E,$45,$45,$44 ; {super_tile $2D #CALL:supertile($5DD0)
 $5DD4 DEFB $1E,$45,$48,$49
 $5DD8 DEFB $1E,$4A,$4B,$4C
 $5DDC DEFB $4D,$7B,$65,$0A ; }
 $5DE0 DEFB $52,$51,$54,$6D ; {super_tile $2E #CALL:supertile($5DE0)
 $5DE4 DEFB $54,$6D,$6D,$6D
 $5DE8 DEFB $18,$64,$3A,$43
 $5DEC DEFB $47,$46,$45,$44 ; }
 $5DF0 DEFB $6D,$6D,$6D,$6D ; {super_tile $2F #CALL:supertile($5DF0)
 $5DF4 DEFB $6D,$6D,$65,$0A
 $5DF8 DEFB $65,$36,$08,$0B
 $5DFC DEFB $08,$37,$00,$01 ; }
 $5E00 DEFB $13,$6D,$6D,$53 ; {super_tile $30 #CALL:supertile($5E00)
 $5E04 DEFB $0D,$53,$52,$51
 $5E08 DEFB $6A,$51,$54,$6D
 $5E0C DEFB $6C,$6D,$4E,$4F ; }
 $5E10 DEFB $0F,$6D,$6D,$50 ; {super_tile $31 #CALL:supertile($5E10)
 $5E14 DEFB $0D,$6D,$6D,$6D
 $5E18 DEFB $14,$19,$6D,$6D
 $5E1C DEFB $15,$16,$6D,$6D ; }
 $5E20 DEFB $0F,$6D,$6D,$6D ; {super_tile $32 #CALL:supertile($5E20)
 $5E24 DEFB $0D,$6D,$65,$0A
 $5E28 DEFB $09,$0A,$08,$0B
 $5E2C DEFB $08,$0B,$02,$00 ; }
 $5E30 DEFB $1E,$45,$48,$49 ; {super_tile $33 #CALL:supertile($5E30)
 $5E34 DEFB $1E,$4A,$4B,$4C
 $5E38 DEFB $4D,$7B,$6D,$53
 $5E3C DEFB $6D,$53,$52,$51 ; }
 $5E40 DEFB $6D,$6D,$6D,$53 ; {super_tile $34 #CALL:supertile($5E40)
 $5E44 DEFB $6D,$53,$52,$51
 $5E48 DEFB $52,$51,$54,$6D
 $5E4C DEFB $54,$4E,$4F,$6D ; }
 $5E50 DEFB $6D,$6D,$50,$6D ; {super_tile $35 #CALL:supertile($5E50)
 $5E54 DEFB $7C,$19,$6D,$6D
 $5E58 DEFB $17,$16,$1A,$6D
 $5E5C DEFB $18,$1C,$1B,$6D ; }
 $5E60 DEFB $7C,$19,$6D,$6D ; {super_tile $36 #CALL:supertile($5E60)
 $5E64 DEFB $17,$16,$65,$0A
 $5E68 DEFB $7D,$36,$08,$0B
 $5E6C DEFB $08,$37,$00,$01 ; }
 $5E70 DEFB $6D,$7C,$50,$6D ; {super_tile $37 #CALL:supertile($5E70)
 $5E74 DEFB $6D,$7E,$7F,$6D
 $5E78 DEFB $6D,$6D,$6D,$6D
 $5E7C DEFB $6D,$6D,$6D,$6D ; }
 $5E80 DEFB $7D,$36,$08,$0B ; {super_tile $38 #CALL:supertile($5E80)
 $5E84 DEFB $08,$37,$00,$02
 $5E88 DEFB $00,$00,$02,$03
 $5E8C DEFB $03,$01,$03,$02 ; }
 $5E90 DEFB $52,$51,$54,$6D ; {super_tile $39 #CALL:supertile($5E90)
 $5E94 DEFB $54,$6D,$6D,$6D
 $5E98 DEFB $6D,$6D,$6D,$6D
 $5E9C DEFB $6D,$7C,$19,$6D ; }
 $5EA0 DEFB $6D,$17,$16,$1A ; {super_tile $3A #CALL:supertile($5EA0)
 $5EA4 DEFB $7C,$18,$1C,$1B
 $5EA8 DEFB $7E,$7F,$6D,$6D
 $5EAC DEFB $6D,$6D,$7D,$0A ; }
 $5EB0 DEFB $6D,$6D,$6D,$0E ; {super_tile $3B #CALL:supertile($5EB0)
 $5EB4 DEFB $04,$63,$6D,$0C
 $5EB8 DEFB $05,$80,$04,$06
 $5EBC DEFB $00,$02,$05,$07 ; }
 $5EC0 DEFB $6D,$6D,$6D,$6D ; {super_tile $3C #CALL:supertile($5EC0)
 $5EC4 DEFB $6D,$6D,$6D,$6D
 $5EC8 DEFB $58,$6D,$6D,$6D
 $5ECC DEFB $59,$5A,$58,$6D ; }
 $5ED0 DEFB $6D,$5B,$59,$5A ; {super_tile $3D #CALL:supertile($5ED0)
 $5ED4 DEFB $6D,$6D,$6D,$5B
 $5ED8 DEFB $6D,$6D,$6D,$6D
 $5EDC DEFB $6D,$6D,$55,$57 ; }
 $5EE0 DEFB $58,$6D,$6D,$12 ; {super_tile $3E #CALL:supertile($5EE0)
 $5EE4 DEFB $59,$5A,$58,$0C
 $5EE8 DEFB $6D,$5B,$59,$69
 $5EEC DEFB $6D,$6D,$6D,$6B ; }
 $5EF0 DEFB $70,$6D,$56,$6D ; {super_tile $3F #CALL:supertile($5EF0)
 $5EF4 DEFB $73,$74,$6D,$6D
 $5EF8 DEFB $77,$78,$6D,$6D
 $5EFC DEFB $04,$66,$6D,$6D ; }
 $5F00 DEFB $6D,$6D,$6D,$0E ; {super_tile $40 #CALL:supertile($5F00)
 $5F04 DEFB $6D,$6D,$6D,$0C
 $5F08 DEFB $6D,$6D,$6D,$12
 $5F0C DEFB $6D,$6D,$6D,$10 ; }
 $5F10 DEFB $05,$07,$04,$66 ; {super_tile $41 #CALL:supertile($5F10)
 $5F14 DEFB $03,$00,$05,$07
 $5F18 DEFB $00,$01,$03,$03
 $5F1C DEFB $01,$03,$02,$00 ; }
 $5F20 DEFB $58,$6D,$6D,$6D ; {super_tile $42 #CALL:supertile($5F20)
 $5F24 DEFB $59,$5A,$58,$6D
 $5F28 DEFB $38,$5B,$59,$5A
 $5F2C DEFB $3B,$39,$63,$5B ; }
 $5F30 DEFB $3C,$5E,$3D,$3E ; {super_tile $43 #CALL:supertile($5F30)
 $5F34 DEFB $3C,$5E,$5E,$1F
 $5F38 DEFB $3C,$5E,$5E,$1F
 $5F3C DEFB $3F,$40,$5E,$1F ; }
 $5F40 DEFB $5C,$41,$42,$1F ; {super_tile $44 #CALL:supertile($5F40)
 $5F44 DEFB $04,$66,$05,$5D
 $5F48 DEFB $05,$07,$04,$63
 $5F4C DEFB $02,$03,$05,$80 ; }
 $5F50 DEFB $58,$6D,$6D,$6D ; {super_tile $45 #CALL:supertile($5F50)
 $5F54 DEFB $59,$5A,$58,$6D
 $5F58 DEFB $6D,$5B,$59,$5A
 $5F5C DEFB $6D,$6D,$6D,$5B ; }
 $5F60 DEFB $6D,$6D,$56,$74 ; {super_tile $46 #CALL:supertile($5F60)
 $5F64 DEFB $70,$6D,$81,$78
 $5F68 DEFB $73,$6D,$6D,$6D
 $5F6C DEFB $04,$63,$6D,$6D ; }
 $5F70 DEFB $6D,$82,$6D,$6D ; {super_tile $47 #CALL:supertile($5F70)
 $5F74 DEFB $74,$6D,$6D,$6D
 $5F78 DEFB $73,$6D,$6D,$6D
 $5F7C DEFB $04,$63,$6D,$6D ; }
 $5F80 DEFB $6D,$5B,$59,$5A ; {super_tile $48 #CALL:supertile($5F80)
 $5F84 DEFB $6D,$6D,$6D,$5B
 $5F88 DEFB $55,$57,$74,$6D
 $5F8C DEFB $56,$81,$78,$6D ; }
 $5F90 DEFB $05,$80,$04,$63 ; {super_tile $49 #CALL:supertile($5F90)
 $5F94 DEFB $01,$00,$05,$80
 $5F98 DEFB $00,$03,$02,$03
 $5F9C DEFB $02,$01,$03,$00 ; }
 $5FA0 DEFB $86,$6D,$56,$6D ; {super_tile $4A #CALL:supertile($5FA0)
 $5FA4 DEFB $85,$6E,$6F,$70
 $5FA8 DEFB $84,$71,$72,$73
 $5FAC DEFB $83,$63,$76,$77 ; }
 $5FB0 DEFB $87,$5B,$59,$5A ; {super_tile $4B #CALL:supertile($5FB0)
 $5FB4 DEFB $86,$82,$6D,$5B
 $5FB8 DEFB $84,$6D,$6D,$6D
 $5FBC DEFB $87,$6D,$55,$57 ; }
 $5FC0 DEFB $6D,$5B,$59,$5A ; {super_tile $4C #CALL:supertile($5FC0)
 $5FC4 DEFB $6D,$6D,$6D,$5B
 $5FC8 DEFB $55,$57,$6D,$6D
 $5FCC DEFB $56,$6D,$55,$57 ; }
 $5FD0 DEFB $6D,$6D,$56,$6D ; {super_tile $4D #CALL:supertile($5FD0)
 $5FD4 DEFB $6D,$6D,$6D,$6D
 $5FD8 DEFB $82,$6D,$6D,$6E
 $5FDC DEFB $04,$66,$6D,$71 ; }
 $5FE0 DEFB $6D,$74,$56,$6D ; {super_tile $4E #CALL:supertile($5FE0)
 $5FE4 DEFB $81,$78,$6D,$6D
 $5FE8 DEFB $82,$6D,$6D,$6D
 $5FEC DEFB $04,$63,$6D,$6D ; }
 $5FF0 DEFB $70,$6D,$56,$6D ; {super_tile $4F #CALL:supertile($5FF0) [unused by
 $5FF4 DEFB $73,$74,$6D,$6D ; map]
 $5FF8 DEFB $77,$78,$6D,$81
 $5FFC DEFB $04,$66,$6D,$82 ; }
 $6000 DEFB $6D,$6D,$6D,$6D ; {super_tile $50 #CALL:supertile($6000)
 $6004 DEFB $38,$6D,$6D,$6D
 $6008 DEFB $3B,$39,$63,$6D
 $600C DEFB $3F,$40,$3D,$3E ; }
 $6010 DEFB $71,$72,$73,$74 ; {super_tile $51 #CALL:supertile($6010)
 $6014 DEFB $38,$76,$77,$78
 $6018 DEFB $3B,$39,$63,$6D
 $601C DEFB $3F,$40,$3D,$3E ; }
 $6020 DEFB $58,$6D,$6D,$6D ; {super_tile $52 #CALL:supertile($6020)
 $6024 DEFB $59,$5A,$58,$6D
 $6028 DEFB $6D,$5B,$59,$5A
 $602C DEFB $6E,$6F,$70,$5B ; }
 $6030 DEFB $38,$5B,$59,$5A ; {super_tile $53 #CALL:supertile($6030)
 $6034 DEFB $3B,$39,$63,$5B
 $6038 DEFB $3C,$5E,$3D,$3E
 $603C DEFB $3C,$5E,$5E,$1F ; }
 $6040 DEFB $3C,$5E,$5E,$1F ; {super_tile $54 #CALL:supertile($6040)
 $6044 DEFB $3F,$40,$5E,$1F
 $6048 DEFB $5C,$41,$42,$1F
 $604C DEFB $04,$63,$05,$5D ; }
 $6050 DEFB $86,$6D,$6D,$6D ; {super_tile $55 #CALL:supertile($6050)
 $6054 DEFB $84,$6D,$6D,$6D
 $6058 DEFB $87,$6D,$6D,$6D
 $605C DEFB $86,$5A,$58,$6D ; }
 $6060 DEFB $6D,$6D,$6D,$6D ; {super_tile $56 #CALL:supertile($6060)
 $6064 DEFB $04,$66,$82,$6D
 $6068 DEFB $05,$07,$04,$63
 $606C DEFB $02,$03,$05,$80 ; }
 $6070 DEFB $6E,$6F,$70,$6D ; {super_tile $57 #CALL:supertile($6070)
 $6074 DEFB $71,$72,$73,$74
 $6078 DEFB $75,$76,$77,$78
 $607C DEFB $6D,$6D,$82,$6D ; }
 $6080 DEFB $3C,$5E,$5E,$1F ; {super_tile $58 #CALL:supertile($6080)
 $6084 DEFB $3F,$40,$5E,$1F
 $6088 DEFB $5C,$41,$42,$1F
 $608C DEFB $6D,$6D,$05,$5D ; }
 $6090 DEFB $87,$6D,$6D,$5B ; {super_tile $59 #CALL:supertile($6090)
 $6094 DEFB $86,$82,$55,$57
 $6098 DEFB $84,$6E,$56,$6D
 $609C DEFB $87,$82,$6D,$6D ; }
 $60A0 DEFB $55,$57,$6D,$6D ; {super_tile $5A #CALL:supertile($60A0)
 $60A4 DEFB $56,$6D,$55,$57
 $60A8 DEFB $6D,$6D,$56,$6D
 $60AC DEFB $73,$6D,$6D,$6D ; }
 $60B0 DEFB $6D,$6D,$6E,$6F ; {super_tile $5B #CALL:supertile($60B0)
 $60B4 DEFB $6D,$6D,$71,$72
 $60B8 DEFB $58,$6D,$75,$76
 $60BC DEFB $59,$5A,$58,$6D ; }
 $60C0 DEFB $86,$6D,$6D,$6D ; {super_tile $5C #CALL:supertile($60C0)
 $60C4 DEFB $84,$5A,$58,$6D
 $60C8 DEFB $87,$5B,$59,$5A
 $60CC DEFB $86,$6D,$6D,$5B ; }
 $60D0 DEFB $86,$6D,$6D,$74 ; {super_tile $5D #CALL:supertile($60D0)
 $60D4 DEFB $84,$6D,$81,$78
 $60D8 DEFB $84,$6D,$82,$6D
 $60DC DEFB $87,$66,$6D,$6D ; }
 $60E0 DEFB $6E,$6F,$70,$12 ; {super_tile $5E #CALL:supertile($60E0)
 $60E4 DEFB $71,$72,$73,$10
 $60E8 DEFB $75,$76,$77,$0E
 $60EC DEFB $6D,$6D,$6D,$0C ; }
 $60F0 DEFB $6D,$6D,$6D,$6D ; {super_tile $5F #CALL:supertile($60F0)
 $60F4 DEFB $65,$7C,$6D,$6D
 $60F8 DEFB $08,$7E,$7F,$6D
 $60FC DEFB $6D,$6D,$6D,$7C ; }
 $6100 DEFB $6D,$6D,$6D,$6D ; {super_tile $60 #CALL:supertile($6100)
 $6104 DEFB $6D,$6D,$6D,$6D
 $6108 DEFB $6D,$6D,$6D,$6D
 $610C DEFB $6D,$6D,$6D,$6D ; }
 $6110 DEFB $86,$3F,$40,$5E ; {super_tile $61 #CALL:supertile($6110)
 $6114 DEFB $85,$5C,$41,$88
 $6118 DEFB $84,$6D,$82,$05
 $611C DEFB $83,$63,$6D,$6D ; }
 $6120 DEFB $5E,$3D,$3E,$0E ; {super_tile $62 #CALL:supertile($6120)
 $6124 DEFB $40,$5E,$1F,$0C
 $6128 DEFB $41,$42,$1F,$12
 $612C DEFB $58,$05,$5D,$10 ; }
 $6130 DEFB $87,$6D,$6D,$5B ; {super_tile $63 #CALL:supertile($6130)
 $6134 DEFB $86,$38,$81,$78
 $6138 DEFB $84,$3B,$39,$63
 $613C DEFB $87,$3C,$5E,$3D ; }
 $6140 DEFB $59,$5A,$58,$0E ; {super_tile $64 #CALL:supertile($6140)
 $6144 DEFB $6D,$5B,$59,$5F
 $6148 DEFB $6D,$6D,$81,$6B
 $614C DEFB $39,$63,$82,$10 ; }
 $6150 DEFB $86,$3F,$40,$5E ; {super_tile $65 #CALL:supertile($6150)
 $6154 DEFB $84,$5C,$41,$88
 $6158 DEFB $87,$5A,$58,$05
 $615C DEFB $86,$5B,$59,$5A ; }
 $6160 DEFB $0F,$53,$52,$51 ; {super_tile $66 #CALL:supertile($6160)
 $6164 DEFB $6A,$51,$54,$7F
 $6168 DEFB $6C,$4E,$4F,$6D
 $616C DEFB $11,$6D,$50,$6D ; }
 $6170 DEFB $6D,$6D,$6D,$6D ; {super_tile $67 #CALL:supertile($6170)
 $6174 DEFB $04,$66,$6D,$6D
 $6178 DEFB $05,$07,$04,$63
 $617C DEFB $03,$02,$05,$80 ; }
 $6180 DEFB $6D,$6F,$70,$6D ; {super_tile $68 #CALL:supertile($6180)
 $6184 DEFB $81,$72,$73,$6D
 $6188 DEFB $82,$76,$77,$6D
 $618C DEFB $04,$66,$82,$6D ; }
 $6190 DEFB $66,$6D,$6D,$6D ; {super_tile $69 #CALL:supertile($6190)
 $6194 DEFB $07,$74,$6E,$6D
 $6198 DEFB $81,$78,$04,$82
 $619C DEFB $82,$6D,$05,$6D ; }
 $61A0 DEFB $A1,$9A,$A3,$A4 ; {super_tile $6A #CALL:supertile($61A0)
 $61A4 DEFB $86,$6D,$8E,$9A
 $61A8 DEFB $85,$5A,$58,$81
 $61AC DEFB $84,$5B,$59,$5A ; }
 $61B0 DEFB $8E,$8F,$90,$91 ; {super_tile $6B #CALL:supertile($61B0)
 $61B4 DEFB $6E,$5A,$8E,$94
 $61B8 DEFB $82,$5B,$59,$5A
 $61BC DEFB $6D,$6D,$6D,$5B ; }
 $61C0 DEFB $0F,$6D,$64,$20 ; {super_tile $6C #CALL:supertile($61C0)
 $61C4 DEFB $8B,$0A,$2D,$1F
 $61C8 DEFB $8C,$2C,$2E,$1F
 $61CC DEFB $8D,$28,$29,$68 ; }
 $61D0 DEFB $17,$16,$1A,$9B ; {super_tile $6D #CALL:supertile($61D0)
 $61D4 DEFB $18,$1C,$1B,$9C
 $61D8 DEFB $6D,$53,$52,$9D
 $61DC DEFB $52,$51,$54,$9C ; }
 $61E0 DEFB $92,$93,$6D,$9D ; {super_tile $6E #CALL:supertile($61E0)
 $61E4 DEFB $95,$96,$9A,$9F
 $61E8 DEFB $8E,$97,$95,$96
 $61EC DEFB $59,$5A,$8E,$97 ; }
 $61F0 DEFB $54,$19,$6D,$9B ; {super_tile $6F #CALL:supertile($61F0)
 $61F4 DEFB $17,$16,$6D,$9C
 $61F8 DEFB $6D,$7D,$6D,$9D
 $61FC DEFB $7C,$19,$6D,$9E ; }
 $6200 DEFB $9A,$A0,$00,$01 ; {super_tile $70 #CALL:supertile($6200)
 $6204 DEFB $95,$96,$9A,$A0
 $6208 DEFB $8E,$97,$95,$96
 $620C DEFB $59,$5A,$8E,$97 ; }
 $6210 DEFB $02,$00,$01,$00 ; {super_tile $71 #CALL:supertile($6210)
 $6214 DEFB $03,$01,$02,$03
 $6218 DEFB $9A,$A0,$01,$00
 $621C DEFB $95,$96,$9A,$A0 ; }
 $6220 DEFB $8E,$97,$95,$96 ; {super_tile $72 #CALL:supertile($6220)
 $6224 DEFB $59,$5A,$8E,$94
 $6228 DEFB $6D,$5B,$59,$5A
 $622C DEFB $6D,$6D,$6D,$5B ; }
 $6230 DEFB $6D,$5B,$59,$5A ; {super_tile $73 #CALL:supertile($6230)
 $6234 DEFB $6D,$6E,$74,$5B
 $6238 DEFB $6D,$81,$78,$6D
 $623C DEFB $6D,$82,$6D,$6D ; }
 $6240 DEFB $00,$03,$B2,$B3 ; {super_tile $74 #CALL:supertile($6240)
 $6244 DEFB $A0,$01,$B6,$B7
 $6248 DEFB $8E,$9A,$A0,$02
 $624C DEFB $58,$82,$8E,$9A ; }
 $6250 DEFB $02,$00,$01,$00 ; {super_tile $75 #CALL:supertile($6250)
 $6254 DEFB $03,$01,$02,$03
 $6258 DEFB $01,$00,$A6,$A7
 $625C DEFB $A6,$A7,$A8,$6D ; }
 $6260 DEFB $02,$01,$A6,$A7 ; {super_tile $76 #CALL:supertile($6260)
 $6264 DEFB $A6,$A7,$A8,$6D
 $6268 DEFB $A8,$6D,$A5,$A4
 $626C DEFB $A5,$A4,$00,$03 ; }
 $6270 DEFB $B4,$B5,$02,$01 ; {super_tile $77 #CALL:supertile($6270)
 $6274 DEFB $B8,$B9,$03,$B1
 $6278 DEFB $02,$B1,$AF,$B0
 $627C DEFB $AF,$B0,$6D,$53 ; }
 $6280 DEFB $AD,$AE,$AF,$A2 ; {super_tile $78 #CALL:supertile($6280)
 $6284 DEFB $AF,$B0,$7E,$9E
 $6288 DEFB $7C,$53,$52,$9B
 $628C DEFB $52,$51,$54,$9C ; }
 $6290 DEFB $02,$03,$00,$02 ; {super_tile $79 #CALL:supertile($6290)
 $6294 DEFB $00,$00,$02,$03
 $6298 DEFB $AA,$AB,$03,$02
 $629C DEFB $6D,$A9,$AA,$AB ; }
 $62A0 DEFB $AA,$AB,$03,$00 ; {super_tile $7A #CALL:supertile($62A0)
 $62A4 DEFB $6D,$A9,$AA,$AB
 $62A8 DEFB $AD,$AC,$6D,$A9
 $62AC DEFB $02,$01,$AD,$AC ; }
 $62B0 DEFB $BD,$6D,$A5,$A4 ; {super_tile $7B #CALL:supertile($62B0)
 $62B4 DEFB $BF,$A4,$01,$00
 $62B8 DEFB $00,$02,$03,$B1
 $62BC DEFB $00,$B1,$AF,$B0 ; }
 $62C0 DEFB $A8,$6D,$A5,$A4 ; {super_tile $7C #CALL:supertile($62C0)
 $62C4 DEFB $A5,$A4,$01,$00
 $62C8 DEFB $00,$02,$03,$B1
 $62CC DEFB $00,$B1,$AF,$B0 ; }
 $62D0 DEFB $BE,$B0,$BA,$BC ; {super_tile $7D #CALL:supertile($62D0)
 $62D4 DEFB $BF,$BC,$BB,$6D
 $62D8 DEFB $6D,$7C,$BB,$6D
 $62DC DEFB $6D,$7E,$7F,$6D ; }
 $62E0 DEFB $AF,$B0,$BA,$BC ; {super_tile $7E #CALL:supertile($62E0)
 $62E4 DEFB $A5,$BC,$BB,$7C
 $62E8 DEFB $6D,$6D,$BB,$6D
 $62EC DEFB $6D,$6D,$6D,$6D ; }
 $62F0 DEFB $02,$03,$FE,$B1 ; {super_tile $7F #CALL:supertile($62F0)
 $62F4 DEFB $01,$B1,$AF,$B0
 $62F8 DEFB $AF,$B0,$A5,$BC
 $62FC DEFB $A5,$BC,$6D,$6D ; }
 $6300 DEFB $AF,$B0,$BA,$C1 ; {super_tile $80 #CALL:supertile($6300)
 $6304 DEFB $A5,$BC,$6D,$5B
 $6308 DEFB $89,$6D,$55,$57
 $630C DEFB $87,$6D,$56,$6D ; }
 $6310 DEFB $C5,$28,$33,$15 ; {super_tile $81 #CALL:supertile($6310)
 $6314 DEFB $C4,$28,$29,$1F
 $6318 DEFB $05,$2A,$25,$C2
 $631C DEFB $00,$B1,$C3,$B0 ; }
 $6320 DEFB $85,$5B,$59,$5A ; {super_tile $82 #CALL:supertile($6320)
 $6324 DEFB $C7,$63,$6D,$5B
 $6328 DEFB $C6,$24,$04,$23
 $632C DEFB $C6,$26,$27,$1F ; }
 $6330 DEFB $6D,$6D,$6D,$5B ; {super_tile $83 #CALL:supertile($6330)
 $6334 DEFB $70,$38,$81,$78
 $6338 DEFB $73,$3B,$39,$63
 $633C DEFB $6D,$3C,$5E,$3D ; }
 $6340 DEFB $B4,$B5,$02,$01 ; {super_tile $84 #CALL:supertile($6340)
 $6344 DEFB $B8,$B9,$03,$00
 $6348 DEFB $00,$02,$03,$01
 $634C DEFB $A0,$00,$01,$02 ; }
 $6350 DEFB $AD,$AC,$6D,$A9 ; {super_tile $85 #CALL:supertile($6350)
 $6354 DEFB $03,$00,$AD,$AC
 $6358 DEFB $00,$01,$03,$03
 $635C DEFB $01,$03,$02,$00 ; }
 $6360 DEFB $59,$5A,$58,$6D ; {super_tile $86 #CALL:supertile($6360)
 $6364 DEFB $6D,$5B,$59,$5A
 $6368 DEFB $6D,$6D,$81,$5B
 $636C DEFB $39,$63,$82,$6D ; }
 $6370 DEFB $5E,$3D,$3E,$6D ; {super_tile $87 #CALL:supertile($6370)
 $6374 DEFB $40,$5E,$1F,$70
 $6378 DEFB $41,$42,$1F,$73
 $637C DEFB $58,$05,$5D,$6D ; }
 $6380 DEFB $8E,$9A,$A0,$01 ; {super_tile $88 #CALL:supertile($6380)
 $6384 DEFB $58,$6D,$8E,$9A
 $6388 DEFB $59,$5A,$58,$6D
 $638C DEFB $6D,$5B,$59,$5A ; }
 $6390 DEFB $86,$6F,$70,$6D ; {super_tile $89 #CALL:supertile($6390)
 $6394 DEFB $85,$72,$73,$74
 $6398 DEFB $84,$76,$77,$78
 $639C DEFB $83,$63,$6D,$6D ; }
 $63A0 DEFB $0F,$6D,$6D,$6D ; {super_tile $8A #CALL:supertile($63A0)
 $63A4 DEFB $0D,$7C,$19,$6D
 $63A8 DEFB $13,$17,$16,$1A
 $63AC DEFB $11,$18,$1C,$1B ; }
 $63B0 DEFB $08,$09,$0B,$09 ; {super_tile $8B #CALL:supertile($63B0)
 $63B4 DEFB $08,$09,$0B,$09
 $63B8 DEFB $08,$09,$0B,$09
 $63BC DEFB $10,$09,$0B,$09 ; }
 $63C0 DEFB $11,$0F,$0B,$09 ; {super_tile $8C #CALL:supertile($63C0)
 $63C4 DEFB $15,$13,$0D,$0F
 $63C8 DEFB $12,$16,$12,$13
 $63CC DEFB $13,$14,$15,$15 ; }
 $63D0 DEFB $0B,$09,$0B,$0C ; {super_tile $8D #CALL:supertile($63D0)
 $63D4 DEFB $0B,$09,$0B,$0C
 $63D8 DEFB $0D,$0F,$0B,$0C
 $63DC DEFB $14,$13,$0D,$0E ; }
 $63E0 DEFB $0B,$09,$0A,$06 ; {super_tile $8E #CALL:supertile($63E0)
 $63E4 DEFB $0B,$09,$0B,$0C
 $63E8 DEFB $0B,$09,$0B,$0C
 $63EC DEFB $0B,$09,$0B,$0C ; }
 $63F0 DEFB $15,$14,$13,$12 ; {super_tile $8F #CALL:supertile($63F0)
 $63F4 DEFB $02,$12,$14,$15
 $63F8 DEFB $05,$06,$02,$16
 $63FC DEFB $0A,$06,$05,$06 ; }
 $6400 DEFB $07,$01,$02,$17 ; {super_tile $90 #CALL:supertile($6400)
 $6404 DEFB $03,$06,$05,$06
 $6408 DEFB $08,$09,$0A,$06
 $640C DEFB $08,$09,$0B,$09 ; }
 $6410 DEFB $14,$16,$12,$13 ; {super_tile $91 #CALL:supertile($6410)
 $6414 DEFB $15,$14,$13,$17
 $6418 DEFB $17,$13,$15,$14
 $641C DEFB $02,$12,$13,$12 ; }
 $6420 DEFB $16,$15,$17,$14 ; {super_tile $92 #CALL:supertile($6420)
 $6424 DEFB $14,$13,$15,$12
 $6428 DEFB $16,$12,$17,$13
 $642C DEFB $15,$14,$13,$17 ; }
 $6430 DEFB $1E,$20,$1E,$1F ; {super_tile $93 #CALL:supertile($6430)
 $6434 DEFB $1E,$20,$1E,$1F
 $6438 DEFB $1E,$20,$1E,$1F
 $643C DEFB $1E,$20,$1E,$1F ; }
 $6440 DEFB $1E,$20,$22,$23 ; {super_tile $94 #CALL:supertile($6440)
 $6444 DEFB $22,$21,$17,$14
 $6448 DEFB $14,$13,$15,$12
 $644C DEFB $16,$12,$17,$13 ; }
 $6450 DEFB $25,$20,$1E,$20 ; {super_tile $95 #CALL:supertile($6450)
 $6454 DEFB $25,$20,$1E,$20
 $6458 DEFB $25,$20,$22,$21
 $645C DEFB $24,$21,$17,$13 ; }
 $6460 DEFB $1B,$00,$1E,$20 ; {super_tile $96 #CALL:supertile($6460)
 $6464 DEFB $25,$20,$1E,$20
 $6468 DEFB $25,$20,$1E,$20
 $646C DEFB $25,$20,$1E,$20 ; }
 $6470 DEFB $17,$18,$19,$1A ; {super_tile $97 #CALL:supertile($6470)
 $6474 DEFB $1B,$1C,$1B,$1D
 $6478 DEFB $1B,$00,$1E,$1F
 $647C DEFB $1E,$20,$1E,$1F ; }
 $6480 DEFB $13,$15,$14,$15 ; {super_tile $98 #CALL:supertile($6480)
 $6484 DEFB $14,$16,$17,$18
 $6488 DEFB $17,$18,$1B,$1C
 $648C DEFB $1B,$1C,$1B,$00 ; }
 $6490 DEFB $16,$15,$17,$14 ; {super_tile $99 #CALL:supertile($6490)
 $6494 DEFB $14,$13,$15,$12
 $6498 DEFB $12,$16,$17,$13
 $649C DEFB $15,$17,$13,$18 ; }
 $64A0 DEFB $16,$14,$15,$12 ; {super_tile $9A #CALL:supertile($64A0) [unused by
 $64A4 DEFB $13,$69,$6A,$13 ; map]
 $64A8 DEFB $15,$6B,$6C,$14
 $64AC DEFB $14,$13,$16,$12 ; }
 $64B0 DEFB $28,$27,$26,$29 ; {super_tile $9B #CALL:supertile($64B0)
 $64B4 DEFB $02,$28,$29,$27
 $64B8 DEFB $05,$06,$02,$17
 $64BC DEFB $0A,$06,$05,$06 ; }
 $64C0 DEFB $27,$28,$29,$28 ; {super_tile $9C #CALL:supertile($64C0)
 $64C4 DEFB $26,$29,$28,$27
 $64C8 DEFB $28,$27,$27,$26
 $64CC DEFB $02,$28,$26,$18 ; }
 $64D0 DEFB $26,$28,$27,$28 ; {super_tile $9D #CALL:supertile($64D0)
 $64D4 DEFB $28,$27,$29,$18
 $64D8 DEFB $26,$18,$1B,$1C
 $64DC DEFB $1B,$1C,$1B,$00 ; }
 $64E0 DEFB $2D,$20,$1E,$20 ; {super_tile $9E #CALL:supertile($64E0)
 $64E4 DEFB $2D,$20,$1E,$20
 $64E8 DEFB $2D,$20,$22,$21
 $64EC DEFB $2B,$21,$17,$13 ; }
 $64F0 DEFB $0B,$09,$0B,$2C ; {super_tile $9F #CALL:supertile($64F0)
 $64F4 DEFB $0B,$09,$0B,$2C
 $64F8 DEFB $0D,$0F,$0B,$2C
 $64FC DEFB $13,$14,$0D,$2A ; }
 $6500 DEFB $0B,$09,$0A,$2E ; {super_tile $A0 #CALL:supertile($6500)
 $6504 DEFB $0B,$09,$0B,$2C
 $6508 DEFB $0B,$09,$0B,$2C
 $650C DEFB $0B,$09,$0B,$2C ; }
 $6510 DEFB $2F,$00,$1E,$20 ; {super_tile $A1 #CALL:supertile($6510)
 $6514 DEFB $2D,$20,$1E,$20
 $6518 DEFB $2D,$20,$1E,$20
 $651C DEFB $2D,$20,$1E,$20 ; }
 $6520 DEFB $15,$14,$13,$12 ; {super_tile $A2 #CALL:supertile($6520)
 $6524 DEFB $02,$17,$14,$15
 $6528 DEFB $05,$06,$02,$17
 $652C DEFB $0A,$06,$05,$30 ; }
 $6530 DEFB $13,$15,$14,$15 ; {super_tile $A3 #CALL:supertile($6530)
 $6534 DEFB $14,$16,$17,$18
 $6538 DEFB $17,$18,$1B,$1C
 $653C DEFB $31,$1C,$1B,$00 ; }
 $6540 DEFB $42,$09,$0B,$3A ; {super_tile $A4 #CALL:supertile($6540)
 $6544 DEFB $41,$09,$0B,$3A
 $6548 DEFB $3D,$3E,$3B,$3A
 $654C DEFB $13,$17,$3D,$3C ; }
 $6550 DEFB $36,$3E,$3B,$45 ; {super_tile $A5 #CALL:supertile($6550)
 $6554 DEFB $12,$13,$3D,$46
 $6558 DEFB $14,$15,$14,$13
 $655C DEFB $12,$13,$12,$14 ; }
 $6560 DEFB $44,$38,$37,$06 ; {super_tile $A6 #CALL:supertile($6560)
 $6564 DEFB $42,$43,$40,$39
 $6568 DEFB $42,$09,$0B,$3F
 $656C DEFB $42,$09,$0B,$3A ; }
 $6570 DEFB $35,$09,$0B,$47 ; {super_tile $A7 #CALL:supertile($6570)
 $6574 DEFB $35,$09,$0B,$45
 $6578 DEFB $34,$09,$0B,$45
 $657C DEFB $35,$09,$0B,$45 ; }
 $6580 DEFB $07,$01,$02,$17 ; {super_tile $A8 #CALL:supertile($6580)
 $6584 DEFB $32,$06,$05,$06
 $6588 DEFB $33,$38,$37,$06
 $658C DEFB $34,$43,$40,$38 ; }
 $6590 DEFB $16,$15,$14,$15 ; {super_tile $A9 #CALL:supertile($6590)
 $6594 DEFB $02,$17,$13,$17
 $6598 DEFB $05,$06,$02,$15
 $659C DEFB $41,$06,$05,$06 ; }
 $65A0 DEFB $29,$27,$28,$29 ; {super_tile $AA #CALL:supertile($65A0)
 $65A4 DEFB $02,$28,$29,$27
 $65A8 DEFB $05,$06,$02,$26
 $65AC DEFB $0A,$06,$05,$06 ; }
 $65B0 DEFB $08,$09,$0B,$09 ; {super_tile $AB #CALL:supertile($65B0)
 $65B4 DEFB $08,$09,$0B,$4F
 $65B8 DEFB $08,$4F,$50,$4A
 $65BC DEFB $52,$4A,$51,$4B ; }
 $65C0 DEFB $0B,$49,$19,$48 ; {super_tile $AC #CALL:supertile($65C0)
 $65C4 DEFB $50,$4A,$50,$1D
 $65C8 DEFB $51,$4B,$4C,$4E
 $65CC DEFB $4C,$4D,$4C,$4E ; }
 $65D0 DEFB $53,$4B,$4C,$4D ; {super_tile $AD #CALL:supertile($65D0)
 $65D4 DEFB $25,$20,$1E,$4D
 $65D8 DEFB $25,$20,$1E,$20
 $65DC DEFB $25,$20,$1E,$20 ; }
 $65E0 DEFB $4C,$4D,$4C,$4E ; {super_tile $AE #CALL:supertile($65E0)
 $65E4 DEFB $4C,$4D,$4C,$4E
 $65E8 DEFB $1E,$4D,$4C,$4E
 $65EC DEFB $1E,$20,$1E,$4E ; }
 $65F0 DEFB $55,$54,$57,$55 ; {super_tile $AF #CALL:supertile($65F0)
 $65F4 DEFB $54,$56,$55,$18
 $65F8 DEFB $57,$18,$1B,$1C
 $65FC DEFB $1B,$1C,$1B,$00 ; }
 $6600 DEFB $54,$55,$56,$57 ; {super_tile $B0 #CALL:supertile($6600)
 $6604 DEFB $56,$57,$54,$55
 $6608 DEFB $55,$56,$57,$54
 $660C DEFB $54,$55,$54,$18 ; }
 $6610 DEFB $28,$28,$26,$29 ; {super_tile $B1 #CALL:supertile($6610)
 $6614 DEFB $27,$29,$27,$56
 $6618 DEFB $29,$56,$57,$57
 $661C DEFB $57,$56,$55,$54 ; }
 $6620 DEFB $17,$18,$19,$1A ; {super_tile $B2 #CALL:supertile($6620)
 $6624 DEFB $5A,$1C,$1B,$1D
 $6628 DEFB $65,$64,$58,$1F
 $662C DEFB $65,$5E,$5F,$5C ; }
 $6630 DEFB $61,$66,$62,$5C ; {super_tile $B3 #CALL:supertile($6630)
 $6634 DEFB $61,$66,$68,$63
 $6638 DEFB $61,$66,$68,$63
 $663C DEFB $61,$66,$68,$63 ; }
 $6640 DEFB $61,$66,$68,$09 ; {super_tile $B4 #CALL:supertile($6640)
 $6644 DEFB $61,$67,$0B,$09
 $6648 DEFB $11,$0F,$0B,$09
 $664C DEFB $15,$14,$0D,$0F ; }
 $6650 DEFB $5B,$01,$58,$20 ; {super_tile $B5 #CALL:supertile($6650)
 $6654 DEFB $03,$06,$5F,$5D
 $6658 DEFB $61,$60,$0A,$5E
 $665C DEFB $61,$09,$0B,$09 ; }
 $6660 DEFB $1E,$20,$22,$23 ; {super_tile $B6 #CALL:supertile($6660)
 $6664 DEFB $59,$21,$17,$15
 $6668 DEFB $05,$06,$02,$16
 $666C DEFB $0A,$06,$05,$06 ; }
 $6670 DEFB $1B,$00,$1E,$20 ; {super_tile $B7 #CALL:supertile($6670)
 $6674 DEFB $25,$20,$1E,$20
 $6678 DEFB $25,$20,$1E,$20
 $667C DEFB $58,$20,$1E,$20 ; }
 $6680 DEFB $16,$14,$15,$12 ; {super_tile $B8 #CALL:supertile($6680)
 $6684 DEFB $13,$69,$6A,$13
 $6688 DEFB $15,$6B,$6C,$14
 $668C DEFB $14,$13,$16,$12 ; }
 $6690 DEFB $28,$27,$26,$16 ; {super_tile $B9 #CALL:supertile($6690)
 $6694 DEFB $29,$17,$28,$27
 $6698 DEFB $17,$28,$16,$51
 $669C DEFB $17,$A0,$9F,$9B ; }
 $66A0 DEFB $17,$28,$16,$26 ; {super_tile $BA #CALL:supertile($66A0)
 $66A4 DEFB $16,$29,$27,$28
 $66A8 DEFB $9A,$17,$28,$27
 $66AC DEFB $9C,$9D,$9E,$17 ; }
 $66B0 DEFB $26,$27,$17,$70 ; {super_tile $BB #CALL:supertile($66B0)
 $66B4 DEFB $16,$28,$29,$15
 $66B8 DEFB $28,$29,$26,$16
 $66BC DEFB $02,$17,$26,$70 ; }
 $66C0 DEFB $97,$99,$B0,$B1 ; {super_tile $BC #CALL:supertile($66C0)
 $66C4 DEFB $88,$8F,$8A,$AC
 $66C8 DEFB $8D,$96,$98,$6E
 $66CC DEFB $8B,$AF,$8C,$83 ; }
 $66D0 DEFB $B2,$AE,$94,$95 ; {super_tile $BD #CALL:supertile($66D0)
 $66D4 DEFB $AD,$85,$92,$93
 $66D8 DEFB $6F,$91,$A9,$8E
 $66DC DEFB $84,$AB,$AA,$85 ; }
 $66E0 DEFB $6D,$16,$28,$27 ; {super_tile $BE #CALL:supertile($66E0)
 $66E4 DEFB $17,$28,$27,$26
 $66E8 DEFB $16,$27,$17,$28
 $66EC DEFB $6D,$15,$29,$18 ; }
 $66F0 DEFB $90,$8F,$8A,$AC ; {super_tile $BF #CALL:supertile($66F0)
 $66F4 DEFB $81,$17,$0D,$75
 $66F8 DEFB $77,$06,$02,$7B
 $66FC DEFB $78,$06,$05,$71 ; }
 $6700 DEFB $AD,$85,$92,$89 ; {super_tile $C0 #CALL:supertile($6700)
 $6704 DEFB $76,$21,$26,$82
 $6708 DEFB $7C,$18,$1B,$7E
 $670C DEFB $72,$1C,$1B,$7F ; }
 $6710 DEFB $79,$09,$0A,$71 ; {super_tile $C1 #CALL:supertile($6710)
 $6714 DEFB $79,$09,$0B,$73
 $6718 DEFB $79,$09,$0B,$73
 $671C DEFB $79,$09,$0B,$73 ; }
 $6720 DEFB $72,$00,$1E,$80 ; {super_tile $C2 #CALL:supertile($6720)
 $6724 DEFB $74,$20,$1E,$80
 $6728 DEFB $74,$20,$1E,$80
 $672C DEFB $74,$20,$1E,$80 ; }
 $6730 DEFB $79,$09,$0B,$73 ; {super_tile $C3 #CALL:supertile($6730)
 $6734 DEFB $79,$09,$0B,$73
 $6738 DEFB $0D,$0F,$0B,$73
 $673C DEFB $13,$12,$0D,$7A ; }
 $6740 DEFB $74,$20,$1E,$80 ; {super_tile $C4 #CALL:supertile($6740)
 $6744 DEFB $74,$20,$1E,$80
 $6748 DEFB $74,$20,$22,$21
 $674C DEFB $7D,$21,$14,$15 ; }
 $6750 DEFB $90,$8F,$8A,$AC ; {super_tile $C5 #CALL:supertile($6750)
 $6754 DEFB $A1,$28,$0D,$75
 $6758 DEFB $A1,$15,$27,$7B
 $675C DEFB $A1,$28,$17,$A4 ; }
 $6760 DEFB $A1,$18,$1B,$A5 ; {super_tile $C6 #CALL:supertile($6760)
 $6764 DEFB $A2,$1C,$1B,$A6
 $6768 DEFB $A2,$00,$1E,$A8
 $676C DEFB $A3,$20,$1E,$A8 ; }
 $6770 DEFB $A3,$20,$1E,$A8 ; {super_tile $C7 #CALL:supertile($6770)
 $6774 DEFB $A3,$20,$1E,$A8
 $6778 DEFB $1E,$20,$1E,$A8
 $677C DEFB $1E,$20,$1E,$A7 ; }
 $6780 DEFB $CB,$CB,$CA,$CB ; {super_tile $C8 #CALL:supertile($6780)
 $6784 DEFB $CB,$CB,$CB,$18
 $6788 DEFB $CB,$18,$1B,$1C
 $678C DEFB $BC,$BA,$1B,$00 ; }
 $6790 DEFB $CC,$CD,$19,$04 ; {super_tile $C9 #CALL:supertile($6790)
 $6794 DEFB $1B,$1C,$1B,$1D
 $6798 DEFB $1B,$00,$1E,$1F
 $679C DEFB $1E,$20,$1E,$1F ; }
 $67A0 DEFB $BB,$B9,$B6,$B7 ; {super_tile $CA #CALL:supertile($67A0)
 $67A4 DEFB $25,$20,$B5,$B8
 $67A8 DEFB $25,$20,$1E,$20
 $67AC DEFB $25,$20,$1E,$20 ; }
 $67B0 DEFB $1E,$20,$1E,$1F ; {super_tile $CB #CALL:supertile($67B0)
 $67B4 DEFB $B6,$B7,$1E,$1F
 $67B8 DEFB $B5,$B8,$B6,$B3
 $67BC DEFB $1E,$20,$B5,$B4 ; }
 $67C0 DEFB $59,$5A,$58,$6D ; {super_tile $CC #CALL:supertile($67C0)
 $67C4 DEFB $C8,$C9,$59,$5A
 $67C8 DEFB $13,$19,$CB,$C9
 $67CC DEFB $0D,$16,$CC,$CE ; }
 $67D0 DEFB $6D,$3F,$40,$5E ; {super_tile $CD #CALL:supertile($67D0)
 $67D4 DEFB $58,$5C,$41,$88
 $67D8 DEFB $59,$5A,$58,$05
 $67DC DEFB $CB,$C9,$59,$5A ; }
 $67E0 DEFB $14,$19,$CC,$CC ; {super_tile $CE #CALL:supertile($67E0)
 $67E4 DEFB $15,$16,$CD,$D5
 $67E8 DEFB $0F,$6D,$CC,$CE
 $67EC DEFB $0D,$6D,$CC,$CC ; }
 $67F0 DEFB $CC,$CE,$CB,$C9 ; {super_tile $CF #CALL:supertile($67F0)
 $67F4 DEFB $CC,$CC,$CC,$CE
 $67F8 DEFB $CC,$CC,$CC,$CC
 $67FC DEFB $CC,$CC,$CC,$CA ; }
 $6800 DEFB $09,$0A,$D1,$CC ; {super_tile $D0 #CALL:supertile($6800)
 $6804 DEFB $08,$0B,$D2,$D3
 $6808 DEFB $6D,$F4,$F7,$F8
 $680C DEFB $F7,$F8,$F7,$DC ; }
 $6810 DEFB $CC,$CA,$F5,$F6 ; {super_tile $D1 #CALL:supertile($6810)
 $6814 DEFB $D4,$F8,$F7,$F9
 $6818 DEFB $F7,$DC,$FA,$FB
 $681C DEFB $FA,$FC,$FA,$FB ; }
 $6820 DEFB $59,$5A,$58,$0E ; {super_tile $D2 #CALL:supertile($6820)
 $6824 DEFB $6D,$5B,$59,$69
 $6828 DEFB $6D,$6D,$6D,$6B
 $682C DEFB $F5,$E0,$6D,$10 ; }
 $6830 DEFB $F7,$F9,$6D,$0E ; {super_tile $D3 #CALL:supertile($6830)
 $6834 DEFB $FA,$FB,$6D,$0C
 $6838 DEFB $FA,$FB,$6D,$12
 $683C DEFB $FA,$FB,$6D,$10 ; }
 $6840 DEFB $FA,$FB,$6D,$0E ; {super_tile $D4 #CALL:supertile($6840)
 $6844 DEFB $FA,$D7,$6D,$0C
 $6848 DEFB $FA,$D0,$04,$06
 $684C DEFB $FE,$FF,$05,$07 ; }
 $6850 DEFB $0F,$53,$52,$51 ; {super_tile $D5 #CALL:supertile($6850)
 $6854 DEFB $6A,$51,$54,$6D
 $6858 DEFB $6C,$6D,$6D,$6D
 $685C DEFB $11,$6D,$CF,$DD ; }
 $6860 DEFB $0F,$6D,$DF,$E2 ; {super_tile $D6 #CALL:supertile($6860)
 $6864 DEFB $0D,$6D,$E4,$E8
 $6868 DEFB $13,$6D,$E4,$E8
 $686C DEFB $11,$6D,$E4,$E8 ; }
 $6870 DEFB $0F,$6D,$E4,$E8 ; {super_tile $D7 #CALL:supertile($6870)
 $6874 DEFB $0D,$6D,$DA,$E8
 $6878 DEFB $09,$0A,$DB,$E8
 $687C DEFB $08,$0B,$ED,$EA ; }
 $6880 DEFB $E3,$DD,$DE,$D6 ; {super_tile $D8 #CALL:supertile($6880)
 $6884 DEFB $DF,$E2,$E1,$D8
 $6888 DEFB $E4,$E5,$E6,$D8
 $688C DEFB $E4,$E5,$E6,$D9 ; }
 $6890 DEFB $DA,$D9,$E7,$E5 ; {super_tile $D9 #CALL:supertile($6890)
 $6894 DEFB $E4,$E5,$E7,$E5
 $6898 DEFB $E4,$E5,$E7,$E5
 $689C DEFB $E4,$E5,$E7,$E5 ; }

; room_index
;
; Index of the current room, or 0 when outside.
b$68A0 DEFB $00

; current_door
;
; Holds current door.
b$68A1 DEFB $00

; transition
;
; Used by the routines at #R$B1F5, #R$B32D, #R$CA81, #R$CB98 and #R$EFCB.
; .
; Looks like it's called to transition to a new room.
;
; I:HL Pointer to location?
; I:IY Pointer to visible character?
c$68A2 EX DE,HL      ; EX DE,HL
 $68A3 PUSH IY       ; {HL = IY;
 $68A5 POP HL        ; }
 $68A6 LD A,L        ; A = L; // stash vischar index/offset
 $68A7 PUSH AF       ; PUSH AF
 $68A8 ADD A,$0F     ; {L = A + 0x0F; // $8xxF (position on Y axis)
 $68AA LD L,A        ; }
 $68AB LD A,(IY+$1C) ; A = IY[0x1C]; // $8x1C (likely room index)
 $68AE AND A         ; {if (A == 0) <% // outdoors
 $68AF JP NZ,$68C3   ; }
; Set position on Y axis, X axis and vertical offset (dividing by 4).
 $68B2 LD B,$03      ;   B = 3; // 3 iterations
*$68B4 PUSH BC       ;   do <% PUSH BC
 $68B5 LD A,(DE)     ;     A = *DE++;
 $68B6 CALL $B295    ;     multiply_by_4();
 $68B9 LD (HL),C     ; {    *HL++ = C;
 $68BA INC L         ; }
 $68BB LD (HL),B     ; {    *HL++ = B;
 $68BC INC L         ;
 $68BD INC DE        ; }
 $68BE POP BC        ;     POP BC
 $68BF DJNZ $68B4    ;   %> while (--B); %>
 $68C1 JR $68CE      ; else <% // indoors
; Set position on Y axis, X axis and vertical offset (copying).
*$68C3 LD B,$03      ;   B = 3; // 3 iterations
*$68C5 LD A,(DE)     ; {  do <% *HL++ = *DE++;
 $68C6 LD (HL),A     ;
 $68C7 INC L         ; }
 $68C8 LD (HL),$00   ; {    *HL++ = 0;
 $68CA INC L         ;
 $68CB INC DE        ; }
 $68CC DJNZ $68C5    ;   %> while (--B); %>
*$68CE POP AF        ; POP AF
 $68CF LD L,A        ; L = A;
 $68D0 AND A         ; {if (A) <% reset_visible_character(); return; %> // exit
 $68D1 JP Z,$68D7    ; via
 $68D4 JP $C5D3      ; }
; HL points to the player vischar at this point.
*$68D7 INC L         ; {*++HL &= ~vischar_BYTE1_BIT7; // $8001
 $68D8 RES 7,(HL)    ; }
 $68DA LD A,($801C)  ; A = ($801C); // room index
 $68DD LD ($68A0),A  ; room_index = A;
 $68E0 AND A         ; {if (A == 0) <%
 $68E1 JP NZ,$68F4   ; }
 $68E4 LD A,$0C      ; {  HL += 12;
 $68E6 ADD A,L       ;
 $68E7 LD L,A        ; }
 $68E8 LD (HL),$80   ; {  *HL++ = 0x80; // $800D // likely a character
 $68EA INC L         ; direction}
 $68EB LD A,(HL)     ; {  *HL &= 3;     // $800E // likely a sprite direction
 $68EC AND $03       ;
 $68EE LD (HL),A     ; }
 $68EF CALL $B2FC    ;   reset_outdoors();
 $68F2 JR $691A      ;   goto squash_stack_goto_main; %>

; enter_room
;
; Used by the routines at #R$68A2, #R$9D78, #R$9DE5 and #R$B75A.
c$68F4 LD HL,$0000   ; {plot_game_window_x = 0;
 $68F7 LD ($A7C7),HL ; }
 $68FA CALL $6A35    ; setup_room();
 $68FD CALL $6B42    ; plot_interior_tiles();
 $6900 LD HL,$EA74   ; {map_position = 0xEA74;
 $6903 LD ($81BB),HL ; }
 $6906 CALL $6920    ; set_player_sprite_for_room();
 $6909 LD HL,$8000   ; HL = $8000;
 $690C CALL $B71B    ; reset_position(); // reset player
 $690F CALL $6939    ; setup_movable_items();
 $6912 CALL $ABA0    ; zoombox();
 $6915 LD B,$01      ; {increase_score(1);
 $6917 CALL $A0F9    ; }

; squash_stack_goto_main
;
; Used by the routine at #R$68A2.
c$691A LD SP,$FFFF   ; SP = $FFFF;
 $691D JP $9D7B      ; goto main_loop;

; set_player_sprite_for_room
;
; Used by the routine at #R$68F4.
; .
; Called when changing rooms.
; .
; For tunnels this forces the player sprite to 'prisoner' and sets the crawl
; flag appropriately.
c$6920 LD HL,$800D   ; HL = $800D;
 $6923 LD (HL),$80   ; {*HL++ = 0x80; // likely a character direction
 $6925 INC L         ; }
 $6926 LD A,($68A0)  ; {if (room_index >= room_29_secondtunnelstart) <%
 $6929 CP $1D        ;
 $692B JR C,$6936    ; }
 $692D SET 2,(HL)    ;   *HL |= vischar_BYTE14_CRAWL; // $800E, set crawl flag
 $692F LD HL,$CE2E   ; {  $8015 = &sprite_prisoner_tl_4; %>
 $6932 LD ($8015),HL ; }
 $6935 RET           ; else <%
*$6936 RES 2,(HL)    ;   *HL &= ~vischar_BYTE14_CRAWL; %> // clear crawl flag
 $6938 RET           ; return;

; setup_movable_items
;
; Used by the routines at #R$68F4 and #R$B2FC.
c$6939 CALL $69C9                           ; reset_nonplayer_visible_characters();
 $693C LD A,($68A0)                         ; A = room_index;
 $693F CP $02                               ; {     if (A == room_2_hut2left)
 $6941 JP NZ,$6949                          ; setup_stove1();
 $6944 CALL $6978                           ;
 $6947 JR $695B                             ; }
*$6949 CP $04                               ; {else if (A == room_4_hut3left)
 $694B JP NZ,$6953                          ; setup_stove2();
 $694E CALL $6971                           ;
 $6951 JR $695B                             ; }
*$6953 CP $09                               ; {else if (A == room_9_crate)
 $6955 JP NZ,$695B                          ; setup_crate();
 $6958 CALL $696A                           ; }
*$695B CALL $C41C                           ; spawn_characters();
 $695E CALL $DB9E                           ; mark_nearby_items();
 $6961 CALL $B5CE                           ; called_from_main_loop_9();
 $6964 CALL $AAB2                           ; move_map();
 $6967 JP $B866                             ; locate_thing_to_plot_then_plot();
                                            ; return;
*$696A LD HL,$69B7                          ; setup_crate: HL =
                                            ; &movable_items[movable_item_CRATE];
 $696D LD A,$1C                             ; A = character_28_CRATE;
 $696F JR $697D                             ; goto setup_movable_item;
*$6971 LD HL,$69C0                          ; setup_stove2: HL =
                                            ; &movable_items[movable_item_STOVE2];
 $6974 LD A,$1B                             ; A = character_27_STOVE_2;
 $6976 JR $697D                             ; goto setup_movable_item;
*$6978 LD HL,$69AE                          ; setup_stove1: HL =
                                            ; &movable_items[movable_item_STOVE1];
 $697B LD A,$1A                             ; A = character_26_STOVE_1;
*$697D LD ($8020),A                         ; setup_movable_item: $8020 = A; //
                                            ; character index
 $6980 LD BC,$0009                          ; {memcpy($802F, HL, 9); //
 $6983 LD DE,$802F                          ; non-player character 0 is
 $6986 LDIR                                 ; $8020..$803F}
 $6988 LD HL,$69A0                          ; {memcpy($8021,
 $698B LD DE,$8021                          ; movable_item_reset_data, 14);
 $698E LD BC,$000E                          ;
 $6991 LDIR                                 ; }
 $6993 LD A,($68A0)                         ; {$803C = room_index;
 $6996 LD ($803C),A                         ; }
 $6999 LD HL,$8020                          ; HL = $8020;
 $699C CALL $B71B                           ; reset_position(); // reset item
                                            ; vischar
 $699F RET                                  ; return;
; Fourteen bytes of reset data.
 $69A0 DEFB $00,$00,$00,$00,$00,$00,$00,$F2 ; {movable_item_reset_data
 $69A8 DEFB $CD,$76,$CF,$00,$00,$00         ; }

; movable_items
;
; struct movable_item { word y_coord, x_coord, vertical_offset; const sprite *;
; byte terminator; };
; .
; Sub-struct of vischar ($802F..$8038).
b$69AE DEFB $3E,$00,$23,$00,$10,$00,$22,$CE ; {struct movable_item stove1 = { {
 $69B6 DEFB $00                             ; 62, 35, 16 }, &sprite_stove, 0
                                            ; };}
 $69B7 DEFB $37,$00,$36,$00,$0E,$00,$28,$CE ; {struct movable_item crate  = { {
 $69BF DEFB $00                             ; 55, 54, 14 }, &sprite_crate, 0
                                            ; };}
 $69C0 DEFB $3E,$00,$23,$00,$10,$00,$22,$CE ; {struct movable_item stove2 = { {
 $69C8 DEFB $00                             ; 62, 35, 16 }, &sprite_stove, 0
                                            ; };}

; reset_nonplayer_visible_characters
;
; Used by the routine at #R$6939.
; .
; Reset all non-player visible characters.
c$69C9 LD HL,$8020   ; HL = $8020; // iterate over non-player characters
 $69CC LD BC,$0720   ; B = 7; // 7 iterations
*$69CF PUSH BC       ; do <% PUSH BC
 $69D0 PUSH HL       ;   PUSH HL
 $69D1 CALL $C5D3    ;   reset_visible_character();
 $69D4 POP HL        ;   POP HL
 $69D5 POP BC        ;   POP BC
 $69D6 LD A,L        ; {  HL += 32; // stride
 $69D7 ADD A,C       ;
 $69D8 LD L,A        ; }
 $69D9 DJNZ $69CF    ; %> while (--B);
 $69DB RET           ; return;

; setup_doors
;
; Used by the routine at #R$6A35.
; .
; Looks like it's filling door_related with stuff from the door_positions
; table.
; .
; Wipe $81D6..$81D9 (door_related) with 0xFF.
c$69DC LD A,$FF      ; -
 $69DE LD DE,$81D9   ; DE = door_related + 3;
 $69E1 LD B,$04      ; B = 4;
*$69E3 LD (DE),A     ; {do <% *DE-- = 0xFF;
 $69E4 DEC DE        ; }
 $69E5 DJNZ $69E3    ; %> while (--B);
 $69E7 INC DE        ; DE++; // DE = &door_related[0];
 $69E8 LD A,($68A0)  ; {B = room_index << 2;
 $69EB ADD A,A       ;
 $69EC ADD A,A       ;
 $69ED LD B,A        ; }
 $69EE LD C,$00      ; {C = 0;
 $69F0 EXX           ; }
 $69F1 LD HL,$78D6   ; HLdash = &door_positions[0];
 $69F4 LD B,$7C      ; Bdash = 124; // length of door_positions
 $69F6 LD DE,$0004   ; -
*$69F9 LD A,(HL)     ; {do <% if (HLdash[0] & 0xFC == B) <%
 $69FA EXX           ;
 $69FB AND $FC       ;
 $69FD CP B          ;
 $69FE JR NZ,$6A05   ; }
 $6A00 LD A,C        ; {    *DE++ = C ^ 0x80; %>
 $6A01 XOR $80       ;
 $6A03 LD (DE),A     ;
 $6A04 INC DE        ; }
*$6A05 LD A,C        ; {  C ^= 0x80;
 $6A06 XOR $80       ; }
 $6A08 JP M,$6A0C    ; {  if (C >= 0) C++; // increment every two stops?
 $6A0B INC A         ;
*$6A0C LD C,A        ;
 $6A0D EXX           ; }
 $6A0E ADD HL,DE     ;   HLdash += 4; %>
 $6A0F DJNZ $69F9    ; while (--Bdash);
 $6A11 RET           ; return;

; get_door_position
;
; Used by the routines at #R$B32D, #R$B4D0, #R$C651 and #R$CA81.
; .
; Index turns into door_position struct pointer.
;
; I:A  Index of ...
; O:HL Pointer to ...
; O:DE Corrupted.
c$6A12 LD C,A        ; {HL = &door_positions[(A * 2) & 0xFF]; // are they pairs
 $6A13 ADD A,A       ; of doors?
 $6A14 LD L,A        ;
 $6A15 LD H,$00      ;
 $6A17 ADD HL,HL     ;
 $6A18 ADD HL,HL     ;
 $6A19 LD DE,$78D6   ;
 $6A1C ADD HL,DE     ; }
 $6A1D BIT 7,C       ; {if (A & (1<<7)) HL += 4;
 $6A1F RET Z         ;
 $6A20 LD A,L        ;
 $6A21 ADD A,$04     ;
 $6A23 LD L,A        ;
 $6A24 RET NC        ;
 $6A25 INC H         ; }
 $6A26 RET           ; return;

; wipe_visible_tiles
;
; Used by the routines at #R$6A35, #R$A50B and #R$AB6B.
; .
; Wipe the visible tiles array at $F0F8 (24 * 17 = 408).
c$6A27 LD DE,$F0F9   ; {memset($F0F8, 0, 408);
 $6A2A LD HL,$F0F8   ;
 $6A2D LD BC,$0197   ;
 $6A30 LD (HL),$00   ;
 $6A32 LDIR          ; }
 $6A34 RET           ; return;

; setup_room
;
; Used by the routines at #R$68F4, #R$7B36, #R$9E07, #R$A289, #R$A2E2, #R$A420
; and #R$B3F6.
c$6A35 CALL $6A27    ; wipe_visible_tiles();
 $6A38 LD A,($68A0)  ; {HL = rooms_and_tunnels[room_index - 1];
 $6A3B ADD A,A       ;
 $6A3C LD HL,$6BAB   ;
 $6A3F ADD A,L       ;
 $6A40 LD L,A        ;
 $6A41 JR NC,$6A44   ;
 $6A43 INC H         ;
*$6A44 LD A,(HL)     ;
 $6A45 INC HL        ;
 $6A46 LD H,(HL)     ;
 $6A47 LD L,A        ; }
 $6A48 PUSH HL       ; PUSH HL
 $6A49 CALL $69DC    ; setup_doors();
 $6A4C POP HL        ; POP HL
 $6A4D LD DE,$81BE   ; DE = &roomdef_bounds_index; // room dimensions index
 $6A50 LDI           ; *DE++ = *HL++;
 $6A52 LD A,(HL)     ; A = *HL;
 $6A53 AND A         ; -
 $6A54 LD (DE),A     ; *DE = A;
 $6A55 JR NZ,$6A5A   ; if (A == 0) <% // no objects? (boundaries)
 $6A57 INC HL        ;   HL++; %>
 $6A58 JR $6A62      ; else <%
*$6A5A ADD A,A       ; {  memcpy(DE, HL, A * 4 + 1); HL += A * 4 + 1; %>
 $6A5B ADD A,A       ;
 $6A5C INC A         ;
 $6A5D LD C,A        ;
 $6A5E LD B,$00      ;
 $6A60 LDIR          ; }
*$6A62 LD DE,$81DA   ; DE = &indoor_mask_data;
 $6A65 LD A,(HL)     ; {A = *HL++; // sampled HL=$6E22,$6EF8,$6F38 (unique per
 $6A66 INC HL        ; room, but never when outside)}
 $6A67 LD (DE),A     ; *DE = A;
 $6A68 AND A         ; -
 $6A69 JR Z,$6A8C    ; if (A) <%
 $6A6B INC DE        ;   DE++;
 $6A6C LD B,A        ;   B = A;
*$6A6D PUSH BC       ;   do <% -
 $6A6E PUSH HL       ;     -
 $6A6F LD L,(HL)     ; {    memcpy(DE, &stru_EA7C[*HL++], 7); DE += 7;
 $6A70 LD H,$00      ;
 $6A72 LD B,H        ;
 $6A73 LD C,L        ;
 $6A74 ADD HL,HL     ;
 $6A75 ADD HL,HL     ;
 $6A76 ADD HL,HL     ;
 $6A77 AND A         ;
 $6A78 SBC HL,BC     ;
 $6A7A LD BC,$EA7C   ;
 $6A7D ADD HL,BC     ;
 $6A7E LD BC,$0007   ;
 $6A81 LDIR          ; }
 $6A83 LD A,$20      ; {    *DE++ = 32;
 $6A85 LD (DE),A     ;
 $6A86 INC DE        ; }
 $6A87 POP HL        ;     -
 $6A88 INC HL        ;     -
 $6A89 POP BC        ;     - %>
 $6A8A DJNZ $6A6D    ;   while (--B); %>
; Plot all objects.
*$6A8C LD B,(HL)     ; B = *HL; // count of objects  // sample: HL -> $6E25
                     ; (room_16_corridor + 5)
 $6A8D LD A,B        ; {if (B == 0) return;
 $6A8E AND A         ;
 $6A8F RET Z         ; }
 $6A90 INC HL        ; HL++;
*$6A91 PUSH BC       ; do <% PUSH BC
 $6A92 LD C,(HL)     ; {  C = *HL++; // object index
 $6A93 INC HL        ; }
 $6A94 LD A,(HL)     ; {  A = *HL++; // column
 $6A95 INC HL        ; }
 $6A96 PUSH HL       ;   -
 $6A97 LD L,(HL)     ; {  DE = $F0F8 + *HL * 24 + A; // $F0F8 = visible tiles
 $6A98 LD H,$00      ; array (so *HL = row, A = column)
 $6A9A ADD HL,HL     ;
 $6A9B ADD HL,HL     ;
 $6A9C ADD HL,HL     ;
 $6A9D LD E,L        ;
 $6A9E LD D,H        ;
 $6A9F ADD HL,HL     ;
 $6AA0 ADD HL,DE     ;
 $6AA1 ADD A,L       ;
 $6AA2 LD L,A        ;
 $6AA3 JR NC,$6AA6   ;
 $6AA5 INC H         ;
*$6AA6 LD DE,$F0F8   ;
 $6AA9 ADD HL,DE     ;
 $6AAA EX DE,HL      ; }
 $6AAB LD A,C        ; {  expand_object(C); // pass C as A
 $6AAC CALL $6AB5    ; }
 $6AAF POP HL        ;   -
 $6AB0 POP BC        ;   POP BC
 $6AB1 INC HL        ;   HL++; %>
 $6AB2 DJNZ $6A91    ; while (--B);
 $6AB4 RET           ; return;

; expand_object
;
; Used by the routine at #R$6A35.
; .
; Expands RLE-encoded objects to a full set of tile references.
; .
; Format:
; .
; <w> <h>: width, height
; .
; Repeat:
; .
; <t>: emit tile <t>
; .
; <0xFF> <64..127> <t>: emit tile <t> <t+1> <t+2> .. up to 63 times
; .
; <0xFF> <128..254> <t>: emit tile <t> up to 126 times
; .
; <0xFF> <0xFF>: emit <0xFF>
;
; I:A  Object index.
; I:DE Receives expanded tiles. Must point to correct x,y in tile buf.
; O:BC Corrupted.
; O:HL Corrupted.
c$6AB5 ADD A,A       ; {HL = interior_object_defs[A];
 $6AB6 LD HL,$7095   ;
 $6AB9 LD C,A        ;
 $6ABA LD B,$00      ;
 $6ABC ADD HL,BC     ;
 $6ABD LD A,(HL)     ;
 $6ABE INC HL        ;
 $6ABF LD H,(HL)     ;
 $6AC0 LD L,A        ; }
 $6AC1 LD B,(HL)     ; {B = *HL++; // width
 $6AC2 INC HL        ; }
 $6AC3 LD C,(HL)     ; {C = *HL++; // height
 $6AC4 INC HL        ; }
 $6AC5 LD A,B        ; {($6AE7) = B; // self modify (== width)
 $6AC6 LD ($6AE7),A  ; }
*$6AC9 LD A,(HL)     ; do <% do <% expand: A = *HL;
 $6ACA CP $FF        ; {    if (A == objecttile_ESCAPE) <%
 $6ACC JR NZ,$6ADE   ; }
 $6ACE INC HL        ;       HL++;
 $6ACF LD A,(HL)     ;       A = *HL;
 $6AD0 CP $FF        ; {      if (A != objecttile_ESCAPE) <% // FF FF => FF
 $6AD2 JR Z,$6ADE    ; }
 $6AD4 AND $F0       ;         A &= 0xF0; // redundant?
 $6AD6 CP $80        ; {        if (A >= 128) goto $6AF4;
 $6AD8 JR NC,$6AF4   ; }
 $6ADA CP $40        ; {        if (A == 64) goto $6B19; %> %>
 $6ADC JR Z,$6B19    ; }
*$6ADE AND A         ; {    if (A) *DE = A;
 $6ADF JR Z,$6AE2    ;
 $6AE1 LD (DE),A     ; }
*$6AE2 INC HL        ;     HL++;
 $6AE3 INC DE        ;     DE++;
 $6AE4 DJNZ $6AC9    ;   %> while (--B);
 $6AE6 LD B,$01      ;   B = 1; // self modified
 $6AE8 LD A,$18      ; {  DE += 24 - B;
 $6AEA SUB B         ;
 $6AEB ADD A,E       ;
 $6AEC LD E,A        ;
 $6AED JR NC,$6AF0   ;
 $6AEF INC D         ; }
*$6AF0 DEC C         ; {%> while (--C); // for each row
 $6AF1 JR NZ,$6AC9   ; }
 $6AF3 RET           ; return;
*$6AF4 LD A,(HL)     ; {A = *HL++ & 0x7F;
 $6AF5 AND $7F       ; }
 $6AF7 EX AF,AF'     ; {-
 $6AF8 INC HL        ; }
 $6AF9 LD A,(HL)     ; Adash = *HL;
 $6AFA EX AF,AF'     ; -
*$6AFB EX AF,AF'     ; do <%
 $6AFC AND A         ; {  if (Adash > 0) *DE = Adash;
 $6AFD JR Z,$6B00    ;
 $6AFF LD (DE),A     ; }
*$6B00 INC DE        ;   DE++;
 $6B01 DJNZ $6B12    ;   DJNZ $6B12
 $6B03 LD A,($6AE7)  ; {  LD Adash,($6AE7)  // Adash = width
 $6B06 LD B,A        ; }
 $6B07 LD A,$18      ; {  DE += 24 -    Adash; // stride
 $6B09 SUB B         ;
 $6B0A ADD A,E       ;
 $6B0B LD E,A        ;
 $6B0C JR NC,$6B0F   ;
 $6B0E INC D         ; }
*$6B0F LD A,(HL)     ;   Adash = *HL;
 $6B10 DEC C         ; {  if (--C == 0) return;
 $6B11 RET Z         ; }
*$6B12 EX AF,AF'     ;   -
 $6B13 DEC A         ; {%> while (--A);
 $6B14 JR NZ,$6AFB   ; }
 $6B16 INC HL        ; HL++;
 $6B17 JR $6AC9      ; goto expand;
*$6B19 LD A,$3C      ; A = 60; // opcode of 'INC A'
; Redundant: Self modify, but nothing else modifies it! Possible evidence that
; other encodings (e.g. 'DEC A') were attempted.
 $6B1B LD ($6B28),A  ; ($6B28) = A;
 $6B1E LD A,(HL)     ; {A = *HL++ & 0x0F;
 $6B1F AND $0F       ; }
 $6B21 EX AF,AF'     ; {-
 $6B22 INC HL        ; }
 $6B23 LD A,(HL)     ; Adash = *HL;
 $6B24 EX AF,AF'     ; -
*$6B25 EX AF,AF'     ; do <% -
 $6B26 LD (DE),A     ; {  *DE++ = Adash;
 $6B27 INC DE        ; }
 $6B28 INC A         ;   INC Adash // self modified
 $6B29 DJNZ $6B3B    ;   DJNZ $6B3B
 $6B2B PUSH AF       ;   PUSH AFdash
 $6B2C LD A,($6AE7)  ; {  LD Adash,($6AE7)  // Adash = width
 $6B2F LD B,A        ; }
 $6B30 LD A,$18      ; {  DE += 24 - Adash; // stride
 $6B32 SUB B         ;
 $6B33 ADD A,E       ;
 $6B34 LD E,A        ;
 $6B35 JR NC,$6B38   ;
 $6B37 INC D         ; }
*$6B38 POP AF        ; {  POP AFdash
 $6B39 DEC C         ; }
 $6B3A RET Z         ;   if (--C == 0) return;
*$6B3B EX AF,AF'     ; {  -
 $6B3C DEC A         ; }
 $6B3D JR NZ,$6B25   ; %> while (--A);
 $6B3F INC HL        ; HL++;
 $6B40 JR $6AC9      ; goto expand;

; plot_interior_tiles
;
; Used by the routines at #R$68F4, #R$7B36, #R$9E07, #R$A289, #R$A2E2, #R$A420,
; #R$A50B, #R$AB6B and #R$B3F6.
; .
; Expand all of the tile indices in the tiles buffer to full tiles in the
; screen buffer.
;
; O:A      Corrupted.
; O:BC     Corrupted.
; O:DE     Corrupted.
; O:HL     Corrupted.
; O:Adash  Corrupted.
; O:BCdash Corrupted.
; O:DEdash Corrupted.
; O:HLdash Corrupted.
c$6B42 LD HL,$F290   ; HL = $F290;  // screen buffer start address
 $6B45 LD DE,$F0F8   ; DE = $F0F8;  // visible tiles array
 $6B48 LD C,$10      ; C = 16;      // rows
*$6B4A LD B,$18      ; do <% B = 24; // columns
*$6B4C PUSH HL       ;   do <%
 $6B4D LD A,(DE)     ; {    tileptr = &interior_tiles[*DE];
 $6B4E EXX           ;
 $6B4F LD L,A        ;
 $6B50 LD H,$00      ;
 $6B52 ADD HL,HL     ;
 $6B53 ADD HL,HL     ;
 $6B54 ADD HL,HL     ;
 $6B55 LD DE,$9768   ;
 $6B58 ADD HL,DE     ; }
 $6B59 POP DE        ;     screenptr = HL;
 $6B5A LD BC,$0818   ;     iters = 8; stride = 24;
*$6B5D LD A,(HL)     ; {    do <% *screenptr = *tileptr++;
 $6B5E LD (DE),A     ; }
 $6B5F LD A,C        ; {      screenptr += stride;
 $6B60 ADD A,E       ;
 $6B61 JR NC,$6B64   ;
 $6B63 INC D         ;
*$6B64 LD E,A        ;
 $6B65 INC L         ; }
 $6B66 DJNZ $6B5D    ; {    %> while (--iters);
 $6B68 EXX           ; }
 $6B69 INC DE        ;     DE++;
 $6B6A INC HL        ;     HL++;
 $6B6B DJNZ $6B4C    ;   %> while (--B);
 $6B6D LD A,$A8      ; {  HL += 7 * 24;
 $6B6F ADD A,L       ;
 $6B70 JR NC,$6B73   ;
 $6B72 INC H         ;
*$6B73 LD L,A        ; }
 $6B74 DEC C         ; {%> while (--C);
 $6B75 JP NZ,$6B4A   ; }
 $6B78 RET           ; return;

; beds
;
; 6x pointers to bed. These are the beds of active prisoners.
; .
; Note that the top hut has prisoners permanently in bed.
w$6B79 DEFW $6C8A    ; &roomdef_3_hut2_right[29]
 $6B7B DEFW $6C8D    ; &roomdef_3_hut2_right[32]
 $6B7D DEFW $6C90    ; &roomdef_3_hut2_right[35]
 $6B7F DEFW $6CE6    ; &roomdef_5_hut3_right[29]
 $6B81 DEFW $6CE9    ; &roomdef_5_hut3_right[32]
 $6B83 DEFW $6CEC    ; &roomdef_5_hut3_right[35]

; roomdef_bounds
;
; Suspect these are room dimensions.
; .
; 10x 4-byte structures which are range checked by routine at #R$B29F.
b$6B85 DEFB $42,$1A,$46,$16
 $6B89 DEFB $3E,$16,$3A,$1A
 $6B8D DEFB $36,$1E,$42,$12
 $6B91 DEFB $3E,$1E,$3A,$22
 $6B95 DEFB $4A,$12,$3E,$1E
 $6B99 DEFB $38,$32,$64,$0A
 $6B9D DEFB $68,$06,$38,$32
 $6BA1 DEFB $38,$32,$64,$1A
 $6BA5 DEFB $68,$1C,$38,$32
 $6BA9 DEFB $38,$32,$58,$0A

; rooms_and_tunnels
;
; Rooms and tunnels.
; .
; Array of pointers to rooms (starting with room 1).
w$6BAD DEFW $6C15    ; &roomdef_1_hut1_right,
 $6BAF DEFW $6C47    ; &roomdef_2_hut2_left,
 $6BB1 DEFW $6C6D    ; &roomdef_3_hut2_right,
 $6BB3 DEFW $6C9F    ; &roomdef_4_hut3_left,
 $6BB5 DEFW $6CC9    ; &roomdef_5_hut3_right,
 $6BB7 DEFW $6CFB    ; &roomdef_8_corridor, // unused
 $6BB9 DEFW $6E32    ; &roomdef_7_corridor,
 $6BBB DEFW $6CFB    ; &roomdef_8_corridor,
 $6BBD DEFW $6D0F    ; &roomdef_9_crate,
 $6BBF DEFW $6D37    ; &roomdef_10_lockpick,
 $6BC1 DEFW $6D70    ; &roomdef_11_papers,
 $6BC3 DEFW $6D94    ; &roomdef_12_corridor,
 $6BC5 DEFW $6DA6    ; &roomdef_13_corridor,
 $6BC7 DEFW $6DBE    ; &roomdef_14_torch,
 $6BC9 DEFW $6DEA    ; &roomdef_15_uniform,
 $6BCB DEFW $6E20    ; &roomdef_16_corridor,
 $6BCD DEFW $6E32    ; &roomdef_7_corridor,
 $6BCF DEFW $6E43    ; &roomdef_18_radio,
 $6BD1 DEFW $6E76    ; &roomdef_19_food,
 $6BD3 DEFW $6EA0    ; &roomdef_20_redcross,
 $6BD5 DEFW $6E20    ; &roomdef_16_corridor,
 $6BD7 DEFW $6ECF    ; &roomdef_22_red_key,
 $6BD9 DEFW $6EF2    ; &roomdef_23_breakfast,
 $6BDB DEFW $6F20    ; &roomdef_24_solitary,
 $6BDD DEFW $6F32    ; &roomdef_25_breakfast,
 $6BDF DEFW $6F5B    ; &roomdef_28_hut1_left, // unused
 $6BE1 DEFW $6F5B    ; &roomdef_28_hut1_left, // unused
 $6BE3 DEFW $6F5B    ; &roomdef_28_hut1_left,
; Array of pointers to tunnels.
 $6BE5 DEFW $6F82    ; &roomdef_29_second_tunnel_start,
 $6BE7 DEFW $7024    ; &roomdef_30,
 $6BE9 DEFW $6F9E    ; &roomdef_31,
 $6BEB DEFW $6FD3    ; &roomdef_32,
 $6BED DEFW $6F82    ; &roomdef_29_second_tunnel_start,
 $6BEF DEFW $6FEC    ; &roomdef_34,
 $6BF1 DEFW $7008    ; &roomdef_35,
 $6BF3 DEFW $6FBA    ; &roomdef_36,
 $6BF5 DEFW $6FEC    ; &roomdef_34,
 $6BF7 DEFW $7008    ; &roomdef_35,
 $6BF9 DEFW $6FD3    ; &roomdef_32,
 $6BFB DEFW $7041    ; &roomdef_40,
 $6BFD DEFW $7024    ; &roomdef_30,
 $6BFF DEFW $6FD3    ; &roomdef_32,
 $6C01 DEFW $6F82    ; &roomdef_29_second_tunnel_start,
 $6C03 DEFW $705D    ; &roomdef_44,
 $6C05 DEFW $6FBA    ; &roomdef_36,
 $6C07 DEFW $6FBA    ; &roomdef_36,
 $6C09 DEFW $6FD3    ; &roomdef_32,
 $6C0B DEFW $6FEC    ; &roomdef_34,
 $6C0D DEFW $6FBA    ; &roomdef_36,
 $6C0F DEFW $7075    ; &roomdef_50_blocked_tunnel,
 $6C11 DEFW $6FD3    ; &roomdef_32,
 $6C13 DEFW $7041    ; &roomdef_40,

; room_defs
;
; roomdef_1_hut1_right
b$6C15 DEFB $00                         ; 0
 $6C16 DEFB $03                         ; 3 // count of boundaries
 $6C17 DEFB $36,$44,$17,$22             ; { 54, 68, 23, 34 }, // boundary
 $6C1B DEFB $36,$44,$27,$32             ; { 54, 68, 39, 50 }, // boundary
 $6C1F DEFB $36,$44,$37,$44             ; { 54, 68, 55, 68 }, // boundary
 $6C23 DEFB $04                         ; 4 // count of TBD
 $6C24 DEFB $00,$01,$03,$0A             ; [0, 1, 3, 10] // data TBD
 $6C28 DEFB $0A                         ; 10 // count of objects
 $6C29 DEFB $02,$01,$04                 ; { interiorobject_ROOM_OUTLINE_2,
                                        ; 1,  4 },
 $6C2C DEFB $08,$08,$00                 ; { interiorobject_WIDE_WINDOW,
                                        ; 8,  0 },
 $6C2F DEFB $08,$02,$03                 ; { interiorobject_WIDE_WINDOW,
                                        ; 2,  3 },
 $6C32 DEFB $17,$0A,$05                 ; { interiorobject_OCCUPIED_BED,
                                        ; 10,  5 },
 $6C35 DEFB $17,$06,$07                 ; { interiorobject_OCCUPIED_BED,
                                        ; 6,  7 },
 $6C38 DEFB $0F,$0F,$08                 ; { interiorobject_DOOR_FRAME_15,
                                        ; 15,  8 },
 $6C3B DEFB $18,$12,$05                 ; {
                                        ; interiorobject_WARDROBE_WITH_KNOCKERS,
                                        ; 18,  5 },
 $6C3E DEFB $18,$14,$06                 ; {
                                        ; interiorobject_WARDROBE_WITH_KNOCKERS,
                                        ; 20,  6 },
 $6C41 DEFB $09,$02,$09                 ; { interiorobject_EMPTY_BED,
                                        ; 2,  9 },
 $6C44 DEFB $10,$07,$0A                 ; { interiorobject_DOOR_FRAME_16,
                                        ; 7, 10 },
; roomdef_2_hut2_left
 $6C47 DEFB $01                         ; 1
 $6C48 DEFB $02                         ; 2 // count of boundaries
 $6C49 DEFB $30,$40,$2B,$38             ; { 48, 64, 43, 56 }, // boundary
 $6C4D DEFB $18,$26,$1A,$28             ; { 24, 38, 26, 40 }, // boundary
 $6C51 DEFB $02                         ; 2 // count of TBD
 $6C52 DEFB $0D,$08                     ; [13, 8] // data TBD
 $6C54 DEFB $08                         ; 8 // count of objects
 $6C55 DEFB $1B,$03,$06                 ; { interiorobject_ROOM_OUTLINE_27,
                                        ; 3,  6 },
 $6C58 DEFB $08,$06,$02                 ; { interiorobject_WIDE_WINDOW,
                                        ; 6,  2 },
 $6C5B DEFB $28,$10,$05                 ; { interiorobject_DOOR_FRAME_40,
                                        ; 16,  5 },
 $6C5E DEFB $1E,$04,$05                 ; { interiorobject_STOVE_PIPE,
                                        ; 4,  5 },
 $6C61 DEFB $17,$08,$07                 ; { interiorobject_OCCUPIED_BED,
                                        ; 8,  7 }, // player's bed
 $6C64 DEFB $10,$07,$09                 ; { interiorobject_DOOR_FRAME_16,
                                        ; 7,  9 },
 $6C67 DEFB $1D,$0B,$0C                 ; { interiorobject_TABLE_2,
                                        ; 11, 12 },
 $6C6A DEFB $01,$05,$09                 ; {
                                        ; interiorobject_SMALL_TUNNEL_ENTRANCE,
                                        ; 5,  9 },
; roomdef_3_hut2_right
 $6C6D DEFB $00                         ; 0
 $6C6E DEFB $03                         ; 3 // count of boundaries
 $6C6F DEFB $36,$44,$17,$22             ; { 54, 68, 23, 34 }, // boundary
 $6C73 DEFB $36,$44,$27,$32             ; { 54, 68, 39, 50 }, // boundary
 $6C77 DEFB $36,$44,$37,$44             ; { 54, 68, 55, 68 }, // boundary
 $6C7B DEFB $04                         ; 4 // count of TBD
 $6C7C DEFB $00,$01,$03,$0A             ; [0, 1, 3, 10] // data TBD
 $6C80 DEFB $0A                         ; 10 // count of objects
 $6C81 DEFB $02,$01,$04                 ; { interiorobject_ROOM_OUTLINE_2,
                                        ; 1,  4 },
 $6C84 DEFB $08,$08,$00                 ; { interiorobject_WIDE_WINDOW,
                                        ; 8,  0 },
 $6C87 DEFB $08,$02,$03                 ; { interiorobject_WIDE_WINDOW,
                                        ; 2,  3 },
 $6C8A DEFB $17,$0A,$05                 ; { interiorobject_OCCUPIED_BED,
                                        ; 10,  5 }, // bed_C
 $6C8D DEFB $17,$06,$07                 ; { interiorobject_OCCUPIED_BED,
                                        ; 6,  7 }, // bed_B
 $6C90 DEFB $17,$02,$09                 ; { interiorobject_OCCUPIED_BED,
                                        ; 2,  9 },
 $6C93 DEFB $0B,$10,$05                 ; { interiorobject_CHEST_OF_DRAWERS,
                                        ; 16,  5 },
 $6C96 DEFB $0F,$0F,$08                 ; { interiorobject_DOOR_FRAME_15,
                                        ; 15,  8 },
 $6C99 DEFB $0A,$12,$05                 ; { interiorobject_SHORT_WARDROBE,
                                        ; 18,  5 },
 $6C9C DEFB $10,$07,$0A                 ; { interiorobject_DOOR_FRAME_16,
                                        ; 7, 10 },
; roomdef_4_hut3_left
 $6C9F DEFB $01                         ; 1
 $6CA0 DEFB $02                         ; 2 // count of boundaries
 $6CA1 DEFB $18,$28,$18,$2A             ; { 24, 40, 24, 42 }, // boundary
 $6CA5 DEFB $30,$40,$2B,$38             ; { 48, 64, 43, 56 }, // boundary
 $6CA9 DEFB $03                         ; 3 // count of TBD
 $6CAA DEFB $12,$14,$08                 ; [18, 20, 8] // data TBD
 $6CAD DEFB $09                         ; 9 // count of objects
 $6CAE DEFB $1B,$03,$06                 ; { interiorobject_ROOM_OUTLINE_27,
                                        ; 3,  6 },
 $6CB1 DEFB $28,$10,$05                 ; { interiorobject_DOOR_FRAME_40,
                                        ; 16,  5 },
 $6CB4 DEFB $08,$06,$02                 ; { interiorobject_WIDE_WINDOW,
                                        ; 6,  2 },
 $6CB7 DEFB $1E,$04,$05                 ; { interiorobject_STOVE_PIPE,
                                        ; 4,  5 },
 $6CBA DEFB $09,$08,$07                 ; { interiorobject_EMPTY_BED,
                                        ; 8,  7 },
 $6CBD DEFB $10,$07,$09                 ; { interiorobject_DOOR_FRAME_16,
                                        ; 7,  9 },
 $6CC0 DEFB $16,$0B,$0B                 ; {
                                        ; interiorobject_CHAIR_POINTING_BOTTOM_RIGHT,11,
                                        ; 11 },
 $6CC3 DEFB $19,$0D,$0A                 ; {
                                        ; interiorobject_CHAIR_POINTING_BOTTOM_LEFT,
                                        ; 13, 10 },
 $6CC6 DEFB $1F,$0E,$0E                 ; { interiorobject_STUFF_31,
                                        ; 14, 14 },
; roomdef_5_hut3_right
 $6CC9 DEFB $00                         ; 0
 $6CCA DEFB $03                         ; 3 // count of boundaries
 $6CCB DEFB $36,$44,$17,$22             ; { 54, 68, 23, 34 }, // boundary
 $6CCF DEFB $36,$44,$27,$32             ; { 54, 68, 39, 50 }, // boundary
 $6CD3 DEFB $36,$44,$37,$44             ; { 54, 68, 55, 68 }, // boundary
 $6CD7 DEFB $04                         ; 4 // count of TBD
 $6CD8 DEFB $00,$01,$03,$0A             ; [0, 1, 3, 10] // data TBD
 $6CDC DEFB $0A                         ; 10 // count of objects
 $6CDD DEFB $02,$01,$04                 ; { interiorobject_ROOM_OUTLINE_2,
                                        ; 1,  4 },
 $6CE0 DEFB $08,$08,$00                 ; { interiorobject_WIDE_WINDOW,
                                        ; 8,  0 },
 $6CE3 DEFB $08,$02,$03                 ; { interiorobject_WIDE_WINDOW,
                                        ; 2,  3 },
 $6CE6 DEFB $17,$0A,$05                 ; { interiorobject_OCCUPIED_BED,
                                        ; 10,  5 }, // bed_D
 $6CE9 DEFB $17,$06,$07                 ; { interiorobject_OCCUPIED_BED,
                                        ; 6,  7 }, // bed_E
 $6CEC DEFB $17,$02,$09                 ; { interiorobject_OCCUPIED_BED,
                                        ; 2,  9 }, // bed_F
 $6CEF DEFB $0F,$0F,$08                 ; { interiorobject_DOOR_FRAME_15,
                                        ; 15,  8 },
 $6CF2 DEFB $0B,$10,$05                 ; { interiorobject_CHEST_OF_DRAWERS,
                                        ; 16,  5 },
 $6CF5 DEFB $0B,$14,$07                 ; { interiorobject_CHEST_OF_DRAWERS,
                                        ; 20,  7 },
 $6CF8 DEFB $10,$07,$0A                 ; { interiorobject_DOOR_FRAME_16,
                                        ; 7, 10 },
; roomdef_6_corridor
 $6CFB DEFB $02                         ; 2
 $6CFC DEFB $00                         ; 0 // count of boundaries
 $6CFD DEFB $01                         ; 1 // count of TBD
 $6CFE DEFB $09                         ; [9] // data TBD
 $6CFF DEFB $05                         ; 5 // count of objects
 $6D00 DEFB $2E,$03,$06                 ; { interiorobject_ROOM_OUTLINE_46,
                                        ; 3,  6 },
 $6D03 DEFB $26,$0A,$03                 ; { interiorobject_DOOR_FRAME_38,
                                        ; 10,  3 },
 $6D06 DEFB $26,$04,$06                 ; { interiorobject_DOOR_FRAME_38,
                                        ; 4,  6 },
 $6D09 DEFB $10,$05,$0A                 ; { interiorobject_DOOR_FRAME_16,
                                        ; 5, 10 },
 $6D0C DEFB $0A,$12,$06                 ; { interiorobject_SHORT_WARDROBE,
                                        ; 18,  6 },
; roomdef_9_crate
 $6D0F DEFB $01                         ; 1
 $6D10 DEFB $01                         ; 1 // count of boundaries
 $6D11 DEFB $3A,$40,$1C,$2A             ; { 58, 64, 28, 42 }, // boundary
 $6D15 DEFB $02                         ; 2 // count of TBD
 $6D16 DEFB $04,$15                     ; [4, 21] // data TBD
 $6D18 DEFB $0A                         ; 10 // count of objects
 $6D19 DEFB $1B,$03,$06                 ; { interiorobject_ROOM_OUTLINE_27,
                                        ; 3,  6 },
 $6D1C DEFB $23,$06,$03                 ; { interiorobject_SMALL_WINDOW,
                                        ; 6,  3 },
 $6D1F DEFB $21,$09,$04                 ; { interiorobject_SMALL_SHELF,
                                        ; 9,  4 },
 $6D22 DEFB $24,$0C,$06                 ; { interiorobject_DOOR_FRAME_36,
                                        ; 12,  6 },
 $6D25 DEFB $0F,$0D,$0A                 ; { interiorobject_DOOR_FRAME_15,
                                        ; 13, 10 },
 $6D28 DEFB $20,$10,$06                 ; { interiorobject_TALL_WARDROBE,
                                        ; 16,  6 },
 $6D2B DEFB $0A,$12,$08                 ; { interiorobject_SHORT_WARDROBE,
                                        ; 18,  8 },
 $6D2E DEFB $1A,$03,$06                 ; { interiorobject_CUPBOARD,
                                        ; 3,  6 },
 $6D31 DEFB $22,$06,$08                 ; { interiorobject_SMALL_CRATE,
                                        ; 6,  8 },
 $6D34 DEFB $22,$04,$09                 ; { interiorobject_SMALL_CRATE,
                                        ; 4,  9 },
; roomdef_10_lockpick
 $6D37 DEFB $04                         ; 4
 $6D38 DEFB $02                         ; 2 // count of boundaries
 $6D39 DEFB $45,$4B,$20,$36             ; { 69, 75, 32, 54 }, // boundary
 $6D3D DEFB $24,$2F,$30,$3C             ; { 36, 47, 48, 60 }, // boundary
 $6D41 DEFB $03                         ; 3 // count of TBD
 $6D42 DEFB $06,$0E,$16                 ; [6, 14, 22] // data TBD
 $6D45 DEFB $0E                         ; 14 // count of objects
 $6D46 DEFB $2F,$01,$04                 ; { interiorobject_ROOM_OUTLINE_47,
                                        ; 1,  4 },
 $6D49 DEFB $0F,$0F,$0A                 ; { interiorobject_DOOR_FRAME_15,
                                        ; 15, 10 },
 $6D4C DEFB $23,$04,$01                 ; { interiorobject_SMALL_WINDOW,
                                        ; 4,  1 },
 $6D4F DEFB $35,$02,$03                 ; { interiorobject_KEY_RACK,
                                        ; 2,  3 },
 $6D52 DEFB $35,$07,$02                 ; { interiorobject_KEY_RACK,
                                        ; 7,  2 },
 $6D55 DEFB $20,$0A,$02                 ; { interiorobject_TALL_WARDROBE,
                                        ; 10,  2 },
 $6D58 DEFB $2A,$0D,$03                 ; { interiorobject_CUPBOARD_42,
                                        ; 13,  3 },
 $6D5B DEFB $2A,$0F,$04                 ; { interiorobject_CUPBOARD_42,
                                        ; 15,  4 },
 $6D5E DEFB $2A,$11,$05                 ; { interiorobject_CUPBOARD_42,
                                        ; 17,  5 },
 $6D61 DEFB $1D,$0E,$08                 ; { interiorobject_TABLE_2,
                                        ; 14,  8 },
 $6D64 DEFB $0B,$12,$08                 ; { interiorobject_CHEST_OF_DRAWERS,
                                        ; 18,  8 },
 $6D67 DEFB $0B,$14,$09                 ; { interiorobject_CHEST_OF_DRAWERS,
                                        ; 20,  9 },
 $6D6A DEFB $22,$06,$05                 ; { interiorobject_SMALL_CRATE,
                                        ; 6,  5 },
 $6D6D DEFB $1D,$02,$06                 ; { interiorobject_TABLE_2,
                                        ; 2,  6 },
; roomdef_11_papers
 $6D70 DEFB $04                         ; 4
 $6D71 DEFB $01                         ; 1 // count of boundaries
 $6D72 DEFB $1B,$2C,$24,$30             ; { 27, 44, 36, 48 }, // boundary
 $6D76 DEFB $01                         ; 1 // count of TBD
 $6D77 DEFB $17                         ; [23] // data TBD
 $6D78 DEFB $09                         ; 9 // count of objects
 $6D79 DEFB $2F,$01,$04                 ; { interiorobject_ROOM_OUTLINE_47,
                                        ; 1,  4 },
 $6D7C DEFB $21,$06,$03                 ; { interiorobject_SMALL_SHELF,
                                        ; 6,  3 },
 $6D7F DEFB $20,$0C,$03                 ; { interiorobject_TALL_WARDROBE,
                                        ; 12,  3 },
 $6D82 DEFB $32,$0A,$03                 ; { interiorobject_DRAWERS_50,
                                        ; 10,  3 },
 $6D85 DEFB $0A,$0E,$05                 ; { interiorobject_SHORT_WARDROBE,
                                        ; 14,  5 },
 $6D88 DEFB $26,$02,$02                 ; { interiorobject_DOOR_FRAME_38,
                                        ; 2,  2 },
 $6D8B DEFB $32,$12,$07                 ; { interiorobject_DRAWERS_50,
                                        ; 18,  7 },
 $6D8E DEFB $32,$14,$08                 ; { interiorobject_DRAWERS_50,
                                        ; 20,  8 },
 $6D91 DEFB $33,$0C,$0A                 ; { interiorobject_DESK,
                                        ; 12, 10 },
; roomdef_12_corridor
 $6D94 DEFB $01                         ; 1
 $6D95 DEFB $00                         ; 0 // count of boundaries
 $6D96 DEFB $02                         ; 2 // count of TBD
 $6D97 DEFB $04,$07                     ; [4, 7] // data TBD
 $6D99 DEFB $04                         ; 4 // count of objects
 $6D9A DEFB $1B,$03,$06                 ; { interiorobject_ROOM_OUTLINE_27,
                                        ; 3,  6 },
 $6D9D DEFB $23,$06,$03                 ; { interiorobject_SMALL_WINDOW,
                                        ; 6,  3 },
 $6DA0 DEFB $10,$09,$0A                 ; { interiorobject_DOOR_FRAME_16,
                                        ; 9, 10 },
 $6DA3 DEFB $0F,$0D,$0A                 ; { interiorobject_DOOR_FRAME_15,
                                        ; 13, 10 },
; roomdef_13_corridor
 $6DA6 DEFB $01                         ; 1
 $6DA7 DEFB $00                         ; 0 // count of boundaries
 $6DA8 DEFB $02                         ; 2 // count of TBD
 $6DA9 DEFB $04,$08                     ; [4, 8] // data TBD
 $6DAB DEFB $06                         ; 6 // count of objects
 $6DAC DEFB $1B,$03,$06                 ; { interiorobject_ROOM_OUTLINE_27,
                                        ; 3,  6 },
 $6DAF DEFB $26,$06,$03                 ; { interiorobject_DOOR_FRAME_38,
                                        ; 6,  3 },
 $6DB2 DEFB $10,$07,$09                 ; { interiorobject_DOOR_FRAME_16,
                                        ; 7,  9 },
 $6DB5 DEFB $0F,$0D,$0A                 ; { interiorobject_DOOR_FRAME_15,
                                        ; 13, 10 },
 $6DB8 DEFB $32,$0C,$05                 ; { interiorobject_DRAWERS_50,
                                        ; 12,  5 },
 $6DBB DEFB $0B,$0E,$07                 ; { interiorobject_CHEST_OF_DRAWERS,
                                        ; 14,  7 },
; roomdef_14_torch
 $6DBE DEFB $00                         ; 0
 $6DBF DEFB $03                         ; 3 // count of boundaries
 $6DC0 DEFB $36,$44,$16,$20             ; { 54, 68, 22, 32 }, // boundary
 $6DC4 DEFB $3E,$44,$30,$3A             ; { 62, 68, 48, 58 }, // boundary
 $6DC8 DEFB $36,$44,$36,$44             ; { 54, 68, 54, 68 }, // boundary
 $6DCC DEFB $01                         ; 1 // count of TBD
 $6DCD DEFB $01                         ; [1] // data TBD
 $6DCE DEFB $09                         ; 9 // count of objects
 $6DCF DEFB $02,$01,$04                 ; { interiorobject_ROOM_OUTLINE_2,
                                        ; 1,  4 },
 $6DD2 DEFB $26,$04,$03                 ; { interiorobject_DOOR_FRAME_38,
                                        ; 4,  3 },
 $6DD5 DEFB $31,$08,$05                 ; { interiorobject_TINY_DRAWERS,
                                        ; 8,  5 },
 $6DD8 DEFB $09,$0A,$05                 ; { interiorobject_EMPTY_BED,
                                        ; 10,  5 },
 $6DDB DEFB $0B,$10,$05                 ; { interiorobject_CHEST_OF_DRAWERS,
                                        ; 16,  5 },
 $6DDE DEFB $0A,$12,$05                 ; { interiorobject_SHORT_WARDROBE,
                                        ; 18,  5 },
 $6DE1 DEFB $28,$14,$04                 ; { interiorobject_DOOR_FRAME_40,
                                        ; 20,  4 },
 $6DE4 DEFB $21,$02,$07                 ; { interiorobject_SMALL_SHELF,
                                        ; 2,  7 },
 $6DE7 DEFB $09,$02,$09                 ; { interiorobject_EMPTY_BED,
                                        ; 2,  9 },
; roomdef_15_uniform
 $6DEA DEFB $00                         ; 0
 $6DEB DEFB $04                         ; 4 // count of boundaries
 $6DEC DEFB $36,$44,$16,$20             ; { 54, 68, 22, 32 }, // boundary
 $6DF0 DEFB $36,$44,$36,$44             ; { 54, 68, 54, 68 }, // boundary
 $6DF4 DEFB $3E,$44,$28,$3A             ; { 62, 68, 40, 58 }, // boundary
 $6DF8 DEFB $1E,$28,$38,$43             ; { 30, 40, 56, 67 }, // boundary
 $6DFC DEFB $04                         ; 4 // count of TBD
 $6DFD DEFB $01,$05,$0A,$0F             ; [1, 5, 10, 15] // data TBD
 $6E01 DEFB $0A                         ; 10 // count of objects
 $6E02 DEFB $02,$01,$04                 ; { interiorobject_ROOM_OUTLINE_2,
                                        ; 1,  4 },
 $6E05 DEFB $0A,$10,$04                 ; { interiorobject_SHORT_WARDROBE,
                                        ; 16,  4 },
 $6E08 DEFB $09,$0A,$05                 ; { interiorobject_EMPTY_BED,
                                        ; 10,  5 },
 $6E0B DEFB $31,$08,$05                 ; { interiorobject_TINY_DRAWERS,
                                        ; 8,  5 },
 $6E0E DEFB $31,$06,$06                 ; { interiorobject_TINY_DRAWERS,
                                        ; 6,  6 },
 $6E11 DEFB $21,$02,$07                 ; { interiorobject_SMALL_SHELF,
                                        ; 2,  7 },
 $6E14 DEFB $09,$02,$09                 ; { interiorobject_EMPTY_BED,
                                        ; 2,  9 },
 $6E17 DEFB $10,$07,$0A                 ; { interiorobject_DOOR_FRAME_16,
                                        ; 7, 10 },
 $6E1A DEFB $0F,$0D,$09                 ; { interiorobject_DOOR_FRAME_15,
                                        ; 13,  9 },
 $6E1D DEFB $1D,$12,$08                 ; { interiorobject_TABLE_2,
                                        ; 18,  8 },
; roomdef_16_corridor
 $6E20 DEFB $01                         ; 1
 $6E21 DEFB $00                         ; 0 // count of boundaries
 $6E22 DEFB $02                         ; 2 // count of TBD
 $6E23 DEFB $04,$07                     ; [4, 7] // data TBD
 $6E25 DEFB $04                         ; 4 // count of objects
 $6E26 DEFB $1B,$03,$06                 ; { interiorobject_ROOM_OUTLINE_27,
                                        ; 3,  6 },
 $6E29 DEFB $26,$04,$04                 ; { interiorobject_DOOR_FRAME_38,
                                        ; 4,  4 },
 $6E2C DEFB $10,$09,$0A                 ; { interiorobject_DOOR_FRAME_16,
                                        ; 9, 10 },
 $6E2F DEFB $0F,$0D,$0A                 ; { interiorobject_DOOR_FRAME_15,
                                        ; 13, 10 },
; roomdef_7_corridor
 $6E32 DEFB $01                         ; 1
 $6E33 DEFB $00                         ; 0 // count of boundaries
 $6E34 DEFB $01                         ; 1 // count of TBD
 $6E35 DEFB $04                         ; [4] // data TBD
 $6E36 DEFB $04                         ; 4 // count of objects
 $6E37 DEFB $1B,$03,$06                 ; { interiorobject_ROOM_OUTLINE_27,
                                        ; 3,  6 },
 $6E3A DEFB $26,$04,$04                 ; { interiorobject_DOOR_FRAME_38,
                                        ; 4,  4 },
 $6E3D DEFB $0F,$0D,$0A                 ; { interiorobject_DOOR_FRAME_15,
                                        ; 13, 10 },
 $6E40 DEFB $20,$0C,$04                 ; { interiorobject_TALL_WARDROBE,
                                        ; 12,  4 },
; roomdef_18_radio
 $6E43 DEFB $04                         ; 4
 $6E44 DEFB $03                         ; 3 // count of boundaries
 $6E45 DEFB $26,$38,$30,$3C             ; { 38, 56, 48, 60 }, // boundary
 $6E49 DEFB $26,$2E,$27,$3C             ; { 38, 46, 39, 60 }, // boundary
 $6E4D DEFB $16,$20,$30,$3C             ; { 22, 32, 48, 60 }, // boundary
 $6E51 DEFB $05                         ; 5 // count of TBD
 $6E52 DEFB $0B,$11,$10,$18,$19         ; [11, 17, 16, 24, 25] // data TBD
 $6E57 DEFB $0A                         ; 10 // count of objects
 $6E58 DEFB $2F,$01,$04                 ; { interiorobject_ROOM_OUTLINE_47,
                                        ; 1,  4 },
 $6E5B DEFB $1A,$01,$04                 ; { interiorobject_CUPBOARD,
                                        ; 1,  4 },
 $6E5E DEFB $23,$04,$01                 ; { interiorobject_SMALL_WINDOW,
                                        ; 4,  1 },
 $6E61 DEFB $21,$07,$02                 ; { interiorobject_SMALL_SHELF,
                                        ; 7,  2 },
 $6E64 DEFB $28,$0A,$01                 ; { interiorobject_DOOR_FRAME_40,
                                        ; 10,  1 },
 $6E67 DEFB $1D,$0C,$07                 ; { interiorobject_TABLE_2,
                                        ; 12,  7 },
 $6E6A DEFB $2D,$0C,$09                 ; { interiorobject_MESS_BENCH_SHORT,
                                        ; 12,  9 },
 $6E6D DEFB $1D,$12,$0A                 ; { interiorobject_TABLE_2,
                                        ; 18, 10 },
 $6E70 DEFB $30,$10,$0C                 ; { interiorobject_TINY_TABLE,
                                        ; 16, 12 },
 $6E73 DEFB $10,$05,$07                 ; { interiorobject_DOOR_FRAME_16,
                                        ; 5,  7 },
; roomdef_19_food
 $6E76 DEFB $01                         ; 1
 $6E77 DEFB $01                         ; 1 // count of boundaries
 $6E78 DEFB $34,$40,$2F,$38             ; { 52, 64, 47, 56 }, // boundary
 $6E7C DEFB $01                         ; 1 // count of TBD
 $6E7D DEFB $07                         ; [7] // data TBD
 $6E7E DEFB $0B                         ; 11 // count of objects
 $6E7F DEFB $1B,$03,$06                 ; { interiorobject_ROOM_OUTLINE_27,
                                        ; 3,  6 },
 $6E82 DEFB $23,$06,$03                 ; { interiorobject_SMALL_WINDOW,
                                        ; 6,  3 },
 $6E85 DEFB $1A,$09,$03                 ; { interiorobject_CUPBOARD,
                                        ; 9,  3 },
 $6E88 DEFB $2A,$0C,$03                 ; { interiorobject_CUPBOARD_42,
                                        ; 12,  3 },
 $6E8B DEFB $2A,$0E,$04                 ; { interiorobject_CUPBOARD_42,
                                        ; 14,  4 },
 $6E8E DEFB $1D,$09,$06                 ; { interiorobject_TABLE_2,
                                        ; 9,  6 },
 $6E91 DEFB $21,$03,$05                 ; { interiorobject_SMALL_SHELF,
                                        ; 3,  5 },
 $6E94 DEFB $34,$03,$07                 ; { interiorobject_SINK,
                                        ; 3,  7 },
 $6E97 DEFB $0B,$0E,$07                 ; { interiorobject_CHEST_OF_DRAWERS,
                                        ; 14,  7 },
 $6E9A DEFB $28,$10,$05                 ; { interiorobject_DOOR_FRAME_40,
                                        ; 16,  5 },
 $6E9D DEFB $10,$09,$0A                 ; { interiorobject_DOOR_FRAME_16,
                                        ; 9, 10 },
; roomdef_20_redcross
 $6EA0 DEFB $01                         ; 1
 $6EA1 DEFB $02                         ; 2 // count of boundaries
 $6EA2 DEFB $3A,$40,$1A,$2A             ; { 58, 64, 26, 42 }, // boundary
 $6EA6 DEFB $32,$40,$2E,$36             ; { 50, 64, 46, 54 }, // boundary
 $6EAA DEFB $02                         ; 2 // count of TBD
 $6EAB DEFB $15,$04                     ; [21, 4] // data TBD
 $6EAD DEFB $0B                         ; 11 // count of objects
 $6EAE DEFB $1B,$03,$06                 ; { interiorobject_ROOM_OUTLINE_27,
                                        ; 3,  6 },
 $6EB1 DEFB $0F,$0D,$0A                 ; { interiorobject_DOOR_FRAME_15,
                                        ; 13, 10 },
 $6EB4 DEFB $21,$09,$04                 ; { interiorobject_SMALL_SHELF,
                                        ; 9,  4 },
 $6EB7 DEFB $1A,$03,$06                 ; { interiorobject_CUPBOARD,
                                        ; 3,  6 },
 $6EBA DEFB $22,$06,$08                 ; { interiorobject_SMALL_CRATE,
                                        ; 6,  8 },
 $6EBD DEFB $22,$04,$09                 ; { interiorobject_SMALL_CRATE,
                                        ; 4,  9 },
 $6EC0 DEFB $1D,$09,$06                 ; { interiorobject_TABLE_2,
                                        ; 9,  6 },
 $6EC3 DEFB $20,$0E,$05                 ; { interiorobject_TALL_WARDROBE,
                                        ; 14,  5 },
 $6EC6 DEFB $20,$10,$06                 ; { interiorobject_TALL_WARDROBE,
                                        ; 16,  6 },
 $6EC9 DEFB $18,$12,$08                 ; {
                                        ; interiorobject_WARDROBE_WITH_KNOCKERS,
                                        ; 18,  8 },
 $6ECC DEFB $30,$0B,$08                 ; { interiorobject_TINY_TABLE,
                                        ; 11,  8 },
; roomdef_22_red_key
 $6ECF DEFB $03                         ; 3
 $6ED0 DEFB $02                         ; 2 // count of boundaries
 $6ED1 DEFB $36,$40,$2E,$38             ; { 54, 64, 46, 56 }, // boundary
 $6ED5 DEFB $3A,$40,$24,$2C             ; { 58, 64, 36, 44 }, // boundary
 $6ED9 DEFB $02                         ; 2 // count of TBD
 $6EDA DEFB $0C,$15                     ; [12, 21] // data TBD
 $6EDC DEFB $07                         ; 7 // count of objects
 $6EDD DEFB $29,$05,$06                 ; { interiorobject_ROOM_OUTLINE_41,
                                        ; 5,  6 },
 $6EE0 DEFB $25,$04,$04                 ; { interiorobject_NOTICEBOARD,
                                        ; 4,  4 },
 $6EE3 DEFB $21,$09,$04                 ; { interiorobject_SMALL_SHELF,
                                        ; 9,  4 },
 $6EE6 DEFB $22,$06,$08                 ; { interiorobject_SMALL_CRATE,
                                        ; 6,  8 },
 $6EE9 DEFB $10,$09,$08                 ; { interiorobject_DOOR_FRAME_16,
                                        ; 9,  8 },
 $6EEC DEFB $1D,$09,$06                 ; { interiorobject_TABLE_2,
                                        ; 9,  6 },
 $6EEF DEFB $28,$0E,$04                 ; { interiorobject_DOOR_FRAME_40,
                                        ; 14,  4 },
; roomdef_23_breakfast
 $6EF2 DEFB $00                         ; 0
 $6EF3 DEFB $01                         ; 1 // count of boundaries
 $6EF4 DEFB $36,$44,$22,$44             ; { 54, 68, 34, 68 }, // boundary
 $6EF8 DEFB $02                         ; 2 // count of TBD
 $6EF9 DEFB $0A,$03                     ; [10, 3] // data TBD
 $6EFB DEFB $0C                         ; 12 // count of objects
 $6EFC DEFB $02,$01,$04                 ; { interiorobject_ROOM_OUTLINE_2,
                                        ; 1,  4 },
 $6EFF DEFB $23,$08,$00                 ; { interiorobject_SMALL_WINDOW,
                                        ; 8,  0 },
 $6F02 DEFB $23,$02,$03                 ; { interiorobject_SMALL_WINDOW,
                                        ; 2,  3 },
 $6F05 DEFB $10,$07,$0A                 ; { interiorobject_DOOR_FRAME_16,
                                        ; 7, 10 },
 $6F08 DEFB $2C,$05,$04                 ; { interiorobject_MESS_TABLE,
                                        ; 5,  4 },
 $6F0B DEFB $2A,$12,$04                 ; { interiorobject_CUPBOARD_42,
                                        ; 18,  4 },
 $6F0E DEFB $28,$14,$04                 ; { interiorobject_DOOR_FRAME_40,
                                        ; 20,  4 },
 $6F11 DEFB $0F,$0F,$08                 ; { interiorobject_DOOR_FRAME_15,
                                        ; 15,  8 },
 $6F14 DEFB $2B,$07,$06                 ; { interiorobject_MESS_BENCH,
                                        ; 7,  6 },
 $6F17 DEFB $0D,$0C,$05                 ; { interiorobject_EMPTY_BENCH,
                                        ; 12,  5 }, // bench_A
 $6F1A DEFB $0D,$0A,$06                 ; { interiorobject_EMPTY_BENCH,
                                        ; 10,  6 },
 $6F1D DEFB $0D,$08,$07                 ; { interiorobject_EMPTY_BENCH,
                                        ; 8,  7 },
; roomdef_24_solitary
 $6F20 DEFB $03                         ; 3
 $6F21 DEFB $01                         ; 1 // count of boundaries
 $6F22 DEFB $30,$36,$26,$2E             ; { 48, 54, 38, 46 }, // boundary
 $6F26 DEFB $01                         ; 1 // count of TBD
 $6F27 DEFB $1A                         ; [26] // data TBD
 $6F28 DEFB $03                         ; 3 // count of objects
 $6F29 DEFB $29,$05,$06                 ; { interiorobject_ROOM_OUTLINE_41,
                                        ; 5,  6 },
 $6F2C DEFB $28,$0E,$04                 ; { interiorobject_DOOR_FRAME_40,
                                        ; 14,  4 },
 $6F2F DEFB $30,$0A,$09                 ; { interiorobject_TINY_TABLE,
                                        ; 10,  9 },
; roomdef_25_breakfast
 $6F32 DEFB $00                         ; 0
 $6F33 DEFB $01                         ; 1 // count of boundaries
 $6F34 DEFB $36,$44,$22,$44             ; { 54, 68, 34, 68 }, // boundary
 $6F38 DEFB $00                         ; 0 // count of TBD
 $6F39 DEFB $0B                         ; 11 // count of objects
 $6F3A DEFB $02,$01,$04                 ; { interiorobject_ROOM_OUTLINE_2,
                                        ; 1,  4 },
 $6F3D DEFB $23,$08,$00                 ; { interiorobject_SMALL_WINDOW,
                                        ; 8,  0 },
 $6F40 DEFB $1A,$05,$03                 ; { interiorobject_CUPBOARD,
                                        ; 5,  3 },
 $6F43 DEFB $23,$02,$03                 ; { interiorobject_SMALL_WINDOW,
                                        ; 2,  3 },
 $6F46 DEFB $28,$12,$03                 ; { interiorobject_DOOR_FRAME_40,
                                        ; 18,  3 },
 $6F49 DEFB $2C,$05,$04                 ; { interiorobject_MESS_TABLE,
                                        ; 5,  4 },
 $6F4C DEFB $2B,$07,$06                 ; { interiorobject_MESS_BENCH,
                                        ; 7,  6 },
 $6F4F DEFB $0D,$0C,$05                 ; { interiorobject_EMPTY_BENCH,
                                        ; 12,  5 }, // bench_D
 $6F52 DEFB $0D,$0A,$06                 ; { interiorobject_EMPTY_BENCH,
                                        ; 10,  6 },
 $6F55 DEFB $0D,$08,$07                 ; { interiorobject_EMPTY_BENCH,
                                        ; 8,  7 },
 $6F58 DEFB $0D,$0E,$04                 ; { interiorobject_EMPTY_BENCH,
                                        ; 14,  4 },
; roomdef_28_hut1_left
 $6F5B DEFB $01                         ; 1
 $6F5C DEFB $02                         ; 2 // count of boundaries
 $6F5D DEFB $1C,$28,$1C,$34             ; { 28, 40, 28, 52 }, // boundary
 $6F61 DEFB $30,$3F,$2C,$38             ; { 48, 63, 44, 56 }, // boundary
 $6F65 DEFB $03                         ; 3 // count of TBD
 $6F66 DEFB $08,$0D,$13                 ; [8, 13, 19] // data TBD
 $6F69 DEFB $08                         ; 8 // count of objects
 $6F6A DEFB $1B,$03,$06                 ; { interiorobject_ROOM_OUTLINE_27,
                                        ; 3,  6 },
 $6F6D DEFB $08,$06,$02                 ; { interiorobject_WIDE_WINDOW,
                                        ; 6,  2 },
 $6F70 DEFB $28,$0E,$04                 ; { interiorobject_DOOR_FRAME_40,
                                        ; 14,  4 },
 $6F73 DEFB $1A,$03,$06                 ; { interiorobject_CUPBOARD,
                                        ; 3,  6 },
 $6F76 DEFB $17,$08,$07                 ; { interiorobject_OCCUPIED_BED,
                                        ; 8,  7 },
 $6F79 DEFB $10,$07,$09                 ; { interiorobject_DOOR_FRAME_16,
                                        ; 7,  9 },
 $6F7C DEFB $19,$0F,$0A                 ; {
                                        ; interiorobject_CHAIR_POINTING_BOTTOM_LEFT,
                                        ; 15, 10 },
 $6F7F DEFB $1D,$0B,$0C                 ; { interiorobject_TABLE_2,
                                        ; 11, 12 },
; roomdef_29_second_tunnel_start
 $6F82 DEFB $05                         ; 5
 $6F83 DEFB $00                         ; 0 // count of boundaries
 $6F84 DEFB $06                         ; 6 // count of TBD
 $6F85 DEFB $1E,$1F,$20,$21,$22,$23     ; [30, 31, 32, 33, 34, 35] // data TBD
 $6F8B DEFB $06                         ; 6 // count of objects
 $6F8C DEFB $00,$14,$00                 ; { interiorobject_TUNNEL_0,
                                        ; 20,  0 },
 $6F8F DEFB $00,$10,$02                 ; { interiorobject_TUNNEL_0,
                                        ; 16,  2 },
 $6F92 DEFB $00,$0C,$04                 ; { interiorobject_TUNNEL_0,
                                        ; 12,  4 },
 $6F95 DEFB $00,$08,$06                 ; { interiorobject_TUNNEL_0,
                                        ; 8,  6 },
 $6F98 DEFB $00,$04,$08                 ; { interiorobject_TUNNEL_0,
                                        ; 4,  8 },
 $6F9B DEFB $00,$00,$0A                 ; { interiorobject_TUNNEL_0,
                                        ; 0, 10 },
; roomdef_31
 $6F9E DEFB $06                         ; 6
 $6F9F DEFB $00                         ; 0 // count of boundaries
 $6FA0 DEFB $06                         ; 6 // count of TBD
 $6FA1 DEFB $24,$25,$26,$27,$28,$29     ; [36, 37, 38, 39, 40, 41] // data TBD
 $6FA7 DEFB $06                         ; 6 // count of objects
 $6FA8 DEFB $03,$00,$00                 ; { interiorobject_TUNNEL_3,
                                        ; 0,  0 },
 $6FAB DEFB $03,$04,$02                 ; { interiorobject_TUNNEL_3,
                                        ; 4,  2 },
 $6FAE DEFB $03,$08,$04                 ; { interiorobject_TUNNEL_3,
                                        ; 8,  4 },
 $6FB1 DEFB $03,$0C,$06                 ; { interiorobject_TUNNEL_3,
                                        ; 12,  6 },
 $6FB4 DEFB $03,$10,$08                 ; { interiorobject_TUNNEL_3,
                                        ; 16,  8 },
 $6FB7 DEFB $03,$14,$0A                 ; { interiorobject_TUNNEL_3,
                                        ; 20, 10 },
; roomdef_36
 $6FBA DEFB $07                         ; 7
 $6FBB DEFB $00                         ; 0 // count of boundaries
 $6FBC DEFB $06                         ; 6 // count of TBD
 $6FBD DEFB $1F,$20,$21,$22,$23,$2D     ; [31, 32, 33, 34, 35, 45] // data TBD
 $6FC3 DEFB $05                         ; 5 // count of objects
 $6FC4 DEFB $00,$14,$00                 ; { interiorobject_TUNNEL_0,
                                        ; 20,  0 },
 $6FC7 DEFB $00,$10,$02                 ; { interiorobject_TUNNEL_0,
                                        ; 16,  2 },
 $6FCA DEFB $00,$0C,$04                 ; { interiorobject_TUNNEL_0,
                                        ; 12,  4 },
 $6FCD DEFB $00,$08,$06                 ; { interiorobject_TUNNEL_0,
                                        ; 8,  6 },
 $6FD0 DEFB $0E,$04,$08                 ; { interiorobject_TUNNEL_14,
                                        ; 4,  8 },
; roomdef_32
 $6FD3 DEFB $08                         ; 8
 $6FD4 DEFB $00                         ; 0 // count of boundaries
 $6FD5 DEFB $06                         ; 6 // count of TBD
 $6FD6 DEFB $24,$25,$26,$27,$28,$2A     ; [36, 37, 38, 39, 40, 42] // data TBD
 $6FDC DEFB $05                         ; 5 // count of objects
 $6FDD DEFB $03,$00,$00                 ; { interiorobject_TUNNEL_3,
                                        ; 0,  0 },
 $6FE0 DEFB $03,$04,$02                 ; { interiorobject_TUNNEL_3,
                                        ; 4,  2 },
 $6FE3 DEFB $03,$08,$04                 ; { interiorobject_TUNNEL_3,
                                        ; 8,  4 },
 $6FE6 DEFB $03,$0C,$06                 ; { interiorobject_TUNNEL_3,
                                        ; 12,  6 },
 $6FE9 DEFB $11,$10,$08                 ; { interiorobject_TUNNEL_17,
                                        ; 16,  8 },
; roomdef_34
 $6FEC DEFB $06                         ; 6
 $6FED DEFB $00                         ; 0 // count of boundaries
 $6FEE DEFB $06                         ; 6 // count of TBD
 $6FEF DEFB $24,$25,$26,$27,$28,$2E     ; [36, 37, 38, 39, 40, 46] // data TBD
 $6FF5 DEFB $06                         ; 6 // count of objects
 $6FF6 DEFB $03,$00,$00                 ; { interiorobject_TUNNEL_3,
                                        ; 0,  0 },
 $6FF9 DEFB $03,$04,$02                 ; { interiorobject_TUNNEL_3,
                                        ; 4,  2 },
 $6FFC DEFB $03,$08,$04                 ; { interiorobject_TUNNEL_3,
                                        ; 8,  4 },
 $6FFF DEFB $03,$0C,$06                 ; { interiorobject_TUNNEL_3,
                                        ; 12,  6 },
 $7002 DEFB $03,$10,$08                 ; { interiorobject_TUNNEL_3,
                                        ; 16,  8 },
 $7005 DEFB $12,$14,$0A                 ; { interiorobject_TUNNEL_18,
                                        ; 20, 10 },
; roomdef_35
 $7008 DEFB $06                         ; 6
 $7009 DEFB $00                         ; 0 // count of boundaries
 $700A DEFB $06                         ; 6 // count of TBD
 $700B DEFB $24,$25,$26,$27,$28,$29     ; [36, 37, 38, 39, 40, 41] // data TBD
 $7011 DEFB $06                         ; 6 // count of objects
 $7012 DEFB $03,$00,$00                 ; { interiorobject_TUNNEL_3,
                                        ; 0,  0 },
 $7015 DEFB $03,$04,$02                 ; { interiorobject_TUNNEL_3,
                                        ; 4,  2 },
 $7018 DEFB $04,$08,$04                 ; { interiorobject_TUNNEL_JOIN_4,
                                        ; 8,  4 },
 $701B DEFB $03,$0C,$06                 ; { interiorobject_TUNNEL_3,
                                        ; 12,  6 },
 $701E DEFB $03,$10,$08                 ; { interiorobject_TUNNEL_3,
                                        ; 16,  8 },
 $7021 DEFB $03,$14,$0A                 ; { interiorobject_TUNNEL_3,
                                        ; 20, 10 },
; roomdef_30
 $7024 DEFB $05                         ; 5
 $7025 DEFB $00                         ; 0 // count of boundaries
 $7026 DEFB $07                         ; 7 // count of TBD
 $7027 DEFB $1E,$1F,$20,$21,$22,$23,$2C ; [30, 31, 32, 33, 34, 35, 44] // data
                                        ; TBD
 $702E DEFB $06                         ; 6 // count of objects
 $702F DEFB $00,$14,$00                 ; { interiorobject_TUNNEL_0,
                                        ; 20,  0 },
 $7032 DEFB $00,$10,$02                 ; { interiorobject_TUNNEL_0,
                                        ; 16,  2 },
 $7035 DEFB $00,$0C,$04                 ; { interiorobject_TUNNEL_0,
                                        ; 12,  4 },
 $7038 DEFB $06,$08,$06                 ; { interiorobject_TUNNEL_CORNER_6,
                                        ; 8,  6 },
 $703B DEFB $00,$04,$08                 ; { interiorobject_TUNNEL_0,
                                        ; 4,  8 },
 $703E DEFB $00,$00,$0A                 ; { interiorobject_TUNNEL_0,
                                        ; 0, 10 },
; roomdef_40
 $7041 DEFB $09                         ; 9
 $7042 DEFB $00                         ; 0 // count of boundaries
 $7043 DEFB $06                         ; 6 // count of TBD
 $7044 DEFB $1E,$1F,$20,$21,$22,$2B     ; [30, 31, 32, 33, 34, 43] // data TBD
 $704A DEFB $06                         ; 6 // count of objects
 $704B DEFB $07,$14,$00                 ; { interiorobject_TUNNEL_7,
                                        ; 20,  0 },
 $704E DEFB $00,$10,$02                 ; { interiorobject_TUNNEL_0,
                                        ; 16,  2 },
 $7051 DEFB $00,$0C,$04                 ; { interiorobject_TUNNEL_0,
                                        ; 12,  4 },
 $7054 DEFB $00,$08,$06                 ; { interiorobject_TUNNEL_0,
                                        ; 8,  6 },
 $7057 DEFB $00,$04,$08                 ; { interiorobject_TUNNEL_0,
                                        ; 4,  8 },
 $705A DEFB $00,$00,$0A                 ; { interiorobject_TUNNEL_0,
                                        ; 0, 10 },
; roomdef_44
 $705D DEFB $08                         ; 8
 $705E DEFB $00                         ; 0 // count of boundaries
 $705F DEFB $05                         ; 5 // count of TBD
 $7060 DEFB $24,$25,$26,$27,$28         ; [36, 37, 38, 39, 40] // data TBD
 $7065 DEFB $05                         ; 5 // count of objects
 $7066 DEFB $03,$00,$00                 ; { interiorobject_TUNNEL_3,
                                        ; 0,  0 },
 $7069 DEFB $03,$04,$02                 ; { interiorobject_TUNNEL_3,
                                        ; 4,  2 },
 $706C DEFB $03,$08,$04                 ; { interiorobject_TUNNEL_3,
                                        ; 8,  4 },
 $706F DEFB $03,$0C,$06                 ; { interiorobject_TUNNEL_3,
                                        ; 12,  6 },
 $7072 DEFB $0C,$10,$08                 ; { interiorobject_TUNNEL_12,
                                        ; 16,  8 },
; roomdef_50_blocked_tunnel
 $7075 DEFB $05                         ; 5
 $7076 DEFB $01                         ; 1 // count of boundaries
 $7077 DEFB $34,$3A,$20,$36             ; { 52, 58, 32, 54 }, // boundary
 $707B DEFB $06                         ; 6 // count of TBD
 $707C DEFB $1E,$1F,$20,$21,$22,$2B     ; [30, 31, 32, 33, 34, 43] // data TBD
 $7082 DEFB $06                         ; 6 // count of objects
 $7083 DEFB $07,$14,$00                 ; { interiorobject_TUNNEL_7,
                                        ; 20,  0 },
 $7086 DEFB $00,$10,$02                 ; { interiorobject_TUNNEL_0,
                                        ; 16,  2 },
 $7089 DEFB $00,$0C,$04                 ; { interiorobject_TUNNEL_0,
                                        ; 12,  4 },
 $708C DEFB $14,$08,$06                 ; { interiorobject_COLLAPSED_TUNNEL,
                                        ; 8,  6 }, // collapsed_tunnel_obj
 $708F DEFB $00,$04,$08                 ; { interiorobject_TUNNEL_0,
                                        ; 4,  8 },
 $7092 DEFB $00,$00,$0A                 ; { interiorobject_TUNNEL_0,
                                        ; 0, 10 },

; interior_object_defs
b$7095 DEFW $7101                           ; {Array of pointer to interior
 $7097 DEFW $711B                           ; object definitions, 54 entries
 $7099 DEFW $721A                           ; long (== number of interior
 $709B DEFW $7121                           ; rooms).
 $709D DEFW $713B
 $709F DEFW $7155
 $70A1 DEFW $715A
 $70A3 DEFW $7174
 $70A5 DEFW $728E
 $70A7 DEFW $72AE
 $70A9 DEFW $72C1
 $70AB DEFW $72CC
 $70AD DEFW $718E
 $70AF DEFW $71A6
 $70B1 DEFW $71AB
 $70B3 DEFW $72D1
 $70B5 DEFW $72EB
 $70B7 DEFW $71C4
 $70B9 DEFW $71DE
 $70BB DEFW $71F8
 $70BD DEFW $7200
 $70BF DEFW $721A
 $70C1 DEFW $7305
 $70C3 DEFW $730F
 $70C5 DEFW $7325
 $70C7 DEFW $7333
 $70C9 DEFW $733C
 $70CB DEFW $75B0
 $70CD DEFW $7342
 $70CF DEFW $7342
 $70D1 DEFW $734B
 $70D3 DEFW $7359
 $70D5 DEFW $735C
 $70D7 DEFW $736A
 $70D9 DEFW $736F
 $70DB DEFW $7374
 $70DD DEFW $7385
 $70DF DEFW $7393
 $70E1 DEFW $73A5
 $70E3 DEFW $73BF
 $70E5 DEFW $73BF
 $70E7 DEFW $73D9
 $70E9 DEFW $7425
 $70EB DEFW $742D
 $70ED DEFW $7452
 $70EF DEFW $7482
 $70F1 DEFW $7493
 $70F3 DEFW $74F5
 $70F5 DEFW $7570
 $70F7 DEFW $7576
 $70F9 DEFW $757E
 $70FB DEFW $7588
 $70FD DEFW $75A2
 $70FF DEFW $75AA                           ; }
 $7101 DEFB $04,$06,$00,$00,$00,$02,$03,$02 ; {Interior object tile refs 0
 $7109 DEFB $04,$05,$08,$0F,$09,$0A,$06,$07
 $7111 DEFB $0E,$0C,$0E,$0B,$0D,$00,$0D,$00
 $7119 DEFB $00,$00                         ; }
 $711B DEFB $02,$02,$B6,$00,$B7,$B5         ; Interior object tile refs 1
 $7121 DEFB $04,$06,$02,$00,$00,$00,$11,$12 ; {Interior object tile refs 3
 $7129 DEFB $02,$00,$15,$16,$17,$08,$18,$0E
 $7131 DEFB $07,$19,$00,$13,$1A,$0E,$00,$00
 $7139 DEFB $00,$13                         ; }
 $713B DEFB $04,$06,$02,$00,$00,$00,$11,$12 ; {Interior object tile refs 4
 $7143 DEFB $04,$05,$15,$16,$09,$0A,$18,$0E
 $714B DEFB $07,$0C,$00,$13,$1A,$0E,$00,$00
 $7153 DEFB $00,$13                         ; }
 $7155 DEFB $02,$03,$FF,$46,$B8             ; Interior object tile refs 5
 $715A DEFB $04,$06,$00,$00,$03,$02,$00,$02 ; {Interior object tile refs 6
 $7162 DEFB $04,$05,$08,$0F,$09,$0A,$11,$12
 $716A DEFB $0E,$0C,$15,$16,$0D,$00,$18,$0E
 $7172 DEFB $00,$00                         ; }
 $7174 DEFB $04,$06,$00,$00,$02,$17,$00,$08 ; {Interior object tile refs 7
 $717C DEFB $0F,$02,$08,$0F,$18,$08,$11,$12
 $7184 DEFB $07,$16,$15,$16,$0D,$00,$18,$0E
 $718C DEFB $00,$00                         ; }
 $718E DEFB $04,$06,$02,$00,$00,$00,$11,$12 ; {Interior object tile refs 12
 $7196 DEFB $04,$05,$15,$16,$09,$0A,$18,$0E
 $719E DEFB $07,$0C,$00,$13,$0D,$FF,$85,$00 ; }
 $71A6 DEFB $02,$03,$FF,$86,$00             ; Interior object tile refs 13
 $71AB DEFB $04,$06,$00,$00,$03,$02,$00,$02 ; {Interior object tile refs 14
 $71B3 DEFB $04,$05,$08,$0F,$1D,$12,$09,$07
 $71BB DEFB $15,$16,$00,$13,$18,$07,$FF,$84
 $71C3 DEFB $00                             ; }
 $71C4 DEFB $04,$06,$08,$02,$00,$00,$11,$12 ; {Interior object tile refs 17
 $71CC DEFB $08,$00,$04,$1C,$17,$0F,$09,$0A
 $71D4 DEFB $07,$16,$07,$0C,$0D,$00,$0D,$00
 $71DC DEFB $00,$00                         ; }
 $71DE DEFB $04,$06,$02,$00,$00,$00,$11,$12 ; {Interior object tile refs 18
 $71E6 DEFB $04,$05,$04,$1C,$1D,$12,$09,$0A
 $71EE DEFB $07,$0C,$00,$0C,$0D,$00,$00,$00
 $71F6 DEFB $00,$00                         ; }
 $71F8 DEFB $02,$03,$BE,$BF,$BA,$C0,$BC,$C1 ; Interior object tile refs 19
 $7200 DEFB $04,$06,$00,$00,$00,$02,$00,$02 ; {Interior object tile refs 20
 $7208 DEFB $1E,$05,$1B,$22,$22,$24,$21,$22
 $7210 DEFB $22,$23,$1F,$20,$0D,$00,$0D,$00
 $7218 DEFB $00,$00                         ; }
 $721A DEFB $16,$0C,$FF,$8B,$00,$32,$36,$FF ; {Interior object tile refs 2
 $7222 DEFB $92,$00,$32,$25,$34,$37,$35,$36
 $722A DEFB $FF,$8E,$00,$32,$25,$34,$FF,$84
 $7232 DEFB $00,$37,$35,$36,$FF,$8A,$00,$32
 $723A DEFB $25,$34,$FF,$88,$00,$37,$35,$36
 $7242 DEFB $FF,$86,$00,$32,$25,$34,$FF,$8C
 $724A DEFB $00,$37,$35,$36,$00,$00,$32,$25
 $7252 DEFB $34,$FF,$90,$00,$37,$35,$25,$34
 $725A DEFB $FF,$92,$00,$39,$0D,$13,$3A,$FF
 $7262 DEFB $90,$00,$39,$0D,$FF,$84,$00,$13
 $726A DEFB $3A,$FF,$8C,$00,$39,$0D,$FF,$88
 $7272 DEFB $00,$13,$3A,$FF,$88,$00,$39,$0D
 $727A DEFB $FF,$8C,$00,$13,$3A,$FF,$84,$00
 $7282 DEFB $39,$0D,$FF,$90,$00,$13,$3A,$39
 $728A DEFB $0D,$FF,$8A,$00                 ; }
 $728E DEFB $05,$06,$00,$00,$00,$32,$36,$00 ; {Interior object tile refs 8
 $7296 DEFB $32,$25,$26,$27,$25,$26,$2A,$29
 $729E DEFB $27,$28,$29,$2B,$2C,$2D,$31,$2C
 $72A6 DEFB $30,$2F,$00,$2E,$2F,$00,$00,$00 ; }
 $72AE DEFB $05,$04,$3E,$3F,$40,$00,$00,$FF ; {Interior object tile refs 9
 $72B6 DEFB $45,$41,$00,$FF,$44,$46,$00,$00
 $72BE DEFB $00,$4A,$00                     ; }
 $72C1 DEFB $03,$04,$FF,$46,$51,$54,$57,$56 ; {Interior object tile refs 10
 $72C9 DEFB $58,$59,$5A                     ; }
 $72CC DEFB $02,$03,$FF,$46,$4B             ; Interior object tile refs 11
 $72D1 DEFB $04,$06,$00,$00,$32,$36,$32,$25 ; {Interior object tile refs 15
 $72D9 DEFB $34,$27,$38,$00,$00,$27,$38,$00
 $72E1 DEFB $00,$27,$38,$00,$01,$3B,$3C,$01
 $72E9 DEFB $01,$00                         ; }
 $72EB DEFB $04,$06,$32,$36,$00,$00,$38,$37 ; {Interior object tile refs 16
 $72F3 DEFB $35,$36,$38,$00,$00,$27,$38,$00
 $72FB DEFB $00,$27,$33,$01,$00,$27,$00,$01
 $7303 DEFB $01,$3D                         ; }
 $7305 DEFB $02,$04,$67,$00,$68,$36,$69,$6B ; {Interior object tile refs 22
 $730D DEFB $6A,$00                         ; }
 $730F DEFB $05,$04,$3E,$70,$6C,$00,$00,$41 ; {Interior object tile refs 23
 $7317 DEFB $42,$6D,$6E,$45,$00,$46,$47,$6F
 $731F DEFB $49,$00,$00,$00,$4A,$00         ; }
 $7325 DEFB $03,$04,$51,$52,$53,$71,$72,$56 ; {Interior object tile refs 24
 $732D DEFB $54,$57,$56,$58,$59,$5A         ; }
 $7333 DEFB $02,$04,$00,$73,$5C,$FF,$44,$74 ; {Interior object tile refs 25
 $733B DEFB $00                             ; }
 $733C DEFB $03,$03,$5C,$FF,$48,$78         ; Interior object tile refs 26
 $7342 DEFB $04,$03,$FF,$48,$5C,$4A,$38,$00 ; {Interior object tile refs 28
 $734A DEFB $00                             ; }
 $734B DEFB $03,$04,$80,$81,$00,$00,$82,$00 ; {Interior object tile refs 30
 $7353 DEFB $00,$82,$00,$00,$80,$00         ; }
 $7359 DEFB $01,$01,$83                     ; Interior object tile refs 31
 $735C DEFB $03,$05,$FF,$46,$51,$54,$57,$56 ; {Interior object tile refs 32
 $7364 DEFB $54,$57,$56,$58,$59,$5A         ; }
 $736A DEFB $02,$02,$FF,$44,$88             ; Interior object tile refs 33
 $736F DEFB $02,$02,$FF,$44,$8C             ; Interior object tile refs 34
 $7374 DEFB $03,$05,$00,$32,$36,$25,$84,$27 ; {Interior object tile refs 35
 $737C DEFB $85,$86,$27,$85,$87,$2D,$2E,$2F
 $7384 DEFB $00                             ; }
 $7385 DEFB $04,$03,$32,$36,$00,$00,$5B,$37 ; {Interior object tile refs 36
 $738D DEFB $35,$36,$00,$01,$01,$27         ; }
 $7393 DEFB $04,$04,$00,$00,$32,$36,$32,$25 ; {Interior object tile refs 37
 $739B DEFB $34,$27,$38,$90,$90,$27,$38,$25
 $73A3 DEFB $34,$00                         ; }
 $73A5 DEFB $04,$06,$00,$00,$32,$36,$32,$25 ; {Interior object tile refs 38
 $73AD DEFB $34,$27,$38,$00,$00,$27,$38,$00
 $73B5 DEFB $00,$27,$38,$00,$01,$91,$38,$01
 $73BD DEFB $01,$00                         ; }
 $73BF DEFB $04,$06,$32,$36,$00,$00,$38,$37 ; {Interior object tile refs 39
 $73C7 DEFB $35,$36,$38,$00,$00,$27,$38,$00
 $73CF DEFB $00,$27,$5B,$01,$00,$27,$00,$01
 $73D7 DEFB $01,$27                         ; }
 $73D9 DEFB $0E,$08,$FF,$85,$00,$32,$36,$FF ; {Interior object tile refs 41
 $73E1 DEFB $8A,$00,$32,$25,$34,$37,$35,$36
 $73E9 DEFB $FF,$86,$00,$32,$25,$34,$FF,$84
 $73F1 DEFB $00,$37,$35,$36,$00,$00,$00,$25
 $73F9 DEFB $34,$FF,$88,$00,$37,$35,$36,$00
 $7401 DEFB $13,$3A,$FF,$8A,$00,$37,$35,$00
 $7409 DEFB $00,$13,$3A,$FF,$88,$00,$39,$0D
 $7411 DEFB $FF,$84,$00,$13,$3A,$FF,$84,$00
 $7419 DEFB $39,$0D,$FF,$88,$00,$13,$3A,$39
 $7421 DEFB $0D,$FF,$84,$00                 ; }
 $7425 DEFB $02,$03,$51,$52,$54,$55,$58,$59 ; Interior object tile refs 42
 $742D DEFB $09,$05,$FF,$86,$00,$5C,$94,$99 ; {Interior object tile refs 43
 $7435 DEFB $FF,$84,$00,$5C,$94,$97,$66,$96
 $743D DEFB $00,$00,$5C,$94,$97,$66,$00,$00
 $7445 DEFB $00,$5C,$94,$97,$66,$FF,$85,$00
 $744D DEFB $98,$66,$FF,$87,$00             ; }
 $7452 DEFB $0A,$06,$FF,$86,$00,$FF,$44,$5C ; {Interior object tile refs 44
 $745A DEFB $FF,$84,$00,$5C,$5D,$64,$65,$62
 $7462 DEFB $63,$00,$00,$5C,$5D,$64,$65,$62
 $746A DEFB $66,$00,$00,$5C,$5D,$64,$65,$62
 $7472 DEFB $66,$FF,$84,$00,$60,$61,$62,$66
 $747A DEFB $FF,$86,$00,$4A,$38,$FF,$88,$00 ; }
 $7482 DEFB $05,$03,$00,$00,$5C,$94,$95,$5C ; {Interior object tile refs 45
 $748A DEFB $94,$97,$66,$96,$98,$66,$00,$00
 $7492 DEFB $00                             ; }
 $7493 DEFB $12,$0A,$FF,$8B,$00,$32,$36,$FF ; {Interior object tile refs 46
 $749B DEFB $8E,$00,$32,$25,$34,$37,$35,$36
 $74A3 DEFB $FF,$8A,$00,$32,$25,$34,$FF,$84
 $74AB DEFB $00,$37,$35,$36,$FF,$86,$00,$32
 $74B3 DEFB $25,$34,$FF,$88,$00,$37,$35,$00
 $74BB DEFB $00,$00,$32,$25,$34,$FF,$8A,$00
 $74C3 DEFB $39,$0D,$00,$32,$25,$34,$FF,$8A
 $74CB DEFB $00,$39,$0D,$00,$00,$25,$34,$FF
 $74D3 DEFB $8A,$00,$39,$0D,$FF,$84,$00,$13
 $74DB DEFB $3A,$FF,$88,$00,$39,$0D,$FF,$88
 $74E3 DEFB $00,$13,$3A,$FF,$84,$00,$39,$0D
 $74EB DEFB $FF,$8C,$00,$13,$3A,$39,$0D,$FF
 $74F3 DEFB $8A,$00                         ; }
 $74F5 DEFB $16,$0C,$FF,$87,$00,$32,$36,$FF ; {Interior object tile refs 47
 $74FD DEFB $92,$00,$32,$25,$34,$37,$35,$36
 $7505 DEFB $FF,$8E,$00,$32,$25,$34,$FF,$84
 $750D DEFB $00,$37,$35,$36,$FF,$8A,$00,$32
 $7515 DEFB $25,$34,$FF,$88,$00,$37,$35,$36
 $751D DEFB $FF,$87,$00,$25,$34,$FF,$8C,$00
 $7525 DEFB $37,$35,$36,$FF,$85,$00,$13,$3A
 $752D DEFB $FF,$8E,$00,$37,$35,$36,$FF,$85
 $7535 DEFB $00,$13,$3A,$FF,$8E,$00,$37,$35
 $753D DEFB $36,$FF,$85,$00,$13,$3A,$FF,$8E
 $7545 DEFB $00,$37,$35,$FF,$86,$00,$13,$3A
 $754D DEFB $FF,$8C,$00,$39,$0D,$FF,$88,$00
 $7555 DEFB $13,$3A,$FF,$88,$00,$39,$0D,$FF
 $755D DEFB $8C,$00,$13,$3A,$FF,$84,$00,$39
 $7565 DEFB $0D,$FF,$90,$00,$13,$3A,$39,$0D
 $756D DEFB $FF,$86,$00                     ; }
 $7570 DEFB $02,$02,$5C,$36,$98,$93         ; Interior object tile refs 48
 $7576 DEFB $02,$03,$5C,$9A,$7A,$9B,$9D,$9C ; Interior object tile refs 49
 $757E DEFB $02,$04,$4B,$4C,$9E,$4E,$9F,$4E ; {Interior object tile refs 50
 $7586 DEFB $4F,$50                         ; }
 $7588 DEFB $06,$04,$5C,$5D,$5E,$A0,$A8,$00 ; {Interior object tile refs 51
 $7590 DEFB $60,$61,$A1,$A2,$A3,$A7,$4A,$38
 $7598 DEFB $A4,$A5,$A6,$00,$00,$00,$00,$2D
 $75A0 DEFB $00,$00                         ; }
 $75A2 DEFB $03,$03,$A9,$AA,$00,$FF,$46,$AB ; Interior object tile refs 52
 $75AA DEFB $02,$02,$B2,$B1,$B3,$B4         ; Interior object tile refs 53
 $75B0 DEFB $12,$0A,$FF,$87,$00,$32,$36,$FF ; {Interior object tile refs 27
 $75B8 DEFB $8E,$00,$32,$25,$34,$37,$35,$36
 $75C0 DEFB $FF,$8A,$00,$32,$25,$34,$FF,$84
 $75C8 DEFB $00,$37,$35,$36,$FF,$86,$00,$32
 $75D0 DEFB $25,$34,$FF,$88,$00,$37,$35,$36
 $75D8 DEFB $00,$00,$00,$25,$34,$FF,$8C,$00
 $75E0 DEFB $37,$35,$36,$00,$13,$3A,$FF,$8E
 $75E8 DEFB $00,$37,$35,$00,$00,$13,$3A,$FF
 $75F0 DEFB $8C,$00,$39,$0D,$FF,$84,$00,$13
 $75F8 DEFB $3A,$FF,$88,$00,$39,$0D,$FF,$88
 $7600 DEFB $00,$13,$3A,$FF,$84,$00,$39,$0D
 $7608 DEFB $FF,$8C,$00,$13,$3A,$39,$0D,$FF
 $7610 DEFB $86,$00                         ; }

; character_structs
;
; Array, 26 long, of 7-byte structures.
; .
; struct { byte item; byte room; byte y, x; byte unk1; byte unk2; byte unk3; }
; // likely same struct type/layout as item_structs
; .
; 0:
b$7612 DEFB $00,$0B,$2E,$2E,$18,$03,$00 ; { character_0_COMMANDANT,
                                        ; room_11_papers,    46, 46, 0x18,
                                        ; 0x03, 0x00 },
; 1:
 $7619 DEFB $01,$00,$66,$44,$03,$01,$00 ; { character_1_GUARD_1,
                                        ; room_0_outdoors,  102, 68, 0x03,
                                        ; 0x01, 0x00 },
; 2:
 $7620 DEFB $02,$00,$44,$68,$03,$01,$02 ; { character_2_GUARD_2,
                                        ; room_0_outdoors,   68,104, 0x03,
                                        ; 0x01, 0x02 },
; 3:
 $7627 DEFB $03,$10,$2E,$2E,$18,$03,$13 ; { character_3_GUARD_3,
                                        ; room_16_corridor,  46, 46, 0x18,
                                        ; 0x03, 0x13 },
; 4:
 $762E DEFB $04,$00,$3D,$67,$03,$02,$04 ; { character_4_GUARD_4,
                                        ; room_0_outdoors,   61,103, 0x03,
                                        ; 0x02, 0x04 },
; 5:
 $7635 DEFB $05,$00,$6A,$38,$0D,$00,$00 ; { character_5_GUARD_5,
                                        ; room_0_outdoors,  106, 56, 0x0D,
                                        ; 0x00, 0x00 },
; 6:
 $763C DEFB $06,$00,$48,$5E,$0D,$00,$00 ; { character_6_GUARD_6,
                                        ; room_0_outdoors,   72, 94, 0x0D,
                                        ; 0x00, 0x00 },
; 7: prisoner who sleeps at bed position A
 $7643 DEFB $07,$00,$48,$46,$0D,$00,$00 ; { character_7_GUARD_7,
                                        ; room_0_outdoors,   72, 70, 0x0D,
                                        ; 0x00, 0x00 },
; 8: prisoner who sleeps at bed position B
 $764A DEFB $08,$00,$50,$2E,$0D,$00,$00 ; { character_8_GUARD_8,
                                        ; room_0_outdoors,   80, 46, 0x0D,
                                        ; 0x00, 0x00 },
; 9: prisoner who sleeps at bed position C
 $7651 DEFB $09,$00,$6C,$47,$15,$04,$00 ; { character_9_GUARD_9,
                                        ; room_0_outdoors,  108, 71, 0x15,
                                        ; 0x04, 0x00 },
; 10: prisoner who sleeps at bed position D
 $7658 DEFB $0A,$00,$5C,$34,$03,$FF,$38 ; { character_10_GUARD_10,
                                        ; room_0_outdoors,   92, 52, 0x03,
                                        ; 0xFF, 0x38 },
; 11: prisoner who sleeps at bed position E
 $765F DEFB $0B,$00,$6D,$45,$03,$00,$00 ; { character_11_GUARD_11,
                                        ; room_0_outdoors,  109, 69, 0x03,
                                        ; 0x00, 0x00 },
; 12: prisoner who sleeps at bed position F (<-
; perhaps_reset_map_and_characters)
 $7666 DEFB $0C,$03,$28,$3C,$18,$00,$08 ; { character_12_GUARD_12,
                                        ; room_3_hut2right,  40, 60, 0x18,
                                        ; 0x00, 0x08 },
; 13:
 $766D DEFB $0D,$02,$24,$30,$18,$00,$08 ; { character_13_GUARD_13,
                                        ; room_2_hut2left,   36, 48, 0x18,
                                        ; 0x00, 0x08 },
; 14:
 $7674 DEFB $0E,$05,$28,$3C,$18,$00,$10 ; { character_14_GUARD_14,
                                        ; room_5_hut3right,  40, 60, 0x18,
                                        ; 0x00, 0x10 },
; 15:
 $767B DEFB $0F,$05,$24,$22,$18,$00,$10 ; { character_15_GUARD_15,
                                        ; room_5_hut3right,  36, 34, 0x18,
                                        ; 0x00, 0x10 },
; 16:
 $7682 DEFB $10,$00,$44,$54,$01,$FF,$00 ; { character_16_GUARD_DOG_1,
                                        ; room_0_outdoors,   68, 84, 0x01,
                                        ; 0xFF, 0x00 },
; 17:
 $7689 DEFB $11,$00,$44,$68,$01,$FF,$00 ; { character_16_GUARD_DOG_2,
                                        ; room_0_outdoors,   68,104, 0x01,
                                        ; 0xFF, 0x00 },
; 18: prisoner who sits at bench position D
 $7690 DEFB $12,$00,$66,$44,$01,$FF,$18 ; { character_18_GUARD_DOG_3,
                                        ; room_0_outdoors,  102, 68, 0x01,
                                        ; 0xFF, 0x18 },
; 19: prisoner who sits at bench position E
 $7697 DEFB $13,$00,$58,$44,$01,$FF,$18 ; { character_19_GUARD_DOG_4,
                                        ; room_0_outdoors,   88, 68, 0x01,
                                        ; 0xFF, 0x18 },
; 20: prisoner who sits at bench position F (<- wake_up)
 $769E DEFB $14,$FF,$34,$3C,$18,$00,$08 ; { character_20_PRISONER_1,
                                        ; room_NONE,         52, 60, 0x18,
                                        ; 0x00, 0x08 },
; 21: prisoner who sits at bench position A
 $76A5 DEFB $15,$FF,$34,$2C,$18,$00,$08 ; { character_21_PRISONER_2,
                                        ; room_NONE,         52, 44, 0x18,
                                        ; 0x00, 0x08 },
; 22: prisoner who sits at bench position B
 $76AC DEFB $16,$FF,$34,$1C,$18,$00,$08 ; { character_22_PRISONER_3,
                                        ; room_NONE,         52, 28, 0x18,
                                        ; 0x00, 0x08 },
; 23: prisoner who sits at bench position C
 $76B3 DEFB $17,$FF,$34,$3C,$18,$00,$10 ; { character_23_PRISONER_4,
                                        ; room_NONE,         52, 60, 0x18,
                                        ; 0x00, 0x10 },
; 24:
 $76BA DEFB $18,$FF,$34,$2C,$18,$00,$10 ; { character_24_PRISONER_5,
                                        ; room_NONE,         52, 44, 0x18,
                                        ; 0x00, 0x10 },
; 25:
 $76C1 DEFB $19,$FF,$34,$1C,$18,$00,$10 ; { character_25_PRISONER_6,
                                        ; room_NONE,         52, 28, 0x18,
                                        ; 0x00, 0x10 },

; item_structs
;
; 16 long array of 7-byte structures. These are 'characters' but seem to be the
; game items.
; .
; struct { byte item; byte room; byte y, x; byte unk1; byte unk2; byte unk3; }
b$76C8 DEFB $00,$FF,$40,$20,$02,$78,$F4 ; { item_WIRESNIPS,        room_NONE,
                                        ; 64,32, 0x02, 0x78, 0xF4 }, // <-
                                        ; item_to_itemstruct, find_nearby_item
 $76CF DEFB $01,$09,$3E,$30,$00,$7C,$F2 ; { item_SHOVEL,
                                        ; room_9_crate,     62,48, 0x00, 0x7C,
                                        ; 0xF2 },
 $76D6 DEFB $02,$0A,$49,$24,$10,$77,$F0 ; { item_LOCKPICK,
                                        ; room_10_lockpick, 73,36, 0x10, 0x77,
                                        ; 0xF0 },
 $76DD DEFB $03,$0B,$2A,$3A,$04,$84,$F3 ; { item_PAPERS,
                                        ; room_11_papers,   42,58, 0x04, 0x84,
                                        ; 0xF3 },
 $76E4 DEFB $04,$0E,$32,$18,$02,$7A,$F6 ; { item_TORCH,
                                        ; room_14_torch,    34,24, 0x02, 0x7A,
                                        ; 0xF6 },
 $76EB DEFB $05,$FF,$24,$2C,$04,$7E,$F4 ; { item_BRIBE,            room_NONE,
                                        ; 36,44, 0x04, 0x7E, 0xF4 }, // <-
                                        ; accept_bribe
 $76F2 DEFB $06,$0F,$2C,$41,$10,$87,$F1 ; { item_UNIFORM,
                                        ; room_15_uniform,  44,65, 0x10, 0x87,
                                        ; 0xF1 },
 $76F9 DEFB $07,$13,$40,$30,$10,$7E,$F0 ; { item_FOOD,
                                        ; room_19_food,     64,48, 0x10, 0x7E,
                                        ; 0xF0 }, // <- action_poison,
                                        ; called_from_main_loop
 $7700 DEFB $08,$01,$42,$34,$04,$7C,$F1 ; { item_POISON,
                                        ; room_1_hut1right, 66,52, 0x04, 0x7C,
                                        ; 0xF1 },
 $7707 DEFB $09,$16,$3C,$2A,$00,$7B,$F2 ; { item_RED_KEY,
                                        ; room_22_redkey,   60,42, 0x00, 0x7B,
                                        ; 0xF2 },
 $770E DEFB $0A,$0B,$1C,$22,$00,$81,$F8 ; { item_YELLOW_KEY,
                                        ; room_11_papers,   28,34, 0x00, 0x81,
                                        ; 0xF8 },
 $7715 DEFB $0B,$00,$4A,$48,$00,$7A,$6E ; { item_GREEN_KEY,
                                        ; room_0_outdoors,  74,72, 0x00, 0x7A,
                                        ; 0x6E },
 $771C DEFB $0C,$FF,$1C,$32,$0C,$85,$F6 ; { item_RED_CROSS_PARCEL, room_NONE,
                                        ; 28,50, 0x0C, 0x85, 0xF6 }, // <-
                                        ; event_new_red_cross_parcel,
                                        ; new_red_cross_parcel
 $7723 DEFB $0D,$12,$24,$3A,$08,$85,$F4 ; { item_RADIO,
                                        ; room_18_radio,    36,58, 0x08, 0x85,
                                        ; 0xF4 },
 $772A DEFB $0E,$FF,$24,$2C,$04,$7E,$F4 ; { item_PURSE,            room_NONE,
                                        ; 36,44, 0x04, 0x7E, 0xF4 },
 $7731 DEFB $0F,$FF,$34,$1C,$04,$7E,$F4 ; { item_COMPASS,          room_NONE,
                                        ; 52,28, 0x04, 0x7E, 0xF4 },

; table_7738
b$7738 DEFW $0000                           ; {46 long array of pointers to
 $773A DEFW $7795                           ; object tile refs.
 $773C DEFW $7799
 $773E DEFW $77A0
 $7740 DEFW $77CD
 $7742 DEFW $77D0
 $7744 DEFW $77D4
 $7746 DEFW $77D8
 $7748 DEFW $77DA
 $774A DEFW $77DC
 $774C DEFW $77D8
 $774E DEFW $77DA
 $7750 DEFW $77DC
 $7752 DEFW $77DE
 $7754 DEFW $77E1
 $7756 DEFW $77E1
 $7758 DEFW $77E7
 $775A DEFW $77EC
 $775C DEFW $77F1
 $775E DEFW $77F3
 $7760 DEFW $77F5
 $7762 DEFW $77F1
 $7764 DEFW $77F3
 $7766 DEFW $77F5
 $7768 DEFW $77F7
 $776A DEFW $77F9
 $776C DEFW $77FB
 $776E DEFW $77FD
 $7770 DEFW $7803
 $7772 DEFW $7805
 $7774 DEFW $7807
 $7776 DEFW $77FF
 $7778 DEFW $7801
 $777A DEFW $7809
 $777C DEFW $780B
 $777E DEFW $780D
 $7780 DEFW $780F
 $7782 DEFW $7815
 $7784 DEFW $781A
 $7786 DEFW $781F
 $7788 DEFW $7825
 $778A DEFW $782B
 $778C DEFW $7831
 $778E DEFW $7833
 $7790 DEFW $7835
 $7792 DEFW $7838                           ; }
 $7794 DEFB $FF                             ; could be a terminating $FF
 $7795 DEFB $48,$49,$4A,$FF                 ; Object tile refs
 $7799 DEFB $4B,$4C,$4D,$4E,$4F,$50,$FF     ; Object tile refs
 $77A0 DEFB $56,$1F,$1D,$20,$1A,$23,$99,$96 ; {Object tile refs
 $77A8 DEFB $95,$94,$97,$52,$17,$8A,$0B,$8B
 $77B0 DEFB $0C,$9B,$1C,$9D,$8D,$33,$5F,$80
 $77B8 DEFB $81,$64,$01,$00,$04,$10,$85,$33
 $77C0 DEFB $07,$91,$86,$08,$12,$89,$55,$0E
 $77C8 DEFB $22,$A2,$21,$A1,$FF             ; }
 $77CD DEFB $53,$54,$FF                     ; Object tile refs
 $77D0 DEFB $87,$33,$34,$FF                 ; Object tile refs
 $77D4 DEFB $89,$55,$36,$FF                 ; Object tile refs
 $77D8 DEFB $56,$FF                         ; Object tile refs
 $77DA DEFB $57,$FF                         ; Object tile refs
 $77DC DEFB $58,$FF                         ; Object tile refs
 $77DE DEFB $5C,$5D,$FF                     ; Object tile refs
 $77E1 DEFB $33,$5F,$80,$81,$60,$FF         ; Object tile refs
 $77E7 DEFB $34,$0A,$14,$93,$FF             ; Object tile refs
 $77EC DEFB $38,$34,$0A,$14,$FF             ; Object tile refs
 $77F1 DEFB $68,$FF                         ; Object tile refs
 $77F3 DEFB $69,$FF                         ; Object tile refs
 $77F5 DEFB $6A,$FF                         ; Object tile refs
 $77F7 DEFB $6C,$FF                         ; Object tile refs
 $77F9 DEFB $6D,$FF                         ; Object tile refs
 $77FB DEFB $31,$FF                         ; Object tile refs
 $77FD DEFB $33,$FF                         ; Object tile refs
 $77FF DEFB $39,$FF                         ; Object tile refs
 $7801 DEFB $59,$FF                         ; Object tile refs
 $7803 DEFB $70,$FF                         ; Object tile refs
 $7805 DEFB $71,$FF                         ; Object tile refs
 $7807 DEFB $72,$FF                         ; Object tile refs
 $7809 DEFB $73,$FF                         ; Object tile refs
 $780B DEFB $74,$FF                         ; Object tile refs
 $780D DEFB $75,$FF                         ; Object tile refs
 $780F DEFB $36,$0A,$97,$98,$52,$FF         ; Object tile refs
 $7815 DEFB $18,$17,$8A,$36,$FF             ; Object tile refs
 $781A DEFB $34,$33,$07,$5C,$FF             ; Object tile refs
 $781F DEFB $34,$33,$07,$91,$5D,$FF         ; Object tile refs
 $7825 DEFB $34,$33,$55,$09,$5C,$FF         ; Object tile refs
 $782B DEFB $34,$33,$55,$09,$5D,$FF         ; Object tile refs
 $7831 DEFB $11,$FF                         ; Object tile refs
 $7833 DEFB $6B,$FF                         ; Object tile refs
 $7835 DEFB $91,$6E,$FF                     ; Object tile refs
 $7838 DEFB $5A,$FF                         ; Object tile refs

; word_783A
;
; 78 two-byte words
w$783A DEFW $6844    ; 0x6844
 $783C DEFW $5444    ; 0x5444
 $783E DEFW $4644    ; 0x4644
 $7840 DEFW $6640    ; 0x6640
 $7842 DEFW $4040    ; 0x4040
 $7844 DEFW $4444    ; 0x4444
 $7846 DEFW $4040    ; 0x4040
 $7848 DEFW $4044    ; 0x4044
 $784A DEFW $7068    ; 0x7068
 $784C DEFW $7060    ; 0x7060
 $784E DEFW $666A    ; 0x666A
 $7850 DEFW $685D    ; 0x685D
 $7852 DEFW $657C    ; 0x657C
 $7854 DEFW $707C    ; 0x707C
 $7856 DEFW $6874    ; 0x6874
 $7858 DEFW $6470    ; 0x6470
 $785A DEFW $6078    ; 0x6078
 $785C DEFW $5880    ; 0x5880
 $785E DEFW $6070    ; 0x6070
 $7860 DEFW $5474    ; 0x5474
 $7862 DEFW $647C    ; 0x647C
 $7864 DEFW $707C    ; 0x707C
 $7866 DEFW $6874    ; 0x6874
 $7868 DEFW $6470    ; 0x6470
 $786A DEFW $4466    ; 0x4466
 $786C DEFW $4066    ; 0x4066
 $786E DEFW $4060    ; 0x4060
 $7870 DEFW $445C    ; 0x445C
 $7872 DEFW $4456    ; 0x4456
 $7874 DEFW $4054    ; 0x4054
 $7876 DEFW $444A    ; 0x444A
 $7878 DEFW $404A    ; 0x404A
 $787A DEFW $4466    ; 0x4466
 $787C DEFW $4444    ; 0x4444
 $787E DEFW $6844    ; 0x6844
 $7880 DEFW $456B    ; 0x456B
 $7882 DEFW $2D6B    ; 0x2D6B
 $7884 DEFW $2D4D    ; 0x2D4D
 $7886 DEFW $3D4D    ; 0x3D4D
 $7888 DEFW $3D3D    ; 0x3D3D
 $788A DEFW $673D    ; 0x673D
 $788C DEFW $4C74    ; 0x4C74
 $788E DEFW $2A2C    ; 0x2A2C
 $7890 DEFW $486A    ; 0x486A
 $7892 DEFW $486E    ; 0x486E
 $7894 DEFW $6851    ; 0x6851
 $7896 DEFW $3C34    ; 0x3C34
 $7898 DEFW $2C34    ; 0x2C34
 $789A DEFW $1C34    ; 0x1C34
 $789C DEFW $6B77    ; 0x6B77
 $789E DEFW $6E7A    ; 0x6E7A
 $78A0 DEFW $1C34    ; 0x1C34
 $78A2 DEFW $3C28    ; 0x3C28
 $78A4 DEFW $2224    ; 0x2224
 $78A6 DEFW $4C50    ; 0x4C50
 $78A8 DEFW $4C59    ; 0x4C59
 $78AA DEFW $3C59    ; 0x3C59
 $78AC DEFW $3D64    ; 0x3D64
 $78AE DEFW $365C    ; 0x365C
 $78B0 DEFW $3254    ; 0x3254
 $78B2 DEFW $3066    ; 0x3066
 $78B4 DEFW $3860    ; 0x3860
 $78B6 DEFW $3B4F    ; 0x3B4F
 $78B8 DEFW $2F67    ; 0x2F67
 $78BA DEFW $3634    ; 0x3634
 $78BC DEFW $2E34    ; 0x2E34
 $78BE DEFW $2434    ; 0x2434
 $78C0 DEFW $3E34    ; 0x3E34
 $78C2 DEFW $3820    ; 0x3820
 $78C4 DEFW $1834    ; 0x1834
 $78C6 DEFW $2E2A    ; 0x2E2A
 $78C8 DEFW $2222    ; 0x2222
 $78CA DEFW $6E78    ; 0x6E78
 $78CC DEFW $6E76    ; 0x6E76
 $78CE DEFW $6E74    ; 0x6E74
 $78D0 DEFW $6D79    ; 0x6D79
 $78D2 DEFW $6D77    ; 0x6D77
 $78D4 DEFW $6D75    ; 0x6D75

; door_positions
;
; 124 four-byte structs (<- sub 69DC)
; .
; #define BYTE0(room,other) ((room << 2) | other)
b$78D6 DEFB $01,$B2,$8A,$06 ; { BYTE0(room_0_outdoors,           1), 0xB2,
                            ; 0x8A,  6 },
 $78DA DEFB $03,$B2,$8E,$06 ; { BYTE0(room_0_outdoors,           3), 0xB2,
                            ; 0x8E,  6 },
 $78DE DEFB $01,$B2,$7A,$06 ; { BYTE0(room_0_outdoors,           1), 0xB2,
                            ; 0x7A,  6 },
 $78E2 DEFB $03,$B2,$7E,$06 ; { BYTE0(room_0_outdoors,           3), 0xB2,
                            ; 0x7E,  6 },
 $78E6 DEFB $88,$8A,$B3,$06 ; { BYTE0(room_34,                   0), 0x8A,
                            ; 0xB3,  6 },
 $78EA DEFB $02,$10,$34,$0C ; { BYTE0(room_0_outdoors,           2), 0x10,
                            ; 0x34, 12 },
 $78EE DEFB $C0,$CC,$79,$06 ; { BYTE0(room_48,                   0), 0xCC,
                            ; 0x79,  6 },
 $78F2 DEFB $02,$10,$34,$0C ; { BYTE0(room_0_outdoors,           2), 0x10,
                            ; 0x34, 12 },
 $78F6 DEFB $71,$D9,$A3,$06 ; { BYTE0(room_28_hut1left,          1), 0xD9,
                            ; 0xA3,  6 },
 $78FA DEFB $03,$2A,$1C,$18 ; { BYTE0(room_0_outdoors,           3), 0x2A,
                            ; 0x1C, 24 },
 $78FE DEFB $04,$D4,$BD,$06 ; { BYTE0(room_1_hut1right,          0), 0xD4,
                            ; 0xBD,  6 },
 $7902 DEFB $02,$1E,$2E,$18 ; { BYTE0(room_0_outdoors,           2), 0x1E,
                            ; 0x2E, 24 },
 $7906 DEFB $09,$C1,$A3,$06 ; { BYTE0(room_2_hut2left,           1), 0xC1,
                            ; 0xA3,  6 }, // if i set the room number to $80
                            ; here i can't use the (left) door to exit,
                            ; entering the door from the otherside puts me in a
                            ; tunnel (i think)
 $790A DEFB $03,$2A,$1C,$18 ; { BYTE0(room_0_outdoors,           3), 0x2A,
                            ; 0x1C, 24 },
 $790E DEFB $0C,$BC,$BD,$06 ; { BYTE0(room_3_hut2right,          0), 0xBC,
                            ; 0xBD,  6 },
 $7912 DEFB $02,$20,$2E,$18 ; { BYTE0(room_0_outdoors,           2), 0x20,
                            ; 0x2E, 24 },
 $7916 DEFB $11,$A9,$A3,$06 ; { BYTE0(room_4_hut3left,           1), 0xA9,
                            ; 0xA3,  6 },
 $791A DEFB $03,$2A,$1C,$18 ; { BYTE0(room_0_outdoors,           3), 0x2A,
                            ; 0x1C, 24 },
 $791E DEFB $14,$A4,$BD,$06 ; { BYTE0(room_5_hut3right,          0), 0xA4,
                            ; 0xBD,  6 },
 $7922 DEFB $02,$20,$2E,$18 ; { BYTE0(room_0_outdoors,           2), 0x20,
                            ; 0x2E, 24 },
 $7926 DEFB $54,$FC,$CA,$06 ; { BYTE0(room_21_corridor,          0), 0xFC,
                            ; 0xCA,  6 },
 $792A DEFB $02,$1C,$24,$18 ; { BYTE0(room_0_outdoors,           2), 0x1C,
                            ; 0x24, 24 },
 $792E DEFB $50,$FC,$DA,$06 ; { BYTE0(room_20_redcross,          0), 0xFC,
                            ; 0xDA,  6 },
 $7932 DEFB $02,$1A,$22,$18 ; { BYTE0(room_0_outdoors,           2), 0x1A,
                            ; 0x22, 24 },
 $7936 DEFB $3D,$F7,$E3,$06 ; { BYTE0(room_15_uniform,           1), 0xF7,
                            ; 0xE3,  6 },
 $793A DEFB $03,$26,$19,$18 ; { BYTE0(room_0_outdoors,           3), 0x26,
                            ; 0x19, 24 },
 $793E DEFB $35,$DF,$E3,$06 ; { BYTE0(room_13_corridor,          1), 0xDF,
                            ; 0xE3,  6 },
 $7942 DEFB $03,$2A,$1C,$18 ; { BYTE0(room_0_outdoors,           3), 0x2A,
                            ; 0x1C, 24 },
 $7946 DEFB $21,$97,$D3,$06 ; { BYTE0(room_8_corridor,           1), 0x97,
                            ; 0xD3,  6 },
 $794A DEFB $03,$2A,$15,$18 ; { BYTE0(room_0_outdoors,           3), 0x2A,
                            ; 0x15, 24 },
 $794E DEFB $19,$00,$00,$00 ; { BYTE0(room_6,                    1), 0x00,
                            ; 0x00,  0 }, // intriguing
 $7952 DEFB $03,$22,$22,$18 ; { BYTE0(room_0_outdoors,           3), 0x22,
                            ; 0x22, 24 },
 $7956 DEFB $05,$2C,$34,$18 ; { BYTE0(room_1_hut1right,          1), 0x2C,
                            ; 0x34, 24 },
 $795A DEFB $73,$26,$1A,$18 ; { BYTE0(room_28_hut1left,          3), 0x26,
                            ; 0x1A, 24 },
 $795E DEFB $0D,$24,$36,$18 ; { BYTE0(room_3_hut2right,          1), 0x24,
                            ; 0x36, 24 },
 $7962 DEFB $0B,$26,$1A,$18 ; { BYTE0(room_2_hut2left,           3), 0x26,
                            ; 0x1A, 24 },
 $7966 DEFB $15,$24,$36,$18 ; { BYTE0(room_5_hut3right,          1), 0x24,
                            ; 0x36, 24 },
 $796A DEFB $13,$26,$1A,$18 ; { BYTE0(room_4_hut3left,           3), 0x26,
                            ; 0x1A, 24 },
 $796E DEFB $5D,$28,$42,$18 ; { BYTE0(room_23_breakfast,         1), 0x28,
                            ; 0x42, 24 },
 $7972 DEFB $67,$26,$18,$18 ; { BYTE0(room_25_breakfast,         3), 0x26,
                            ; 0x18, 24 },
 $7976 DEFB $5C,$3E,$24,$18 ; { BYTE0(room_23_breakfast,         0), 0x3E,
                            ; 0x24, 24 },
 $797A DEFB $56,$20,$2E,$18 ; { BYTE0(room_21_corridor,          2), 0x20,
                            ; 0x2E, 24 },
 $797E DEFB $4D,$22,$42,$18 ; { BYTE0(room_19_food,              1), 0x22,
                            ; 0x42, 24 },
 $7982 DEFB $5F,$22,$1C,$18 ; { BYTE0(room_23_breakfast,         3), 0x22,
                            ; 0x1C, 24 },
 $7986 DEFB $49,$24,$36,$18 ; { BYTE0(room_18_radio,             1), 0x24,
                            ; 0x36, 24 },
 $798A DEFB $4F,$38,$22,$18 ; { BYTE0(room_19_food,              3), 0x38,
                            ; 0x22, 24 },
 $798E DEFB $55,$2C,$36,$18 ; { BYTE0(room_21_corridor,          1), 0x2C,
                            ; 0x36, 24 },
 $7992 DEFB $5B,$22,$1C,$18 ; { BYTE0(room_22_redkey,            3), 0x22,
                            ; 0x1C, 24 },
 $7996 DEFB $59,$2C,$36,$18 ; { BYTE0(room_22_redkey,            1), 0x2C,
                            ; 0x36, 24 },
 $799A DEFB $63,$2A,$26,$18 ; { BYTE0(room_24_solitary,          3), 0x2A,
                            ; 0x26, 24 },
 $799E DEFB $31,$42,$3A,$18 ; { BYTE0(room_12_corridor,          1), 0x42,
                            ; 0x3A, 24 },
 $79A2 DEFB $4B,$22,$1C,$18 ; { BYTE0(room_18_radio,             3), 0x22,
                            ; 0x1C, 24 },
 $79A6 DEFB $44,$3C,$24,$18 ; { BYTE0(room_17_corridor,          0), 0x3C,
                            ; 0x24, 24 },
 $79AA DEFB $1E,$1C,$22,$18 ; { BYTE0(room_7_corridor,           2), 0x1C,
                            ; 0x22, 24 },
 $79AE DEFB $3C,$40,$28,$18 ; { BYTE0(room_15_uniform,           0), 0x40,
                            ; 0x28, 24 },
 $79B2 DEFB $3A,$1E,$28,$18 ; { BYTE0(room_14_torch,             2), 0x1E,
                            ; 0x28, 24 },
 $79B6 DEFB $41,$22,$42,$18 ; { BYTE0(room_16_corridor,          1), 0x22,
                            ; 0x42, 24 },
 $79BA DEFB $3B,$22,$1C,$18 ; { BYTE0(room_14_torch,             3), 0x22,
                            ; 0x1C, 24 },
 $79BE DEFB $40,$3E,$2E,$18 ; { BYTE0(room_16_corridor,          0), 0x3E,
                            ; 0x2E, 24 },
 $79C2 DEFB $36,$1A,$22,$18 ; { BYTE0(room_13_corridor,          2), 0x1A,
                            ; 0x22, 24 },
 $79C6 DEFB $00,$44,$30,$18 ; { BYTE0(room_0_outdoors,           0), 0x44,
                            ; 0x30, 24 },
 $79CA DEFB $02,$20,$30,$18 ; { BYTE0(room_0_outdoors,           2), 0x20,
                            ; 0x30, 24 },
 $79CE DEFB $34,$4A,$28,$18 ; { BYTE0(room_13_corridor,          0), 0x4A,
                            ; 0x28, 24 },
 $79D2 DEFB $2E,$1A,$22,$18 ; { BYTE0(room_11_papers,            2), 0x1A,
                            ; 0x22, 24 },
 $79D6 DEFB $1C,$40,$24,$18 ; { BYTE0(room_7_corridor,           0), 0x40,
                            ; 0x24, 24 },
 $79DA DEFB $42,$1A,$22,$18 ; { BYTE0(room_16_corridor,          2), 0x1A,
                            ; 0x22, 24 },
 $79DE DEFB $28,$36,$35,$18 ; { BYTE0(room_10_lockpick,          0), 0x36,
                            ; 0x35, 24 },
 $79E2 DEFB $22,$17,$26,$18 ; { BYTE0(room_8_corridor,           2), 0x17,
                            ; 0x26, 24 },
 $79E6 DEFB $24,$36,$1C,$18 ; { BYTE0(room_9_crate,              0), 0x36,
                            ; 0x1C, 24 },
 $79EA DEFB $22,$1A,$22,$18 ; { BYTE0(room_8_corridor,           2), 0x1A,
                            ; 0x22, 24 },
 $79EE DEFB $30,$3E,$24,$18 ; { BYTE0(room_12_corridor,          0), 0x3E,
                            ; 0x24, 24 },
 $79F2 DEFB $46,$1A,$22,$18 ; { BYTE0(room_17_corridor,          2), 0x1A,
                            ; 0x22, 24 },
 $79F6 DEFB $75,$36,$36,$18 ; { BYTE0(room_29_secondtunnelstart, 1), 0x36,
                            ; 0x36, 24 },
 $79FA DEFB $27,$38,$0A,$0C ; { BYTE0(room_9_crate,              3), 0x38,
                            ; 0x0A, 12 },
 $79FE DEFB $D1,$38,$62,$0C ; { BYTE0(room_52,                   1), 0x38,
                            ; 0x62, 12 },
 $7A02 DEFB $7B,$38,$0A,$0C ; { BYTE0(room_30,                   3), 0x38,
                            ; 0x0A, 12 },
 $7A06 DEFB $78,$64,$34,$0C ; { BYTE0(room_30,                   0), 0x64,
                            ; 0x34, 12 },
 $7A0A DEFB $7E,$38,$26,$0C ; { BYTE0(room_31,                   2), 0x38,
                            ; 0x26, 12 },
 $7A0E DEFB $79,$38,$62,$0C ; { BYTE0(room_30,                   1), 0x38,
                            ; 0x62, 12 },
 $7A12 DEFB $93,$38,$0A,$0C ; { BYTE0(room_36,                   3), 0x38,
                            ; 0x0A, 12 },
 $7A16 DEFB $7C,$64,$34,$0C ; { BYTE0(room_31,                   0), 0x64,
                            ; 0x34, 12 },
 $7A1A DEFB $82,$0A,$34,$0C ; { BYTE0(room_32,                   2), 0x0A,
                            ; 0x34, 12 },
 $7A1E DEFB $81,$38,$62,$0C ; { BYTE0(room_32,                   1), 0x38,
                            ; 0x62, 12 },
 $7A22 DEFB $87,$20,$34,$0C ; { BYTE0(room_33,                   3), 0x20,
                            ; 0x34, 12 },
 $7A26 DEFB $85,$40,$34,$0C ; { BYTE0(room_33,                   1), 0x40,
                            ; 0x34, 12 },
 $7A2A DEFB $8F,$38,$0A,$0C ; { BYTE0(room_35,                   3), 0x38,
                            ; 0x0A, 12 },
 $7A2E DEFB $8C,$64,$34,$0C ; { BYTE0(room_35,                   0), 0x64,
                            ; 0x34, 12 },
 $7A32 DEFB $8A,$0A,$34,$0C ; { BYTE0(room_34,                   2), 0x0A,
                            ; 0x34, 12 },
 $7A36 DEFB $90,$64,$34,$0C ; { BYTE0(room_36,                   0), 0x64,
                            ; 0x34, 12 },
 $7A3A DEFB $8E,$38,$1C,$0C ; { BYTE0(room_35,                   2), 0x38,
                            ; 0x1C, 12 },
 $7A3E DEFB $94,$3E,$22,$18 ; { BYTE0(room_37,                   0), 0x3E,
                            ; 0x22, 24 }, // tunnel entrance
 $7A42 DEFB $0A,$10,$34,$0C ; { BYTE0(room_2_hut2left,           2), 0x10,
                            ; 0x34, 12 },
 $7A46 DEFB $98,$64,$34,$0C ; { BYTE0(room_38,                   0), 0x64,
                            ; 0x34, 12 },
 $7A4A DEFB $96,$10,$34,$0C ; { BYTE0(room_37,                   2), 0x10,
                            ; 0x34, 12 },
 $7A4E DEFB $9D,$40,$34,$0C ; { BYTE0(room_39,                   1), 0x40,
                            ; 0x34, 12 },
 $7A52 DEFB $9B,$20,$34,$0C ; { BYTE0(room_38,                   3), 0x20,
                            ; 0x34, 12 },
 $7A56 DEFB $A0,$64,$34,$0C ; { BYTE0(room_40,                   0), 0x64,
                            ; 0x34, 12 },
 $7A5A DEFB $9A,$38,$54,$0C ; { BYTE0(room_38,                   2), 0x38,
                            ; 0x54, 12 },
 $7A5E DEFB $A1,$38,$62,$0C ; { BYTE0(room_40,                   1), 0x38,
                            ; 0x62, 12 },
 $7A62 DEFB $A7,$38,$0A,$0C ; { BYTE0(room_41,                   3), 0x38,
                            ; 0x0A, 12 },
 $7A66 DEFB $A4,$64,$34,$0C ; { BYTE0(room_41,                   0), 0x64,
                            ; 0x34, 12 },
 $7A6A DEFB $AA,$38,$26,$0C ; { BYTE0(room_42,                   2), 0x38,
                            ; 0x26, 12 },
 $7A6E DEFB $A5,$38,$62,$0C ; { BYTE0(room_41,                   1), 0x38,
                            ; 0x62, 12 },
 $7A72 DEFB $B7,$38,$0A,$0C ; { BYTE0(room_45,                   3), 0x38,
                            ; 0x0A, 12 },
 $7A76 DEFB $B4,$64,$34,$0C ; { BYTE0(room_45,                   0), 0x64,
                            ; 0x34, 12 },
 $7A7A DEFB $B2,$38,$1C,$0C ; { BYTE0(room_44,                   2), 0x38,
                            ; 0x1C, 12 },
 $7A7E DEFB $AD,$20,$34,$0C ; { BYTE0(room_43,                   1), 0x20,
                            ; 0x34, 12 },
 $7A82 DEFB $B3,$38,$0A,$0C ; { BYTE0(room_44,                   3), 0x38,
                            ; 0x0A, 12 },
 $7A86 DEFB $A9,$38,$62,$0C ; { BYTE0(room_42,                   1), 0x38,
                            ; 0x62, 12 },
 $7A8A DEFB $AF,$20,$34,$0C ; { BYTE0(room_43,                   3), 0x20,
                            ; 0x34, 12 },
 $7A8E DEFB $B8,$64,$34,$0C ; { BYTE0(room_46,                   0), 0x64,
                            ; 0x34, 12 },
 $7A92 DEFB $9E,$38,$1C,$0C ; { BYTE0(room_39,                   2), 0x38,
                            ; 0x1C, 12 },
 $7A96 DEFB $BD,$38,$62,$0C ; { BYTE0(room_47,                   1), 0x38,
                            ; 0x62, 12 },
 $7A9A DEFB $BB,$20,$34,$0C ; { BYTE0(room_46,                   3), 0x20,
                            ; 0x34, 12 },
 $7A9E DEFB $C8,$64,$34,$0C ; { BYTE0(room_50_blocked_tunnel,    0), 0x64,
                            ; 0x34, 12 },
 $7AA2 DEFB $BE,$38,$56,$0C ; { BYTE0(room_47,                   2), 0x38,
                            ; 0x56, 12 },
 $7AA6 DEFB $C9,$38,$62,$0C ; { BYTE0(room_50_blocked_tunnel,    1), 0x38,
                            ; 0x62, 12 },
 $7AAA DEFB $C7,$38,$0A,$0C ; { BYTE0(room_49,                   3), 0x38,
                            ; 0x0A, 12 },
 $7AAE DEFB $C4,$64,$34,$0C ; { BYTE0(room_49,                   0), 0x64,
                            ; 0x34, 12 },
 $7AB2 DEFB $C2,$38,$1C,$0C ; { BYTE0(room_48,                   2), 0x38,
                            ; 0x1C, 12 },
 $7AB6 DEFB $CD,$38,$62,$0C ; { BYTE0(room_51,                   1), 0x38,
                            ; 0x62, 12 },
 $7ABA DEFB $77,$20,$34,$0C ; { BYTE0(room_29_secondtunnelstart, 3), 0x20,
                            ; 0x34, 12 },
 $7ABE DEFB $D0,$64,$34,$0C ; { BYTE0(room_52,                   0), 0x64,
                            ; 0x34, 12 },
 $7AC2 DEFB $CE,$38,$54,$0C ; { BYTE0(room_51,                   2), 0x38,
                            ; 0x54, 12 },

; solitary_transition_thing
;
; 3 bytes long (<- solitary)
b$7AC6 DEFB $3A,$2A,$18

; check_for_pick_up_keypress
;
; Used by the routine at #R$9E07.
; .
; check for 'pick up', 'drop' and both 'use item' keypresses
;
; I:A Input event.
c$7AC9 CP $0A        ; {if (A == input_UP_FIRE) pick_up_item();
 $7ACB JP NZ,$7AD3   ;
 $7ACE CALL $7B36    ;
 $7AD1 JR $7AEF      ; }
*$7AD3 CP $0B        ; {else if (A == input_DOWN_FIRE) drop_item();
 $7AD5 JP NZ,$7ADD   ;
 $7AD8 CALL $7B8B    ;
 $7ADB JR $7AEF      ; }
*$7ADD CP $0C        ; {else if (A == input_LEFT_FIRE) use_item_A();
 $7ADF JP NZ,$7AE7   ;
 $7AE2 CALL $7AF5    ;
 $7AE5 JR $7AEF      ; }
*$7AE7 CP $0F        ; {else if (A == input_RIGHT_FIRE) use_item_B();
 $7AE9 JP NZ,$7AEF   ;
 $7AEC CALL $7AF0    ; }
*$7AEF RET           ; return;

; use_item_B
;
; Used by the routine at #R$7AC9.
c$7AF0 LD A,($8216)  ; A = items_held[1]; // $8216
 $7AF3 JR $7AF8      ; goto use_item_common;

; use_item_A
;
; Used by the routine at #R$7AC9.
c$7AF5 LD A,($8215)  ; A = items_held[0]; // $8215 // FALLTHROUGH
; This entry point is used by the routine at #R$7AF0.
*$7AF8 CP $FF        ; {if (A == item_NONE) return;
 $7AFA RET Z         ; }

; use_item_common
c$7AFB JR $7AFD      ; (pointless_jump)
*$7AFD ADD A,A       ; {HL = &item_actions_jump_table[A];
 $7AFE LD C,A        ;
 $7AFF LD B,$00      ;
 $7B01 LD HL,$7B16   ;
 $7B04 ADD HL,BC     ; }
 $7B05 LD A,(HL)     ; {L = *HL++;
 $7B06 INC HL        ; }
 $7B07 LD H,(HL)     ; {H = *HL;
 $7B08 LD L,A        ; }
 $7B09 PUSH HL       ; PUSH HL // exit via jump table entry
 $7B0A LD DE,$81A4   ; {memcpy(&saved_Y, $800F, 6); // copy Y,X and vertical
 $7B0D LD HL,$800F   ; offset
 $7B10 LD BC,$0006   ;
 $7B13 LDIR          ; }
 $7B15 RET           ; return;

; item_actions_jump_table
w$7B16 DEFW $B417    ; action_wiresnips
 $7B18 DEFW $B3F6    ; action_shovel
 $7B1A DEFW $B495    ; action_lockpick
 $7B1C DEFW $EFCB    ; action_papers
 $7B1E DEFW $7AEF    ; -
 $7B20 DEFW $B3A8    ; action_bribe
 $7B22 DEFW $B3E1    ; action_uniform
 $7B24 DEFW $7AEF    ; -
 $7B26 DEFW $B3C4    ; action_poison
 $7B28 DEFW $B4AE    ; action_red_key
 $7B2A DEFW $B4B2    ; action_yellow_key
 $7B2C DEFW $B4B6    ; action_green_key
 $7B2E DEFW $B387    ; action_red_cross_parcel
 $7B30 DEFW $7AEF    ; -
 $7B32 DEFW $7AEF    ; -
 $7B34 DEFW $7AEF    ; -

; pick_up_item
;
; Used by the routine at #R$7AC9.
c$7B36 LD HL,($8215) ; HL = items_held;
 $7B39 LD A,$FF      ; A = item_NONE;
 $7B3B CP L          ; {if (L != A && H != A) return; // no spare slots
 $7B3C JR Z,$7B40    ;
 $7B3E CP H          ;
 $7B3F RET NZ        ; }
*$7B40 CALL $7C82    ; find_nearby_item();
 $7B43 RET NZ        ; if (!Z) return; // not found
; Locate the empty item slot.
 $7B44 LD DE,$8215   ; DE = &items_held[0];
 $7B47 LD A,(DE)     ; A = *DE;
 $7B48 CP $FF        ; {if (A != item_NONE) DE++;
 $7B4A JR Z,$7B4D    ;
 $7B4C INC DE        ; }
*$7B4D LD A,(HL)     ; {*DE = *HL & 0x1F;
 $7B4E AND $1F       ;
 $7B50 LD (DE),A     ; }
 $7B51 PUSH HL       ; PUSH HL
 $7B52 LD A,($68A0)  ; A = room_index;
 $7B55 CP $00        ; {if (A == 0) <% // outdoors
 $7B57 JP NZ,$7B5F   ; }
 $7B5A CALL $A8A2    ;   supertile_plot_all();
 $7B5D JR $7B6B      ; %>
*$7B5F CALL $6A35    ; else <% setup_room();
 $7B62 CALL $6B42    ;   plot_interior_tiles();
 $7B65 CALL $AB6B    ;   choose_game_window_attributes();
 $7B68 CALL $A15F    ;   set_game_window_attributes(); %>
*$7B6B POP HL        ; POP HL
 $7B6C BIT 7,(HL)    ; {if ((*HL & itemstruct_ITEM_FLAG_HELD) == 0) <%
 $7B6E JR NZ,$7B77   ; }
 $7B70 SET 7,(HL)    ;   *HL |= itemstruct_ITEM_FLAG_HELD;
 $7B72 PUSH HL       ;   PUSH HL
 $7B73 CALL $A0F2    ;   increase_morale_by_5_score_by_5();
 $7B76 POP HL        ;   POP HL %>
*$7B77 XOR A         ; A = 0;
 $7B78 INC HL        ; HL++;
 $7B79 LD (HL),A     ; *HL = A;
 $7B7A INC HL        ; {HL += 4;
 $7B7B INC HL        ;
 $7B7C INC HL        ;
 $7B7D INC HL        ; }
 $7B7E LD (HL),A     ; {*HL++ = A;
 $7B7F INC HL        ; }
 $7B80 LD (HL),A     ; *HL = A;
 $7B81 CALL $7C33    ; draw_all_items();
 $7B84 LD BC,$3030   ; {play_speaker(sound_PICK_UP_ITEM);
 $7B87 CALL $A11D    ; }
 $7B8A RET           ; return;

; drop_item
;
; Used by the routine at #R$7AC9.
; .
; Drop the first item.
c$7B8B LD A,($8215)  ; A = items_held[0];
 $7B8E CP $FF        ; {if (A == item_NONE) return;
 $7B90 RET Z         ; }
 $7B91 CP $06        ; {if (A == item_UNIFORM) $8015 = sprite_prisoner_tl_4;
 $7B93 JP NZ,$7B9C   ;
 $7B96 LD HL,$CE2E   ;
 $7B99 LD ($8015),HL ; }
*$7B9C PUSH AF       ; PUSH AF
; Shuffle items down.
 $7B9D LD HL,$8216   ; HL = &items_held[1];  // item slot B
 $7BA0 LD A,(HL)     ; A = *HL;
 $7BA1 LD (HL),$FF   ; {*HL-- = item_NONE;
 $7BA3 DEC HL        ; }
 $7BA4 LD (HL),A     ; *HL = A;
 $7BA5 CALL $7C33    ; draw_all_items();
 $7BA8 LD BC,$3040   ; {play_speaker(sound_DROP_ITEM);
 $7BAB CALL $A11D    ; }
 $7BAE CALL $AB6B    ; choose_game_window_attributes();
 $7BB1 CALL $A15F    ; set_game_window_attributes();
 $7BB4 POP AF        ; POP AF

; drop_item_A
;
; Used by the routine at #R$B387.
;
; I:A Item.
c$7BB5 CALL $7C26    ; HL = item_to_itemstruct(A);
 $7BB8 INC HL        ; HL++;
 $7BB9 LD A,($68A0)  ; A = room_index;
 $7BBC LD (HL),A     ; *HL = A; // set object's room index
 $7BBD AND A         ; {if (A == 0) <%
 $7BBE JR NZ,$7BE4   ; }
; Outdoors.
 $7BC0 INC HL        ;   HL++;    // -> .y
 $7BC1 PUSH HL       ;   PUSH HL
; HL is incremented here but then immediately overwritten by $7BC5.
 $7BC2 INC HL        ; {  HL += 2; // -> .unk1
 $7BC3 INC HL        ; }
 $7BC4 POP DE        ;   POP DE
 $7BC5 LD HL,$800F   ;   HL = $800F;
 $7BC8 CALL $E542    ;   pos_to_tinypos(HL,DE);
 $7BCB DEC DE        ;   DE--;
 $7BCC LD A,$00      ; {  *DE = 0; // ->vo ?
 $7BCE LD (DE),A     ; }
 $7BCF EX DE,HL      ;   EX DE,HL
; This entry point is used by the routine at #R$CD31.
*$7BD0 DEC HL        ; {  HL--; C = (0x40 + HL[1] - HL[0]) * 2; //
 $7BD1 LD A,$40      ; itemstruct.x, itemstruct.y;
 $7BD3 ADD A,(HL)    ;
 $7BD4 DEC HL        ;
 $7BD5 SUB (HL)      ;
 $7BD6 ADD A,A       ;
 $7BD7 LD C,A        ; }
 $7BD8 XOR A         ; {  B = 0 - HL[0] - HL[1] - HL[2]; HL += 3; //
 $7BD9 SUB (HL)      ; itemstruct.y, .x, .vo
 $7BDA INC HL        ;
 $7BDB SUB (HL)      ;
 $7BDC INC HL        ;
 $7BDD SUB (HL)      ;
 $7BDE LD B,A        ;
 $7BDF INC HL        ; }
 $7BE0 LD (HL),C     ; {  *HL++ = C;
 $7BE1 INC HL        ; }
 $7BE2 LD (HL),B     ;   *HL = B;
 $7BE3 RET           ;   return; %>
; Indoors.
*$7BE4 INC HL        ; else <% HL++;
 $7BE5 LD DE,$800F   ;   DE = $800F; // position on y axis
 $7BE8 LD A,(DE)     ; {  *HL++ = *DE;
 $7BE9 LD (HL),A     ;
 $7BEA INC HL        ; }
 $7BEB INC E         ; {  DE += 2; // position on x axis
 $7BEC INC E         ; }
 $7BED LD A,(DE)     ; {  *HL++ = *DE;
 $7BEE LD (HL),A     ;
 $7BEF INC HL        ; }
 $7BF0 LD (HL),$05   ;   *HL = 5;
; This entry point is used by the routine at #R$CD31.
*$7BF2 DEC HL        ;   HL--;
 $7BF3 LD D,$02      ; {  DE = 0x0200 + HL[0];  // 512 / 8 = 64
 $7BF5 LD E,(HL)     ; }
 $7BF6 EX DE,HL      ;   EX DE,HL
 $7BF7 DEC DE        ;   DE--;
 $7BF8 LD A,(DE)     ; {  HL = (HL - DE[0]) * 2;
 $7BF9 LD C,A        ;
 $7BFA LD B,$00      ;
 $7BFC AND A         ;
 $7BFD SBC HL,BC     ;
 $7BFF ADD HL,HL     ; }
 $7C00 LD C,H        ; {  A = divide_by_8_with_rounding(H,L);
 $7C01 LD A,L        ;
 $7C02 CALL $E550    ; }
 $7C05 EX AF,AF'     ;   -
 $7C06 LD HL,$0800   ; {  HL = 0x0800 - DE[0] - DE[1] - DE[2]; DE += 2;
 $7C09 LD B,$00      ;
 $7C0B LD A,(DE)     ;
 $7C0C LD C,A        ;
 $7C0D AND A         ;
 $7C0E SBC HL,BC     ;
 $7C10 INC DE        ;
 $7C11 LD A,(DE)     ;
 $7C12 LD C,A        ;
 $7C13 SBC HL,BC     ;
 $7C15 INC DE        ;
 $7C16 LD A,(DE)     ;
 $7C17 LD C,A        ;
 $7C18 SBC HL,BC     ; }
 $7C1A LD C,H        ; {  Adash = divide_by_8_with_rounding(H,L);
 $7C1B LD A,L        ;
 $7C1C CALL $E550    ; }
 $7C1F INC DE        ; {  DE += 2;
 $7C20 INC DE        ; }
 $7C21 LD (DE),A     ; {  *DE-- = Adash;
 $7C22 DEC DE        ; }
 $7C23 EX AF,AF'     ;   -
 $7C24 LD (DE),A     ;   *DE = A;
 $7C25 RET           ;   return; %>

; item_to_itemstruct
;
; Used by the routines at #R$7BB5, #R$A228 and #R$CD31.
;
; I:A  Item index.
; O:HL Pointer to itemstruct.
c$7C26 LD L,A        ; {return &item_structs[A]; // $76C8 + A * 7
 $7C27 ADD A,A       ;
 $7C28 ADD A,A       ;
 $7C29 ADD A,A       ;
 $7C2A SUB L         ;
 $7C2B LD HL,$76C8   ;
 $7C2E ADD A,L       ;
 $7C2F LD L,A        ;
 $7C30 RET NC        ;
 $7C31 INC H         ;
 $7C32 RET           ; }

; draw_all_items
;
; Used by the routines at #R$7B36, #R$7B8B, #R$B107, #R$B387, #R$B3C4, #R$B75A
; and #R$CB98.
c$7C33 LD HL,$5087   ; {draw_item(screenaddr_item1, items_held[0]);
 $7C36 LD A,($8215)  ;
 $7C39 CALL $7C46    ; }
 $7C3C LD HL,$508A   ; {draw_item(screenaddr_item2, items_held[1]);
 $7C3F LD A,($8216)  ;
 $7C42 CALL $7C46    ; }
 $7C45 RET           ; return;

; draw_item
;
; Used by the routine at #R$7C33.
;
; I:A  Item index.
; I:HL Screen address of item.
c$7C46 PUSH HL       ; PUSH HL
 $7C47 EX AF,AF'     ; EX AF,AF'
; Wipe item.
 $7C48 LD B,$02      ; B = 2; // 16 wide
 $7C4A LD C,$10      ; C = 16;
 $7C4C CALL $7CD4    ; screen_wipe();
 $7C4F POP HL        ; POP HL
 $7C50 EX AF,AF'     ; EX AF,AF'
 $7C51 CP $FF        ; {if (A == item_NONE) return;
 $7C53 RET Z         ; }
; Set screen attributes.
 $7C54 PUSH HL       ; PUSH HL
 $7C55 LD H,$5A      ; HL = (HL & ~0xFF00) | 0x5A00; // point to screen
                     ; attributes
 $7C57 PUSH AF       ; PUSH AF
 $7C58 LD BC,$DD69   ; {A = item_attributes[A];
 $7C5B ADD A,C       ;
 $7C5C LD C,A        ;
 $7C5D JR NC,$7C60   ;
 $7C5F INC B         ;
*$7C60 LD A,(BC)     ; }
 $7C61 LD (HL),A     ; {*HL++ = A;
 $7C62 INC L         ; }
 $7C63 LD (HL),A     ; {*HL-- = A;
 $7C64 DEC L         ; }
 $7C65 SET 5,L       ; HL |= 1<<5; // move to next attribute row
 $7C67 LD (HL),A     ; {*HL++ = A;
 $7C68 INC L         ; }
 $7C69 LD (HL),A     ; *HL = A;
 $7C6A POP AF        ; POP AF
; Plot bitmap.
 $7C6B ADD A,A       ; {HL = &item_definitions[A]; // elements are six bytes
 $7C6C LD C,A        ; wide
 $7C6D ADD A,A       ;
 $7C6E ADD A,C       ;
 $7C6F LD C,A        ;
 $7C70 LD B,$00      ;
 $7C72 LD HL,$DD7D   ;
 $7C75 ADD HL,BC     ; }
 $7C76 LD B,(HL)     ; {B = *HL++;
 $7C77 INC HL        ; }
 $7C78 LD C,(HL)     ; {C = *HL++;
 $7C79 INC HL        ; }
 $7C7A LD E,(HL)     ; {E = *HL++;
 $7C7B INC HL        ; }
 $7C7C LD D,(HL)     ; D = *HL;
 $7C7D POP HL        ; POP HL
 $7C7E CALL $7CBE    ; plot_bitmap();
 $7C81 RET           ; return;

; find_nearby_item
;
; Used by the routine at #R$7B36.
; .
; Returns an item within range of the player.
; .
; Select a pick up radius.
;
; O:AF Z set if item found.
; O:HL If found, pointer to item.
c$7C82 LD C,$01      ; C = 1; // outdoors
 $7C84 LD A,($68A0)  ; {if (room_index) C = 6; // indoors
 $7C87 AND A         ;
 $7C88 JR Z,$7C8C    ;
 $7C8A LD C,$06      ; }
*$7C8C LD B,$10      ; B = item__LIMIT; // 16 iterations
 $7C8E LD HL,$76C9   ; HL = &item_structs[0].room;
*$7C91 BIT 7,(HL)    ; {do <% if (*HL & itemstruct_ROOM_FLAG_ITEM_NEARBY) <%
 $7C93 JR Z,$7CB2    ; }
 $7C95 PUSH BC       ;     PUSH BC
 $7C96 PUSH HL       ;     PUSH HL
 $7C97 INC HL        ;     HL++; // itemstruct.y
 $7C98 LD DE,$81B8   ;     DE = &player_map_position.y; // this is probably 'Y'
                     ; in this sense, but i'd need to rename all others to
                     ; comply
 $7C9B LD B,$02      ;     B = 2; // 2 iterations
; Range check.
*$7C9D LD A,(DE)     ; {    do <% A = *DE++; // get player map position
 $7C9E SUB C         ; }
 $7C9F CP (HL)       ; {      if (A - C >= *HL || A + C < *HL) goto popnext;
 $7CA0 JR NC,$7CB0   ;
 $7CA2 ADD A,C       ;
 $7CA3 ADD A,C       ;
 $7CA4 CP (HL)       ;
 $7CA5 JR C,$7CB0    ; }
 $7CA7 INC HL        ; {      HL++;
 $7CA8 INC DE        ; }
 $7CA9 DJNZ $7C9D    ;     %> while (--B);
 $7CAB POP HL        ;     POP HL
 $7CAC DEC HL        ;     HL--; // compensate for overshoot
 $7CAD POP BC        ;     POP BC
 $7CAE XOR A         ;     A = 0; // set Z (found)
; The next instruction is written as RET Z but there's no need for it to be
; conditional.
 $7CAF RET Z         ;     return;
*$7CB0 POP HL        ;     popnext: POP HL
 $7CB1 POP BC        ;     POP BC %>
*$7CB2 LD A,$07      ; {  HL += 7; // stride
 $7CB4 ADD A,L       ;
 $7CB5 LD L,A        ;
 $7CB6 JR NC,$7CB9   ;
 $7CB8 INC H         ; }
*$7CB9 DJNZ $7C91    ; %> while (--B);
 $7CBB OR $01        ; A |= 1; // set NZ (not found)
 $7CBD RET           ; return;

; plot_bitmap
;
; Used by the routines at #R$7C46, #R$A035 and #R$A09E.
; .
; Straight bitmap plot without masking.
;
; I:BC Dimensions (w x h, where w is in bytes).
; I:DE Source address.
; I:HL Destination address.
c$7CBE LD A,B        ; A = B;
 $7CBF LD ($7CC3),A  ; (loopcounter + 1) = A;   // self modifying
*$7CC2 LD B,$02      ; do <% loopcounter: B = 3; // modified
 $7CC4 PUSH HL       ;   dst = HL;
*$7CC5 LD A,(DE)     ; {  do <% *dst++ = *DE++; %> while (--B);
 $7CC6 LD (HL),A     ;
 $7CC7 INC L         ;
 $7CC8 INC DE        ;
 $7CC9 DJNZ $7CC5    ;
 $7CCB POP HL        ; }
 $7CCC CALL $7CE9    ;   get_next_scanline();
 $7CCF DEC C         ; {%> while (--C);
 $7CD0 JP NZ,$7CC2   ; }
 $7CD3 RET           ; return;

; screen_wipe
;
; Used by the routine at #R$7C46.
; .
; Wipe the screen.
;
; I:B  Number of bytes to set.
; I:C  Number of scanlines.
; I:HL Destination address.
c$7CD4 LD A,B        ; A = B;
 $7CD5 LD ($7CD9),A  ; (loopcounter + 1) = A;   // self modifying
*$7CD8 LD B,$02      ; do <% loopcounter: B = 2; // modified
 $7CDA PUSH HL       ;   dst = HL;
*$7CDB LD (HL),$00   ; {  do <% *dst++ = 0; %> while (--B);
 $7CDD INC L         ;
 $7CDE DJNZ $7CDB    ;
 $7CE0 POP HL        ; }
 $7CE1 CALL $7CE9    ;   get_next_scanline();
 $7CE4 DEC C         ; {%> while (--C);
 $7CE5 JP NZ,$7CD8   ; }
 $7CE8 RET           ; return;

; get_next_scanline
;
; Used by the routines at #R$7CBE, #R$7CD4, #R$A035 and #R$F206.
; .
; Given a screen address, returns the same position on the next scanline.
;
; I:HL Original screen address.
; O:HL Updated screen address.
c$7CE9 INC H         ; HL += 256;
 $7CEA LD A,H        ; {if ((H & 7) != 0) return;
 $7CEB AND $07       ;
 $7CED RET NZ        ; }
 $7CEE PUSH DE       ; PUSH DE
 $7CEF LD DE,$F820   ; DE = 0xF820;
 $7CF2 LD A,L        ; {if (L >= 0xE0) D = 0xFF;
 $7CF3 CP $E0        ;
 $7CF5 JR C,$7CF9    ;
 $7CF7 LD D,$FF      ; }
*$7CF9 ADD HL,DE     ; HL += DE;
 $7CFA POP DE        ; POP DE
 $7CFB RET           ; return;

; message_queue_stuff
;
; Queue of message indexes. (Pairs of bytes + terminator).
b$7CFC DEFB $FF,$FF,$00,$00,$00,$00,$00,$00 ; {message_queue
 $7D04 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7D0C DEFB $00,$00,$FF                     ; }
; Decrementing counter. Shows next message when it hits zero.
 $7D0F DEFB $00                             ; message_display_counter
; Index into the message we're displaying or wiping.
; .
; If 128 then next_message. If > 128 then wipe message. Else display.
 $7D10 DEFB $80                             ; message_display_index
; Pointer to the head of the message queue.
 $7D11 DEFW $7CFE                           ; message_queue_pointer
; Pointer to the next message character to be displayed.
 $7D13 DEFW $0000                           ; current_message_character

; queue_message_for_display
;
; Used by the routines at #R$9DCF, #R$9E98, #R$A1D3, #R$A1E7, #R$A1F0, #R$A1F9,
; #R$A206, #R$A219, #R$A228, #R$B107, #R$B1D4, #R$B387, #R$B417, #R$B495,
; #R$B4B8, #R$CB98, #R$CD31 and #R$EF9A.
; .
; Add the specified message to the queue of pending messages.
; .
; The use of C here is puzzling. One routine (check_morale) explicitly sets it
; to zero before calling, but others do not and we receive whatever was in C
; previously.
;
; I:B message_* index.
; I:C Possibly a second message index.
c$7D15 LD HL,($7D11) ; {if (*(HL = message_queue_pointer) == message_NONE)
 $7D18 LD A,$FF      ; return;
 $7D1A CP (HL)       ;
 $7D1B RET Z         ; }
; Are we already about to show this message?
 $7D1C DEC HL        ; {HL -= 2;
 $7D1D DEC HL        ; }
 $7D1E LD A,(HL)     ; {if (*HL++ == B && *HL++ == C) return;
 $7D1F CP B          ;
 $7D20 INC HL        ;
 $7D21 JR NZ,$7D26   ;
 $7D23 LD A,(HL)     ;
 $7D24 CP C          ;
 $7D25 RET Z         ; }
; Add it to the queue.
*$7D26 INC HL        ; {*HL++ = B; *HL++ = C;
 $7D27 LD (HL),B     ;
 $7D28 INC HL        ;
 $7D29 LD (HL),C     ;
 $7D2A INC HL        ; }
 $7D2B LD ($7D11),HL ; message_queue_pointer = HL;
 $7D2E RET           ; return;

; plot_glyph
;
; Used by the routines at #R$7D48, #R$A10B, #R$A5BF and #R$F350.
;
; I:HL Pointer to glyph.
; I:DE Pointer to destination.
; O:HL Preserved.
; O:DE Points to next character.
c$7D2F LD A,(HL)     ; A = *HL;
; This entry point is used by the routine at #R$7D87.
*$7D30 PUSH HL       ; plot_single_glyph: ...
 $7D31 LD L,A        ; {HL = A * 8;
 $7D32 LD H,$00      ;
 $7D34 ADD HL,HL     ;
 $7D35 ADD HL,HL     ;
 $7D36 ADD HL,HL     ; }
 $7D37 LD BC,$A69E   ; BC = bitmap_font;
 $7D3A ADD HL,BC     ; {HL += BC;
 $7D3B PUSH DE       ; }
 $7D3C LD B,$08      ; B = 8; // 8 iterations
*$7D3E LD A,(HL)     ; {do <% *DE = *HL;
 $7D3F LD (DE),A     ; }
 $7D40 INC D         ; D++; // i.e. DE += 256;
 $7D41 INC HL        ; HL++;
 $7D42 DJNZ $7D3E    ; %> while (--B);
 $7D44 POP DE        ; {DE++;
 $7D45 INC DE        ;
 $7D46 POP HL        ; }
 $7D47 RET           ; return;

; message_display
;
; Used by the routine at #R$9D78.
c$7D48 LD A,($7D0F)  ; {if (message_display_counter > 0) <%
 $7D4B AND A         ;
 $7D4C JP Z,$7D54    ;
 $7D4F DEC A         ; }
 $7D50 LD ($7D0F),A  ;   message_display_counter--;
 $7D53 RET           ;   return; %>
*$7D54 LD A,($7D10)  ; A = message_display_index;
 $7D57 CP $80        ; {if (A == 128) goto next_message; // exit via
 $7D59 JR Z,$7D99    ; }
 $7D5B JR NC,$7D87   ; else if (A > 128) goto wipe_message; // exit via
 $7D5D LD HL,($7D13) ; else <% HL = current_message_character;
 $7D60 LD DE,$50E0   ; {  DE = screen_text_start_address + A;
 $7D63 OR E          ;
 $7D64 LD E,A        ; }
 $7D65 CALL $7D2F    ;   plot_glyph();
 $7D68 LD A,E        ; {  message_display_index = E & 31;
 $7D69 AND $1F       ;
 $7D6B LD ($7D10),A  ; }
 $7D6E INC HL        ; {  A = *++HL;
 $7D6F LD A,(HL)     ; }
 $7D70 CP $FF        ; {  if (A != 255) goto not_eol;
 $7D72 JP NZ,$7D83   ; }
 $7D75 LD A,$1F      ; {  message_display_counter = 31; // leave the message
 $7D77 LD ($7D0F),A  ; for 31 turns}
 $7D7A LD A,($7D10)  ; {  message_display_index |= 128; // then wipe it
 $7D7D OR $80        ;
 $7D7F LD ($7D10),A  ; }
 $7D82 RET           ;   return;
*$7D83 LD ($7D13),HL ;   not_eol: current_message_character = HL;
 $7D86 RET           ;   return; %>

; wipe_message
;
; Used by the routine at #R$7D48.
c$7D87 LD A,($7D10)  ; A = message_display_index;
 $7D8A DEC A         ; {message_display_index = --A;
 $7D8B LD ($7D10),A  ; }
 $7D8E LD DE,$50E0   ; {DE = screen_text_start_address + A;
 $7D91 OR E          ;
 $7D92 LD E,A        ; }
 $7D93 LD A,$23      ; {plot_single_glyph(35); // plot a SPACE character
 $7D95 CALL $7D30    ; }
 $7D98 RET           ; return;

; next_message
;
; Used by the routine at #R$7D48.
; .
; Looks like message_queue is poked with the index of the message to display...
c$7D99 LD HL,($7D11) ; HL = message_queue_pointer;
 $7D9C LD DE,$7CFE   ; DE = &message_queue[0];
 $7D9F LD A,L        ; {if (L == E) return; // cheap test -- no more messages?
 $7DA0 CP E          ;
 $7DA1 RET Z         ;
 $7DA2 EX DE,HL      ; }
 $7DA3 LD A,(HL)     ; {A = *DE++;
 $7DA4 INC HL        ; }
 $7DA5 LD C,(HL)     ; C = *DE; // C is loaded here but not used. This could be
                     ; a hangover from 16-bit message IDs.
 $7DA6 ADD A,A       ; {HL = messages_table[A];
 $7DA7 LD HL,$7DCD   ;
 $7DAA LD E,A        ;
 $7DAB LD D,$00      ;
 $7DAD ADD HL,DE     ;
 $7DAE LD E,(HL)     ;
 $7DAF INC HL        ;
 $7DB0 LD D,(HL)     ;
 $7DB1 EX DE,HL      ; }
 $7DB2 LD ($7D13),HL ; current_message_character = HL;
 $7DB5 LD DE,$7CFC   ; {memmove(message_queue, message_queue + 2, 16); // drop
 $7DB8 LD HL,$7CFE   ; first element
 $7DBB LD BC,$0010   ;
 $7DBE LDIR          ; }
 $7DC0 LD HL,($7D11) ; {message_queue_pointer -= 2;
 $7DC3 DEC HL        ;
 $7DC4 DEC HL        ;
 $7DC5 LD ($7D11),HL ; }
 $7DC8 XOR A         ; {message_display_index = 0;
 $7DC9 LD ($7D10),A  ; }
 $7DCC RET           ; return;

; messages_table
;
; Non-ASCII: encoded to match the font; FF terminated.
t$7DCD DEFW $7DF5    ; {Array of pointers to messages.
 $7DCF DEFW $7E06
 $7DD1 DEFW $7E16
 $7DD3 DEFW $7E25
 $7DD5 DEFW $7E33
 $7DD7 DEFW $7E40
 $7DD9 DEFW $7E53
 $7DDB DEFW $7E5E
 $7DDD DEFW $7E6C
 $7DDF DEFW $7E76
 $7DE1 DEFW $7E87
 $7DE3 DEFW $7E98
 $7DE5 DEFW $7EA9
 $7DE7 DEFW $7EBA
 $7DE9 DEFW $7ECE
 $7DEB DEFW $7EDF
 $7DED DEFW $7EEE
 $7DEF DEFW $F026
 $7DF1 DEFW $F039
 $7DF3 DEFW $F04B    ; }
; "MISSED ROLL CALL"
 $7DF5 DEFB $16      ; {#CALL:decode_stringFF($7DF5)
 $7DF6 DEFB $12
 $7DF7 DEFB $1B
 $7DF8 DEFB $1B
 $7DF9 DEFB $0E
 $7DFA DEFB $0D
 $7DFB DEFM "#"
 $7DFC DEFB $1A
 $7DFD DEFB $00
 $7DFE DEFB $15
 $7DFF DEFB $15
 $7E00 DEFM "#"
 $7E01 DEFB $0C
 $7E02 DEFB $0A
 $7E03 DEFB $15
 $7E04 DEFB $15
 $7E05 DEFB $FF      ; }
; "TIME TO WAKE UP"
 $7E06 DEFB $1C      ; {#CALL:decode_stringFF($7E06)
 $7E07 DEFB $12
 $7E08 DEFB $16
 $7E09 DEFB $0E
 $7E0A DEFM "#"
 $7E0B DEFB $1C
 $7E0C DEFB $00
 $7E0D DEFM "#"
 $7E0E DEFB $1F
 $7E0F DEFB $0A
 $7E10 DEFB $14
 $7E11 DEFB $0E
 $7E12 DEFM "#"
 $7E13 DEFB $1D
 $7E14 DEFB $18
 $7E15 DEFB $FF      ; }
; "BREAKFAST TIME"
 $7E16 DEFB $0B      ; {#CALL:decode_stringFF($7E16)
 $7E17 DEFB $1A
 $7E18 DEFB $0E
 $7E19 DEFB $0A
 $7E1A DEFB $14
 $7E1B DEFB $0F
 $7E1C DEFB $0A
 $7E1D DEFB $1B
 $7E1E DEFB $1C
 $7E1F DEFM "#"
 $7E20 DEFB $1C
 $7E21 DEFB $12
 $7E22 DEFB $16
 $7E23 DEFB $0E
 $7E24 DEFB $FF      ; }
; "EXERCISE TIME"
 $7E25 DEFB $0E      ; {#CALL:decode_stringFF($7E25)
 $7E26 DEFM " "
 $7E27 DEFB $0E
 $7E28 DEFB $1A
 $7E29 DEFB $0C
 $7E2A DEFB $12
 $7E2B DEFB $1B
 $7E2C DEFB $0E
 $7E2D DEFM "#"
 $7E2E DEFB $1C
 $7E2F DEFB $12
 $7E30 DEFB $16
 $7E31 DEFB $0E
 $7E32 DEFB $FF      ; }
; "TIME FOR BED"
 $7E33 DEFB $1C      ; {#CALL:decode_stringFF($7E33)
 $7E34 DEFB $12
 $7E35 DEFB $16
 $7E36 DEFB $0E
 $7E37 DEFM "#"
 $7E38 DEFB $0F
 $7E39 DEFB $00
 $7E3A DEFB $1A
 $7E3B DEFM "#"
 $7E3C DEFB $0B
 $7E3D DEFB $0E
 $7E3E DEFB $0D
 $7E3F DEFB $FF      ; }
; "THE DOOR IS LOCKED"
 $7E40 DEFB $1C      ; {#CALL:decode_stringFF($7E40)
 $7E41 DEFB $11
 $7E42 DEFB $0E
 $7E43 DEFM "#"
 $7E44 DEFB $0D
 $7E45 DEFB $00
 $7E46 DEFB $00
 $7E47 DEFB $1A
 $7E48 DEFM "#"
 $7E49 DEFB $12
 $7E4A DEFB $1B
 $7E4B DEFM "#"
 $7E4C DEFB $15
 $7E4D DEFB $00
 $7E4E DEFB $0C
 $7E4F DEFB $14
 $7E50 DEFB $0E
 $7E51 DEFB $0D
 $7E52 DEFB $FF      ; }
; "IT IS OPEN"
 $7E53 DEFB $12      ; {#CALL:decode_stringFF($7E53)
 $7E54 DEFB $1C
 $7E55 DEFM "#"
 $7E56 DEFB $12
 $7E57 DEFB $1B
 $7E58 DEFM "#"
 $7E59 DEFB $00
 $7E5A DEFB $18
 $7E5B DEFB $0E
 $7E5C DEFB $17
 $7E5D DEFB $FF      ; }
; "INCORRECT KEY"
 $7E5E DEFB $12      ; {#CALL:decode_stringFF($7E5E)
 $7E5F DEFB $17
 $7E60 DEFB $0C
 $7E61 DEFB $00
 $7E62 DEFB $1A
 $7E63 DEFB $1A
 $7E64 DEFB $0E
 $7E65 DEFB $0C
 $7E66 DEFB $1C
 $7E67 DEFM "#"
 $7E68 DEFB $14
 $7E69 DEFB $0E
 $7E6A DEFM "!"
 $7E6B DEFB $FF      ; }
; "ROLL CALL"
 $7E6C DEFB $1A      ; {#CALL:decode_stringFF($7E6C)
 $7E6D DEFB $00
 $7E6E DEFB $15
 $7E6F DEFB $15
 $7E70 DEFM "#"
 $7E71 DEFB $0C
 $7E72 DEFB $0A
 $7E73 DEFB $15
 $7E74 DEFB $15
 $7E75 DEFB $FF      ; }
; "RED CROSS PARCEL"
 $7E76 DEFB $1A      ; {#CALL:decode_stringFF($7E76)
 $7E77 DEFB $0E
 $7E78 DEFB $0D
 $7E79 DEFM "#"
 $7E7A DEFB $0C
 $7E7B DEFB $1A
 $7E7C DEFB $00
 $7E7D DEFB $1B
 $7E7E DEFB $1B
 $7E7F DEFM "#"
 $7E80 DEFB $18
 $7E81 DEFB $0A
 $7E82 DEFB $1A
 $7E83 DEFB $0C
 $7E84 DEFB $0E
 $7E85 DEFB $15
 $7E86 DEFB $FF      ; }
; "PICKING THE LOCK"
 $7E87 DEFB $18      ; {#CALL:decode_stringFF($7E87)
 $7E88 DEFB $12
 $7E89 DEFB $0C
 $7E8A DEFB $14
 $7E8B DEFB $12
 $7E8C DEFB $17
 $7E8D DEFB $10
 $7E8E DEFM "#"
 $7E8F DEFB $1C
 $7E90 DEFB $11
 $7E91 DEFB $0E
 $7E92 DEFM "#"
 $7E93 DEFB $15
 $7E94 DEFB $00
 $7E95 DEFB $0C
 $7E96 DEFB $14
 $7E97 DEFB $FF      ; }
; "CUTTING THE WIRE"
 $7E98 DEFB $0C      ; {#CALL:decode_stringFF($7E98)
 $7E99 DEFB $1D
 $7E9A DEFB $1C
 $7E9B DEFB $1C
 $7E9C DEFB $12
 $7E9D DEFB $17
 $7E9E DEFB $10
 $7E9F DEFM "#"
 $7EA0 DEFB $1C
 $7EA1 DEFB $11
 $7EA2 DEFB $0E
 $7EA3 DEFM "#"
 $7EA4 DEFB $1F
 $7EA5 DEFB $12
 $7EA6 DEFB $1A
 $7EA7 DEFB $0E
 $7EA8 DEFB $FF      ; }
; "YOU OPEN THE BOX"
 $7EA9 DEFM "!"      ; {#CALL:decode_stringFF($7EA9)
 $7EAA DEFB $00
 $7EAB DEFB $1D
 $7EAC DEFM "#"
 $7EAD DEFB $00
 $7EAE DEFB $18
 $7EAF DEFB $0E
 $7EB0 DEFB $17
 $7EB1 DEFM "#"
 $7EB2 DEFB $1C
 $7EB3 DEFB $11
 $7EB4 DEFB $0E
 $7EB5 DEFM "#"
 $7EB6 DEFB $0B
 $7EB7 DEFB $00
 $7EB8 DEFM " "
 $7EB9 DEFB $FF      ; }
; "YOU ARE IN SOLITARY"
 $7EBA DEFM "!"      ; {#CALL:decode_stringFF($7EBA)
 $7EBB DEFB $00
 $7EBC DEFB $1D
 $7EBD DEFM "#"
 $7EBE DEFB $0A
 $7EBF DEFB $1A
 $7EC0 DEFB $0E
 $7EC1 DEFM "#"
 $7EC2 DEFB $12
 $7EC3 DEFB $17
 $7EC4 DEFM "#"
 $7EC5 DEFB $1B
 $7EC6 DEFB $00
 $7EC7 DEFB $15
 $7EC8 DEFB $12
 $7EC9 DEFB $1C
 $7ECA DEFB $0A
 $7ECB DEFB $1A
 $7ECC DEFM "!"
 $7ECD DEFB $FF      ; }
; "WAIT FOR RELEASE"
 $7ECE DEFB $1F      ; {#CALL:decode_stringFF($7ECE)
 $7ECF DEFB $0A
 $7ED0 DEFB $12
 $7ED1 DEFB $1C
 $7ED2 DEFM "#"
 $7ED3 DEFB $0F
 $7ED4 DEFB $00
 $7ED5 DEFB $1A
 $7ED6 DEFM "#"
 $7ED7 DEFB $1A
 $7ED8 DEFB $0E
 $7ED9 DEFB $15
 $7EDA DEFB $0E
 $7EDB DEFB $0A
 $7EDC DEFB $1B
 $7EDD DEFB $0E
 $7EDE DEFB $FF      ; }
; "MORALE IS ZERO"
 $7EDF DEFB $16      ; {#CALL:decode_stringFF($7EDF)
 $7EE0 DEFB $00
 $7EE1 DEFB $1A
 $7EE2 DEFB $0A
 $7EE3 DEFB $15
 $7EE4 DEFB $0E
 $7EE5 DEFM "#"
 $7EE6 DEFB $12
 $7EE7 DEFB $1B
 $7EE8 DEFM "#\""
 $7EEA DEFB $0E
 $7EEB DEFB $1A
 $7EEC DEFB $00
 $7EED DEFB $FF      ; }
; "ITEM DISCOVERED"
 $7EEE DEFB $12      ; {#CALL:decode_stringFF($7EEE)
 $7EEF DEFB $1C
 $7EF0 DEFB $0E
 $7EF1 DEFB $16
 $7EF2 DEFM "#"
 $7EF3 DEFB $0D
 $7EF4 DEFB $12
 $7EF5 DEFB $1B
 $7EF6 DEFB $0C
 $7EF7 DEFB $00
 $7EF8 DEFB $1E
 $7EF9 DEFB $0E
 $7EFA DEFB $1A
 $7EFB DEFB $0E
 $7EFC DEFB $0D
 $7EFD DEFB $FF
 $7EFE DEFB $00
 $7EFF DEFB $00      ; }

; static_tiles
;
; These tiles are used to draw fixed screen elements such as medals.
; .
; 9 bytes each: 8x8 bitmap + 1 byte attribute. 75 tiles.
; .
; #UDGARRAY75,6,1;$7F00,7;$7F09;$7F12;$7F1B;$7F24;$7F2D;$7F36;$7F3F;$7F48;$7F51;$7F5A;$7F63;$7F6C;$7F75;$7F7E;$7F87;$7F90;$7F99;$7FA2;$7FAB;$7FB4;$7FBD;$7FC6;$7FCF;$7FD8,7;$7FE1,7;$7FEA,7;$7FF3,7;$7FFC,4;$8005,4;$800E,4;$8017,4;$8020,3;$8029,7;$8032,3;$803B,3;$8044,3;$804D,3;$8056,3;$805F,3;$8068,3;$8071,3;$807A,3;$8083,3;$808C,7;$8095,3;$809E,3;$80A7,3;$80B0,3;$80B9,7;$80C2,7;$80CB;$80D4;$80DD;$80E6;$80EF,5;$80F8,5;$8101,4;$810A,4;$8113,4;$811C,7;$8125,7;$812E;$8137;$8140;$8149;$8152,5;$815B,5;$8164,5;$816D,4;$8176;$817F;$8188;$8191;$819A(static-tiles)
b$7F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {blank
 $7F08 DEFB $07                             ; }
 $7F09 DEFB $00,$00,$00,$00,$03,$04,$09,$0C ; {speaker_tl_tl
 $7F11 DEFB $06                             ; }
 $7F12 DEFB $00,$00,$00,$00,$E0,$50,$10,$58 ; {speaker_tl_tr
 $7F1A DEFB $06                             ; }
 $7F1B DEFB $08,$0C,$09,$07,$01,$00,$00,$00 ; {speaker_tl_bl
 $7F23 DEFB $06                             ; }
 $7F24 DEFB $98,$3C,$7C,$FB,$FC,$6F,$17,$16 ; {speaker_tl_br
 $7F2C DEFB $06                             ; }
 $7F2D DEFB $00,$00,$00,$00,$07,$0A,$08,$1C ; {speaker_tr_tl
 $7F35 DEFB $06                             ; }
 $7F36 DEFB $00,$00,$00,$00,$C0,$A0,$10,$50 ; {speaker_tr_tr
 $7F3E DEFB $06                             ; }
 $7F3F DEFB $19,$3C,$3E,$DF,$3F,$F6,$E8,$68 ; {speaker_tr_bl
 $7F47 DEFB $06                             ; }
 $7F48 DEFB $10,$B0,$10,$E0,$80,$00,$00,$00 ; {speaker_tr_br
 $7F50 DEFB $06                             ; }
 $7F51 DEFB $68,$E8,$F6,$3F,$DF,$3E,$3C,$18 ; {speaker_br_tl
 $7F59 DEFB $06                             ; }
 $7F5A DEFB $00,$00,$00,$80,$E0,$90,$30,$90 ; {speaker_br_tr
 $7F62 DEFB $06                             ; }
 $7F63 DEFB $19,$08,$0A,$07,$00,$00,$00,$00 ; {speaker_br_bl
 $7F6B DEFB $06                             ; }
 $7F6C DEFB $30,$10,$20,$C0,$00,$00,$00,$00 ; {speaker_br_br
 $7F74 DEFB $06                             ; }
 $7F75 DEFB $00,$00,$00,$01,$07,$08,$0C,$09 ; {speaker_bl_tl
 $7F7D DEFB $06                             ; }
 $7F7E DEFB $16,$17,$6F,$FC,$FB,$7C,$3C,$18 ; {speaker_bl_tr
 $7F86 DEFB $06                             ; }
 $7F87 DEFB $0C,$08,$05,$03,$00,$00,$00,$00 ; {speaker_bl_bl
 $7F8F DEFB $06                             ; }
 $7F90 DEFB $98,$10,$10,$E0,$00,$00,$00,$00 ; {speaker_bl_br
 $7F98 DEFB $06                             ; }
 $7F99 DEFB $10,$10,$91,$42,$5A,$24,$18,$24 ; {barbwire_v_top
 $7FA1 DEFB $06                             ; }
 $7FA2 DEFB $18,$24,$52,$52,$91,$10,$10,$10 ; {barbwire_v_bottom
 $7FAA DEFB $06                             ; }
 $7FAB DEFB $10,$0C,$02,$FD,$01,$02,$0C,$10 ; {barbwire_h_left
 $7FB3 DEFB $06                             ; }
 $7FB4 DEFB $04,$18,$A0,$57,$50,$A0,$18,$04 ; {barbwire_h_right
 $7FBC DEFB $06                             ; }
 $7FBD DEFB $02,$01,$00,$FF,$00,$00,$01,$02 ; {barbwire_h_wide_left
 $7FC5 DEFB $06                             ; }
 $7FC6 DEFB $00,$83,$54,$AA,$2A,$54,$83,$00 ; {barbwire_h_wide_middle
 $7FCE DEFB $06                             ; }
 $7FCF DEFB $80,$00,$00,$FF,$00,$00,$00,$80 ; {barbwire_h_wide_right
 $7FD7 DEFB $06                             ; }
 $7FD8 DEFB $00,$00,$00,$FE,$38,$38,$3E,$38 ; {flagpole_top
 $7FE0 DEFB $07                             ; }
 $7FE1 DEFB $3A,$3A,$3A,$3A,$3A,$3A,$3A,$3A ; {flagpole_middle
 $7FE9 DEFB $07                             ; }
 $7FEA DEFB $7C,$7C,$7C,$7C,$7C,$7C,$7C,$7C ; {flagpole_bottom
 $7FF2 DEFB $07                             ; }
 $7FF3 DEFB $7C,$7C,$7C,$7A,$B5,$74,$7A,$FB ; {flagpole_ground1
 $7FFB DEFB $07                             ; }
 $7FFC DEFB $00,$00,$10,$49,$49,$D5,$D4,$FD ; {flagpole_ground2
 $8004 DEFB $04                             ; }
 $8005 DEFB $00,$00,$00,$42,$A4,$2A,$5A,$BD ; {flagpole_ground3
 $800D DEFB $04                             ; }
 $800E DEFB $00,$00,$00,$00,$40,$80,$D0,$A6 ; {flagpole_ground4
 $8016 DEFB $04                             ; }
 $8017 DEFB $00,$00,$00,$00,$0A,$24,$55,$DB ; {flagpole_ground0
 $801F DEFB $04                             ; }
 $8020 DEFB $00,$00,$00,$00,$1F,$08,$06,$06 ; {medal_0_0
 $8028 DEFB $03                             ; }
 $8029 DEFB $00,$00,$00,$00,$FF,$00,$BA,$BA ; {medal_0_1/3/5/7/9
 $8031 DEFB $07                             ; }
 $8032 DEFB $00,$00,$00,$00,$FF,$30,$CE,$CE ; {medal_0_2
 $803A DEFB $03                             ; }
 $803B DEFB $00,$00,$00,$00,$FF,$18,$E6,$E6 ; {medal_0_4
 $8043 DEFB $03                             ; }
 $8044 DEFB $00,$00,$00,$00,$FF,$28,$C6,$C6 ; {medal_0_6
 $804C DEFB $03                             ; }
 $804D DEFB $00,$00,$00,$00,$F8,$10,$E0,$E0 ; {medal_0_8
 $8055 DEFB $03                             ; }
 $8056 DEFB $06,$06,$06,$06,$06,$06,$06,$06 ; {medal_1_0
 $805E DEFB $03                             ; }
 $805F DEFB $CE,$CE,$CE,$CE,$CE,$CE,$CE,$CE ; {medal_1_2
 $8067 DEFB $03                             ; }
 $8068 DEFB $E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6 ; {medal_1_4
 $8070 DEFB $03                             ; }
 $8071 DEFB $C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6 ; {medal_1_6
 $8079 DEFB $03                             ; }
 $807A DEFB $E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0 ; {medal_1_8
 $8082 DEFB $03                             ; }
 $8083 DEFB $06,$06,$06,$06,$02,$04,$07,$00 ; {medal_1_10
 $808B DEFB $03                             ; }
 $808C DEFB $00,$BA,$BA,$BA,$BA,$00,$FF,$10 ; {medal_2_0
 $8094 DEFB $07                             ; }
 $8095 DEFB $CE,$CE,$CE,$CE,$86,$48,$CF,$00 ; {medal_2_1/3/5/7/9
 $809D DEFB $03                             ; }
 $809E DEFB $E6,$E6,$E6,$E6,$C2,$24,$E7,$00 ; {medal_2_2
 $80A6 DEFB $03                             ; }
 $80A7 DEFB $C6,$C6,$C6,$C6,$82,$44,$C7,$00 ; {medal_2_4
 $80AF DEFB $03                             ; }
 $80B0 DEFB $E0,$E0,$E0,$E0,$C0,$20,$E0,$00 ; {medal_2_6
 $80B8 DEFB $03                             ; }
 $80B9 DEFB $03,$02,$02,$02,$02,$01,$02,$02 ; {medal_2_8
 $80C1 DEFB $07                             ; }
 $80C2 DEFB $EF,$38,$FE,$AA,$B2,$FF,$96,$A2 ; {medal_2_10
 $80CA DEFB $07                             ; }
 $80CB DEFB $80,$81,$83,$87,$86,$0E,$8E,$86 ; {medal_3_0
 $80D3 DEFB $06                             ; }
 $80D4 DEFB $7C,$FF,$C7,$11,$E0,$72,$5C,$A6 ; {medal_3_1
 $80DC DEFB $06                             ; }
 $80DD DEFB $00,$00,$81,$C1,$C3,$E3,$E3,$C1 ; {medal_3_2
 $80E5 DEFB $06                             ; }
 $80E6 DEFB $38,$FE,$C7,$AB,$6D,$01,$6D,$AB ; {medal_3_3
 $80EE DEFB $06                             ; }
 $80EF DEFB $00,$00,$00,$00,$8C,$8F,$8B,$08 ; {medal_3_4
 $80F7 DEFB $05                             ; }
 $80F8 DEFB $FE,$C6,$6C,$6C,$28,$39,$D7,$6C ; {medal_3_5
 $8100 DEFB $05                             ; }
 $8101 DEFB $00,$00,$00,$01,$61,$E6,$A6,$26 ; {medal_3_6
 $8109 DEFB $04                             ; }
 $810A DEFB $38,$38,$C6,$BB,$45,$BA,$BA,$BA ; {medal_3_7
 $8112 DEFB $04                             ; }
 $8113 DEFB $00,$00,$00,$00,$00,$C0,$C0,$C0 ; {medal_3_8
 $811B DEFB $04                             ; }
 $811C DEFB $02,$02,$03,$00,$00,$00,$00,$00 ; {medal_3_9
 $8124 DEFB $07                             ; }
 $8125 DEFB $FE,$10,$EF,$00,$00,$00,$00,$00 ; {medal_4_0
 $812D DEFB $07                             ; }
 $812E DEFB $87,$83,$81,$00,$00,$00,$00,$00 ; {medal_4_1
 $8136 DEFB $06                             ; }
 $8137 DEFB $19,$C7,$FF,$7C,$00,$00,$00,$00 ; {medal_4_2
 $813F DEFB $06                             ; }
 $8140 DEFB $C1,$80,$00,$00,$00,$00,$00,$00 ; {medal_4_3
 $8148 DEFB $06                             ; }
 $8149 DEFB $C7,$FE,$38,$00,$00,$00,$00,$00 ; {medal_4_4
 $8151 DEFB $06                             ; }
 $8152 DEFB $0B,$0F,$0C,$00,$00,$00,$00,$00 ; {medal_4_5
 $815A DEFB $05                             ; }
 $815B DEFB $D7,$39,$28,$6C,$6C,$C6,$FE,$00 ; {medal_4_6
 $8163 DEFB $05                             ; }
 $8164 DEFB $A1,$E1,$60,$00,$00,$00,$00,$00 ; {medal_4_7
 $816C DEFB $05                             ; }
 $816D DEFB $45,$BB,$C6,$38,$38,$00,$00,$00 ; {medal_4_8
 $8175 DEFB $04                             ; }
 $8176 DEFB $00,$00,$00,$01,$03,$03,$06,$06 ; {medal_4_9
 $817E DEFB $06                             ; }
 $817F DEFB $00,$00,$7E,$FF,$8F,$7F,$FF,$FF ; {bell_top_middle
 $8187 DEFB $06                             ; }
 $8188 DEFB $00,$00,$00,$80,$C0,$C0,$E0,$E0 ; {bell_top_right
 $8190 DEFB $06                             ; }
 $8191 DEFB $06,$E7,$E7,$87,$83,$43,$41,$20 ; {bell_middle_left
 $8199 DEFB $06                             ; }
 $819A DEFB $E7,$E7,$FF,$FF,$FE,$F9,$FF,$7E ; {bell_middle_middle
 $81A2 DEFB $06                             ; }

; unused_81A3
;
; Unreferenced byte.
u$81A3 DEFB $E0

; saved_Y
;
; Saved position.
w$81A4 DEFW $60E0

; saved_X
w$81A6 DEFW $C060

; saved_VO
w$81A8 DEFW $80C0

; stashed_A
;
; Used by sub_AF8F only.
b$81AA DEFB $00

; unused_81AB
;
; Unreferenced byte.
u$81AB DEFB $06

; bitmap_pointer
w$81AC DEFW $0810

; mask_pointer
w$81AE DEFW $0204

; foreground_mask_pointer
w$81B0 DEFW $0102

; byte_81B2
b$81B2 DEFB $01

; byte_81B3
b$81B3 DEFB $00

; byte_81B4
b$81B4 DEFB $06

; map_position_related_1
b$81B5 DEFB $81

; map_position_related_2
b$81B6 DEFB $FF

; flip_sprite
;
; Controls character left/right flipping.
b$81B7 DEFB $E7

; player_map_position.y
;
; Player's map position.
b$81B8 DEFB $DB

; player_map_position.x
b$81B9 DEFB $DB

; player_map_position.vo
b$81BA DEFB $FF

; map_position
;
; Map position. Used when drawing tiles.
w$81BB DEFW $FF81

; searchlight_state
;
; Searchlight state.
; .
; Suspect that this is a 'player has been found in searchlight' flag. (possible
; states: 0, 31, 255)
; .
; (<- nighttime, something_then_decrease_morale)
b$81BD DEFB $04

; roomdef_bounds_index
;
; Index into roomdef_bounds[].
; .
; Copy of first byte of current room def.
b$81BE DEFB $00

; roomdef_object_bounds
;
; Copy of current room def's additional bounds (ie. room objects).
b$81BF DEFB $38,$44,$CA,$D2,$E2,$7C,$38,$47
 $81C7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $81CF DEFB $00,$00,$00,$00,$00,$00,$00

; door_related
;
; (<- indoors maybe, <- open door)
b$81D6 DEFB $FF,$FF,$FF
; Final byte?
 $81D9 DEFB $FF

; indoor_mask_data
;
; (<- setup_room, mask_stuff)
b$81DA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $81E2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $81EA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $81F2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $81FA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8202 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $820A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8212 DEFB $00

; possibly_holds_an_item
;
; Written to by setup_item_plotting but never read.
b$8213 DEFB $00

; item_def_2nd_memb_copy
b$8214 DEFB $00

; items_held
;
; Items which the player is holding.
; .
; Two byte slots. initialised to 0xFFFF meaning no item in either slot.
w$8215 DEFW $FF05

; character_index
;
; Character index.
b$8217 DEFB $00

; tiles
;
; Exterior tiles set 0. 111 tiles. Looks like mask tiles for huts. (<-
; plot_tile)
b$8218 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; #UDGARRAY1,7,4,1;$8218-$821F-8(exterior-tiles0-000)
 $8220 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8220-$8227-8(exterior-tiles0-001)
 $8228 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE ; #UDGARRAY1,7,4,1;$8228-$822F-8(exterior-tiles0-002)
 $8230 DEFB $FF,$FF,$FF,$FC,$F0,$C0,$C0,$00 ; #UDGARRAY1,7,4,1;$8230-$8237-8(exterior-tiles0-003)
 $8238 DEFB $F0,$C0,$00,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8238-$823F-8(exterior-tiles0-004)
 $8240 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC ; #UDGARRAY1,7,4,1;$8240-$8247-8(exterior-tiles0-005)
 $8248 DEFB $FF,$FF,$FF,$FC,$F0,$C0,$00,$00 ; #UDGARRAY1,7,4,1;$8248-$824F-8(exterior-tiles0-006)
 $8250 DEFB $FF,$FF,$FF,$FF,$FF,$F0,$00,$00 ; #UDGARRAY1,7,4,1;$8250-$8257-8(exterior-tiles0-007)
 $8258 DEFB $FF,$FF,$FF,$F0,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8258-$825F-8(exterior-tiles0-008)
 $8260 DEFB $FF,$F0,$00,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8260-$8267-8(exterior-tiles0-009)
 $8268 DEFB $7F,$3F,$1F,$0F,$07,$03,$01,$00 ; #UDGARRAY1,7,4,1;$8268-$826F-8(exterior-tiles0-010)
 $8270 DEFB $FF,$7F,$3F,$1F,$0F,$07,$07,$03 ; #UDGARRAY1,7,4,1;$8270-$8277-8(exterior-tiles0-011)
 $8278 DEFB $FF,$FF,$7F,$3F,$3F,$1F,$0F,$07 ; #UDGARRAY1,7,4,1;$8278-$827F-8(exterior-tiles0-012)
 $8280 DEFB $03,$03,$01,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8280-$8287-8(exterior-tiles0-013)
 $8288 DEFB $FF,$FF,$FF,$FF,$7F,$3F,$1F,$1F ; #UDGARRAY1,7,4,1;$8288-$828F-8(exterior-tiles0-014)
 $8290 DEFB $0F,$07,$03,$01,$01,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8290-$8297-8(exterior-tiles0-015)
 $8298 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$7F,$3F ; #UDGARRAY1,7,4,1;$8298-$829F-8(exterior-tiles0-016)
 $82A0 DEFB $3F,$1F,$3F,$7F,$7F,$7F,$7F,$7F ; #UDGARRAY1,7,4,1;$82A0-$82A7-8(exterior-tiles0-017)
 $82A8 DEFB $7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F ; #UDGARRAY1,7,4,1;$82A8-$82AF-8(exterior-tiles0-018)
 $82B0 DEFB $03,$C0,$F0,$F0,$F8,$D8,$00,$00 ; #UDGARRAY1,7,4,1;$82B0-$82B7-8(exterior-tiles0-019)
 $82B8 DEFB $C3,$81,$03,$01,$03,$00,$00,$10 ; #UDGARRAY1,7,4,1;$82B8-$82BF-8(exterior-tiles0-020)
 $82C0 DEFB $FF,$FF,$FF,$FF,$FF,$DF,$0F,$0D ; #UDGARRAY1,7,4,1;$82C0-$82C7-8(exterior-tiles0-021)
 $82C8 DEFB $C0,$80,$00,$00,$03,$07,$03,$00 ; #UDGARRAY1,7,4,1;$82C8-$82CF-8(exterior-tiles0-022)
 $82D0 DEFB $FF,$DF,$0F,$0D,$00,$00,$B0,$F0 ; #UDGARRAY1,7,4,1;$82D0-$82D7-8(exterior-tiles0-023)
 $82D8 DEFB $00,$00,$B0,$F0,$FB,$DF,$0F,$0D ; #UDGARRAY1,7,4,1;$82D8-$82DF-8(exterior-tiles0-024)
 $82E0 DEFB $00,$04,$07,$07,$07,$07,$07,$03 ; #UDGARRAY1,7,4,1;$82E0-$82E7-8(exterior-tiles0-025)
 $82E8 DEFB $CF,$0F,$03,$80,$90,$9C,$CF,$CF ; #UDGARRAY1,7,4,1;$82E8-$82EF-8(exterior-tiles0-026)
 $82F0 DEFB $00,$00,$B0,$D0,$0B,$0F,$03,$00 ; #UDGARRAY1,7,4,1;$82F0-$82F7-8(exterior-tiles0-027)
 $82F8 DEFB $90,$9C,$CF,$CF,$CF,$0F,$0F,$03 ; #UDGARRAY1,7,4,1;$82F8-$82FF-8(exterior-tiles0-028)
 $8300 DEFB $0E,$0E,$0E,$02,$90,$9C,$CE,$CE ; #UDGARRAY1,7,4,1;$8300-$8307-8(exterior-tiles0-029)
 $8308 DEFB $00,$00,$00,$03,$0F,$3F,$FF,$FF ; #UDGARRAY1,7,4,1;$8308-$830F-8(exterior-tiles0-030)
 $8310 DEFB $0E,$0E,$0E,$02,$B0,$FC,$FE,$FE ; #UDGARRAY1,7,4,1;$8310-$8317-8(exterior-tiles0-031)
 $8318 DEFB $0F,$0F,$0F,$03,$B0,$FC,$FF,$FF ; #UDGARRAY1,7,4,1;$8318-$831F-8(exterior-tiles0-032)
 $8320 DEFB $00,$9C,$FF,$FF,$FF,$FF,$FF,$FF ; #UDGARRAY1,7,4,1;$8320-$8327-8(exterior-tiles0-033)
 $8328 DEFB $00,$00,$0D,$0B,$D8,$F8,$C0,$01 ; #UDGARRAY1,7,4,1;$8328-$832F-8(exterior-tiles0-034)
 $8330 DEFB $FF,$FF,$FF,$FF,$FF,$FB,$F0,$B0 ; #UDGARRAY1,7,4,1;$8330-$8337-8(exterior-tiles0-035)
 $8338 DEFB $C3,$81,$C0,$80,$C0,$00,$00,$08 ; #UDGARRAY1,7,4,1;$8338-$833F-8(exterior-tiles0-036)
 $8340 DEFB $00,$03,$0F,$0F,$1F,$1B,$00,$00 ; #UDGARRAY1,7,4,1;$8340-$8347-8(exterior-tiles0-037)
 $8348 DEFB $FF,$FB,$F0,$B0,$00,$00,$0D,$0F ; #UDGARRAY1,7,4,1;$8348-$834F-8(exterior-tiles0-038)
 $8350 DEFB $00,$00,$0D,$0F,$DF,$FB,$F0,$B0 ; #UDGARRAY1,7,4,1;$8350-$8357-8(exterior-tiles0-039)
 $8358 DEFB $00,$01,$00,$00,$C0,$E0,$C0,$00 ; #UDGARRAY1,7,4,1;$8358-$835F-8(exterior-tiles0-040)
 $8360 DEFB $F0,$F8,$F1,$C1,$09,$39,$F3,$F3 ; #UDGARRAY1,7,4,1;$8360-$8367-8(exterior-tiles0-041)
 $8368 DEFB $00,$20,$E0,$E0,$E0,$E0,$E0,$C0 ; #UDGARRAY1,7,4,1;$8368-$836F-8(exterior-tiles0-042)
 $8370 DEFB $09,$39,$F3,$F3,$F3,$F0,$F0,$C0 ; #UDGARRAY1,7,4,1;$8370-$8377-8(exterior-tiles0-043)
 $8378 DEFB $00,$00,$00,$C0,$F0,$FC,$FF,$FF ; #UDGARRAY1,7,4,1;$8378-$837F-8(exterior-tiles0-044)
 $8380 DEFB $00,$39,$FF,$FF,$FF,$FF,$FF,$FF ; #UDGARRAY1,7,4,1;$8380-$8387-8(exterior-tiles0-045)
 $8388 DEFB $79,$7C,$70,$40,$0D,$3F,$7F,$7F ; #UDGARRAY1,7,4,1;$8388-$838F-8(exterior-tiles0-046)
 $8390 DEFB $7B,$78,$70,$41,$09,$39,$73,$73 ; #UDGARRAY1,7,4,1;$8390-$8397-8(exterior-tiles0-047)
 $8398 DEFB $FF,$FF,$FF,$3F,$0F,$03,$00,$00 ; #UDGARRAY1,7,4,1;$8398-$839F-8(exterior-tiles0-048)
 $83A0 DEFB $F0,$F0,$C0,$00,$0D,$3F,$FF,$FF ; #UDGARRAY1,7,4,1;$83A0-$83A7-8(exterior-tiles0-049)
 $83A8 DEFB $0F,$03,$00,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$83A8-$83AF-8(exterior-tiles0-050)
 $83B0 DEFB $9F,$0F,$07,$0F,$0F,$07,$0F,$9F ; #UDGARRAY1,7,4,1;$83B0-$83B7-8(exterior-tiles0-051)
 $83B8 DEFB $F9,$F0,$E0,$F0,$F0,$E0,$F0,$F9 ; #UDGARRAY1,7,4,1;$83B8-$83BF-8(exterior-tiles0-052)
 $83C0 DEFB $C0,$C0,$C1,$C0,$C0,$C0,$C0,$00 ; #UDGARRAY1,7,4,1;$83C0-$83C7-8(exterior-tiles0-053)
 $83C8 DEFB $03,$03,$83,$03,$03,$03,$03,$00 ; #UDGARRAY1,7,4,1;$83C8-$83CF-8(exterior-tiles0-054)
 $83D0 DEFB $00,$00,$00,$00,$00,$38,$FE,$FF ; #UDGARRAY1,7,4,1;$83D0-$83D7-8(exterior-tiles0-055)
 $83D8 DEFB $0F,$3F,$7F,$7F,$7F,$7F,$7F,$7F ; #UDGARRAY1,7,4,1;$83D8-$83DF-8(exterior-tiles0-056)
 $83E0 DEFB $01,$01,$01,$01,$01,$01,$01,$01 ; #UDGARRAY1,7,4,1;$83E0-$83E7-8(exterior-tiles0-057)
 $83E8 DEFB $00,$00,$00,$00,$00,$01,$03,$03 ; #UDGARRAY1,7,4,1;$83E8-$83EF-8(exterior-tiles0-058)
 $83F0 DEFB $00,$00,$00,$00,$00,$80,$C0,$C0 ; #UDGARRAY1,7,4,1;$83F0-$83F7-8(exterior-tiles0-059)
 $83F8 DEFB $80,$80,$80,$80,$80,$80,$80,$80 ; #UDGARRAY1,7,4,1;$83F8-$83FF-8(exterior-tiles0-060)
 $8400 DEFB $F0,$FC,$FE,$FE,$FE,$FE,$FE,$FE ; #UDGARRAY1,7,4,1;$8400-$8407-8(exterior-tiles0-061)
 $8408 DEFB $00,$00,$00,$00,$00,$1C,$7F,$FF ; #UDGARRAY1,7,4,1;$8408-$840F-8(exterior-tiles0-062)
 $8410 DEFB $00,$00,$00,$00,$00,$00,$00,$03 ; #UDGARRAY1,7,4,1;$8410-$8417-8(exterior-tiles0-063)
 $8418 DEFB $00,$00,$00,$00,$00,$00,$00,$C0 ; #UDGARRAY1,7,4,1;$8418-$841F-8(exterior-tiles0-064)
 $8420 DEFB $0F,$3F,$FF,$FF,$FF,$FF,$FC,$F0 ; #UDGARRAY1,7,4,1;$8420-$8427-8(exterior-tiles0-065)
 $8428 DEFB $00,$00,$00,$03,$01,$03,$07,$1F ; #UDGARRAY1,7,4,1;$8428-$842F-8(exterior-tiles0-066)
 $8430 DEFB $1F,$1F,$1C,$10,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8430-$8437-8(exterior-tiles0-067)
 $8438 DEFB $C0,$00,$00,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8438-$843F-8(exterior-tiles0-068)
 $8440 DEFB $FF,$FF,$FC,$F0,$C0,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8440-$8447-8(exterior-tiles0-069)
 $8448 DEFB $03,$00,$00,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8448-$844F-8(exterior-tiles0-070)
 $8450 DEFB $FF,$FF,$3F,$0F,$03,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8450-$8457-8(exterior-tiles0-071)
 $8458 DEFB $F0,$FC,$FF,$FF,$FF,$FF,$3F,$0F ; #UDGARRAY1,7,4,1;$8458-$845F-8(exterior-tiles0-072)
 $8460 DEFB $00,$00,$00,$C0,$80,$C0,$E0,$F0 ; #UDGARRAY1,7,4,1;$8460-$8467-8(exterior-tiles0-073)
 $8468 DEFB $80,$C0,$E0,$E0,$E0,$E0,$E0,$E0 ; #UDGARRAY1,7,4,1;$8468-$846F-8(exterior-tiles0-074)
 $8470 DEFB $F8,$F8,$38,$08,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8470-$8477-8(exterior-tiles0-075)
 $8478 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$3F ; #UDGARRAY1,7,4,1;$8478-$847F-8(exterior-tiles0-076)
 $8480 DEFB $00,$00,$01,$01,$01,$01,$01,$01 ; #UDGARRAY1,7,4,1;$8480-$8487-8(exterior-tiles0-077)
 $8488 DEFB $00,$00,$80,$80,$80,$80,$80,$80 ; #UDGARRAY1,7,4,1;$8488-$848F-8(exterior-tiles0-078)
 $8490 DEFB $3F,$0F,$03,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8490-$8497-8(exterior-tiles0-079)
 $8498 DEFB $00,$00,$00,$00,$10,$1C,$8F,$8F ; #UDGARRAY1,7,4,1;$8498-$849F-8(exterior-tiles0-080)
 $84A0 DEFB $00,$00,$00,$00,$10,$1C,$8C,$8C ; #UDGARRAY1,7,4,1;$84A0-$84A7-8(exterior-tiles0-081)
 $84A8 DEFB $00,$00,$00,$00,$00,$00,$80,$80 ; #UDGARRAY1,7,4,1;$84A8-$84AF-8(exterior-tiles0-082)
 $84B0 DEFB $0C,$0C,$00,$00,$10,$1C,$8C,$8C ; #UDGARRAY1,7,4,1;$84B0-$84B7-8(exterior-tiles0-083)
 $84B8 DEFB $0F,$0F,$03,$00,$00,$C0,$F0,$FC ; #UDGARRAY1,7,4,1;$84B8-$84BF-8(exterior-tiles0-084)
 $84C0 DEFB $0C,$0C,$00,$00,$00,$C0,$F0,$FC ; #UDGARRAY1,7,4,1;$84C0-$84C7-8(exterior-tiles0-085)
 $84C8 DEFB $FC,$D8,$08,$08,$00,$00,$B0,$F8 ; #UDGARRAY1,7,4,1;$84C8-$84CF-8(exterior-tiles0-086)
 $84D0 DEFB $3F,$1B,$10,$10,$00,$00,$0D,$1F ; #UDGARRAY1,7,4,1;$84D0-$84D7-8(exterior-tiles0-087)
 $84D8 DEFB $38,$08,$00,$00,$10,$18,$88,$88 ; #UDGARRAY1,7,4,1;$84D8-$84DF-8(exterior-tiles0-088)
 $84E0 DEFB $1C,$10,$00,$00,$08,$18,$11,$11 ; #UDGARRAY1,7,4,1;$84E0-$84E7-8(exterior-tiles0-089)
 $84E8 DEFB $FF,$FF,$FF,$FF,$FF,$3F,$0F,$03 ; #UDGARRAY1,7,4,1;$84E8-$84EF-8(exterior-tiles0-090)
 $84F0 DEFB $FF,$3F,$0F,$03,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$84F0-$84F7-8(exterior-tiles0-091)
 $84F8 DEFB $FF,$FC,$F0,$C0,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$84F8-$84FF-8(exterior-tiles0-092)
 $8500 DEFB $FF,$FF,$FF,$FF,$FF,$FC,$F0,$C0 ; #UDGARRAY1,7,4,1;$8500-$8507-8(exterior-tiles0-093)
 $8508 DEFB $3F,$3F,$1F,$0F,$0F,$03,$00,$00 ; #UDGARRAY1,7,4,1;$8508-$850F-8(exterior-tiles0-094)
 $8510 DEFB $7F,$7F,$7F,$7F,$7F,$FF,$FF,$FF ; #UDGARRAY1,7,4,1;$8510-$8517-8(exterior-tiles0-095)
 $8518 DEFB $1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F ; #UDGARRAY1,7,4,1;$8518-$851F-8(exterior-tiles0-096)
 $8520 DEFB $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8 ; #UDGARRAY1,7,4,1;$8520-$8527-8(exterior-tiles0-097)
 $8528 DEFB $FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF ; #UDGARRAY1,7,4,1;$8528-$852F-8(exterior-tiles0-098)
 $8530 DEFB $FF,$FF,$FC,$F0,$C0,$00,$03,$0F ; #UDGARRAY1,7,4,1;$8530-$8537-8(exterior-tiles0-099)
 $8538 DEFB $C0,$00,$02,$0E,$3E,$FE,$FE,$FE ; #UDGARRAY1,7,4,1;$8538-$853F-8(exterior-tiles0-100)
 $8540 DEFB $03,$00,$40,$70,$7C,$7F,$7F,$7F ; #UDGARRAY1,7,4,1;$8540-$8547-8(exterior-tiles0-101)
 $8548 DEFB $FF,$FF,$3F,$0F,$03,$00,$C0,$F0 ; #UDGARRAY1,7,4,1;$8548-$854F-8(exterior-tiles0-102)
 $8550 DEFB $FF,$FF,$3F,$0F,$07,$0F,$0F,$0F ; #UDGARRAY1,7,4,1;$8550-$8557-8(exterior-tiles0-103)
 $8558 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$3F,$0F ; #UDGARRAY1,7,4,1;$8558-$855F-8(exterior-tiles0-104)
 $8560 DEFB $07,$07,$07,$07,$07,$07,$07,$07 ; #UDGARRAY1,7,4,1;$8560-$8567-8(exterior-tiles0-105)
 $8568 DEFB $0F,$03,$00,$10,$18,$08,$00,$00 ; #UDGARRAY1,7,4,1;$8568-$856F-8(exterior-tiles0-106)
 $8570 DEFB $FF,$FF,$3F,$1F,$3F,$FF,$7F,$7F ; #UDGARRAY1,7,4,1;$8570-$8577-8(exterior-tiles0-107)
 $8578 DEFB $FF,$FF,$FF,$FF,$FF,$F3,$C1,$01 ; #UDGARRAY1,7,4,1;$8578-$857F-8(exterior-tiles0-108)
 $8580 DEFB $FE,$FE,$FE,$FE,$FE,$FC,$F0,$C0 ; #UDGARRAY1,7,4,1;$8580-$8587-8(exterior-tiles0-109)
 $8588 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FE,$FE ; #UDGARRAY1,7,4,1;$8588-$858F-8(exterior-tiles0-110)
; Exterior tiles set 1. 145 tiles. Looks like tiles for huts. (<- plot_tile)
 $8590 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8590-$8597-8(exterior-tiles1-000)
 $8598 DEFB $80,$80,$80,$80,$80,$80,$80,$80 ; #UDGARRAY1,7,4,1;$8598-$859F-8(exterior-tiles1-001)
 $85A0 DEFB $FF,$F0,$00,$8C,$C3,$B0,$80,$C0 ; #UDGARRAY1,7,4,1;$85A0-$85A7-8(exterior-tiles1-002)
 $85A8 DEFB $00,$20,$06,$00,$03,$4C,$03,$3F ; #UDGARRAY1,7,4,1;$85A8-$85AF-8(exterior-tiles1-003)
 $85B0 DEFB $03,$0C,$30,$C0,$03,$3F,$FF,$F0 ; #UDGARRAY1,7,4,1;$85B0-$85B7-8(exterior-tiles1-004)
 $85B8 DEFB $0F,$F0,$03,$3F,$FF,$F0,$00,$00 ; #UDGARRAY1,7,4,1;$85B8-$85BF-8(exterior-tiles1-005)
 $85C0 DEFB $06,$3F,$FF,$F1,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$85C0-$85C7-8(exterior-tiles1-006)
 $85C8 DEFB $00,$40,$00,$08,$03,$0C,$30,$C0 ; #UDGARRAY1,7,4,1;$85C8-$85CF-8(exterior-tiles1-007)
 $85D0 DEFB $23,$0C,$30,$C0,$0F,$F0,$0F,$F0 ; #UDGARRAY1,7,4,1;$85D0-$85D7-8(exterior-tiles1-008)
 $85D8 DEFB $0F,$F0,$0F,$F0,$03,$CF,$3F,$FF ; #UDGARRAY1,7,4,1;$85D8-$85DF-8(exterior-tiles1-009)
 $85E0 DEFB $03,$CF,$3F,$FF,$FC,$F2,$C9,$24 ; #UDGARRAY1,7,4,1;$85E0-$85E7-8(exterior-tiles1-010)
 $85E8 DEFB $FC,$F2,$C9,$04,$82,$49,$20,$90 ; #UDGARRAY1,7,4,1;$85E8-$85EF-8(exterior-tiles1-011)
 $85F0 DEFB $FC,$72,$A9,$C4,$E2,$75,$78,$38 ; #UDGARRAY1,7,4,1;$85F0-$85F7-8(exterior-tiles1-012)
 $85F8 DEFB $1C,$0E,$07,$07,$03,$01,$00,$00 ; #UDGARRAY1,7,4,1;$85F8-$85FF-8(exterior-tiles1-013)
 $8600 DEFB $49,$24,$12,$A9,$C5,$C4,$E2,$71 ; #UDGARRAY1,7,4,1;$8600-$8607-8(exterior-tiles1-014)
 $8608 DEFB $38,$3D,$1E,$0E,$07,$03,$01,$01 ; #UDGARRAY1,7,4,1;$8608-$860F-8(exterior-tiles1-015)
 $8610 DEFB $92,$4A,$29,$24,$12,$89,$D4,$E2 ; #UDGARRAY1,7,4,1;$8610-$8617-8(exterior-tiles1-016)
 $8618 DEFB $E2,$71,$38,$1C,$1E,$0F,$07,$03 ; #UDGARRAY1,7,4,1;$8618-$861F-8(exterior-tiles1-017)
 $8620 DEFB $49,$24,$92,$49,$A5,$14,$12,$89 ; #UDGARRAY1,7,4,1;$8620-$8627-8(exterior-tiles1-018)
 $8628 DEFB $01,$00,$00,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8628-$862F-8(exterior-tiles1-019)
 $8630 DEFB $C4,$EA,$F1,$71,$38,$1C,$0E,$0F ; #UDGARRAY1,7,4,1;$8630-$8637-8(exterior-tiles1-020)
 $8638 DEFB $07,$03,$01,$00,$05,$03,$31,$09 ; #UDGARRAY1,7,4,1;$8638-$863F-8(exterior-tiles1-021)
 $8640 DEFB $30,$00,$00,$80,$80,$80,$80,$80 ; #UDGARRAY1,7,4,1;$8640-$8647-8(exterior-tiles1-022)
 $8648 DEFB $92,$49,$24,$92,$4A,$29,$A4,$90 ; #UDGARRAY1,7,4,1;$8648-$864F-8(exterior-tiles1-023)
 $8650 DEFB $48,$28,$A4,$92,$49,$24,$92,$49 ; #UDGARRAY1,7,4,1;$8650-$8657-8(exterior-tiles1-024)
 $8658 DEFB $25,$94,$52,$49,$24,$92,$49,$24 ; #UDGARRAY1,7,4,1;$8658-$865F-8(exterior-tiles1-025)
 $8660 DEFB $20,$92,$48,$24,$92,$4A,$29,$A4 ; #UDGARRAY1,7,4,1;$8660-$8667-8(exterior-tiles1-026)
 $8668 DEFB $04,$92,$41,$21,$90,$50,$49,$24 ; #UDGARRAY1,7,4,1;$8668-$866F-8(exterior-tiles1-027)
 $8670 DEFB $49,$24,$92,$49,$25,$14,$12,$09 ; #UDGARRAY1,7,4,1;$8670-$8677-8(exterior-tiles1-028)
 $8678 DEFB $42,$21,$A0,$90,$49,$24,$92,$49 ; #UDGARRAY1,7,4,1;$8678-$867F-8(exterior-tiles1-029)
 $8680 DEFB $92,$4A,$29,$24,$12,$09,$24,$82 ; #UDGARRAY1,7,4,1;$8680-$8687-8(exterior-tiles1-030)
 $8688 DEFB $49,$24,$12,$09,$25,$84,$42,$41 ; #UDGARRAY1,7,4,1;$8688-$868F-8(exterior-tiles1-031)
 $8690 DEFB $90,$48,$24,$92,$4A,$29,$A4,$92 ; #UDGARRAY1,7,4,1;$8690-$8697-8(exterior-tiles1-032)
 $8698 DEFB $03,$CE,$3E,$FE,$FC,$F0,$C6,$20 ; #UDGARRAY1,7,4,1;$8698-$869F-8(exterior-tiles1-033)
 $86A0 DEFB $0C,$F2,$F5,$F0,$F0,$EF,$EF,$EF ; #UDGARRAY1,7,4,1;$86A0-$86A7-8(exterior-tiles1-034)
 $86A8 DEFB $6F,$0F,$06,$00,$63,$0C,$B2,$49 ; #UDGARRAY1,7,4,1;$86A8-$86AF-8(exterior-tiles1-035)
 $86B0 DEFB $92,$49,$24,$92,$4A,$29,$24,$12 ; #UDGARRAY1,7,4,1;$86B0-$86B7-8(exterior-tiles1-036)
 $86B8 DEFB $69,$0C,$32,$C9,$05,$94,$42,$41 ; #UDGARRAY1,7,4,1;$86B8-$86BF-8(exterior-tiles1-037)
 $86C0 DEFB $00,$10,$00,$04,$40,$00,$0F,$F0 ; #UDGARRAY1,7,4,1;$86C0-$86C7-8(exterior-tiles1-038)
 $86C8 DEFB $00,$04,$40,$00,$0F,$F0,$03,$3C ; #UDGARRAY1,7,4,1;$86C8-$86CF-8(exterior-tiles1-039)
 $86D0 DEFB $00,$00,$0F,$F0,$03,$0F,$3F,$FF ; #UDGARRAY1,7,4,1;$86D0-$86D7-8(exterior-tiles1-040)
 $86D8 DEFB $03,$CF,$3F,$FF,$FC,$F2,$C9,$24 ; #UDGARRAY1,7,4,1;$86D8-$86DF-8(exterior-tiles1-041)
 $86E0 DEFB $10,$80,$C2,$20,$90,$48,$24,$92 ; #UDGARRAY1,7,4,1;$86E0-$86E7-8(exterior-tiles1-042)
 $86E8 DEFB $00,$08,$80,$40,$22,$90,$50,$48 ; #UDGARRAY1,7,4,1;$86E8-$86EF-8(exterior-tiles1-043)
 $86F0 DEFB $24,$92,$49,$24,$92,$4A,$29,$A4 ; #UDGARRAY1,7,4,1;$86F0-$86F7-8(exterior-tiles1-044)
 $86F8 DEFB $20,$00,$04,$80,$80,$40,$22,$90 ; #UDGARRAY1,7,4,1;$86F8-$86FF-8(exterior-tiles1-045)
 $8700 DEFB $02,$00,$20,$00,$02,$80,$40,$40 ; #UDGARRAY1,7,4,1;$8700-$8707-8(exterior-tiles1-046)
 $8708 DEFB $20,$90,$48,$24,$94,$52,$49,$24 ; #UDGARRAY1,7,4,1;$8708-$870F-8(exterior-tiles1-047)
 $8710 DEFB $00,$00,$0C,$00,$80,$02,$00,$80 ; #UDGARRAY1,7,4,1;$8710-$8717-8(exterior-tiles1-048)
 $8718 DEFB $00,$C0,$00,$04,$00,$00,$20,$01 ; #UDGARRAY1,7,4,1;$8718-$871F-8(exterior-tiles1-049)
 $8720 DEFB $94,$52,$49,$24,$93,$4C,$B3,$CC ; #UDGARRAY1,7,4,1;$8720-$8727-8(exterior-tiles1-050)
 $8728 DEFB $93,$4C,$33,$CE,$32,$C2,$02,$02 ; #UDGARRAY1,7,4,1;$8728-$872F-8(exterior-tiles1-051)
 $8730 DEFB $30,$C0,$00,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8730-$8737-8(exterior-tiles1-052)
 $8738 DEFB $94,$52,$49,$24,$93,$4C,$33,$CC ; #UDGARRAY1,7,4,1;$8738-$873F-8(exterior-tiles1-053)
 $8740 DEFB $93,$4C,$33,$CC,$30,$C0,$00,$00 ; #UDGARRAY1,7,4,1;$8740-$8747-8(exterior-tiles1-054)
 $8748 DEFB $93,$4C,$33,$CC,$32,$C6,$06,$06 ; #UDGARRAY1,7,4,1;$8748-$874F-8(exterior-tiles1-055)
 $8750 DEFB $06,$06,$06,$06,$06,$06,$06,$06 ; #UDGARRAY1,7,4,1;$8750-$8757-8(exterior-tiles1-056)
 $8758 DEFB $30,$C3,$00,$33,$CF,$3C,$F0,$C0 ; #UDGARRAY1,7,4,1;$8758-$875F-8(exterior-tiles1-057)
 $8760 DEFB $CF,$3C,$F1,$C1,$01,$81,$81,$81 ; #UDGARRAY1,7,4,1;$8760-$8767-8(exterior-tiles1-058)
 $8768 DEFB $00,$30,$42,$04,$10,$C3,$08,$03 ; #UDGARRAY1,7,4,1;$8768-$876F-8(exterior-tiles1-059)
 $8770 DEFB $30,$C3,$00,$03,$4F,$3C,$F1,$C1 ; #UDGARRAY1,7,4,1;$8770-$8777-8(exterior-tiles1-060)
 $8778 DEFB $CE,$3D,$F3,$C3,$03,$03,$03,$03 ; #UDGARRAY1,7,4,1;$8778-$877F-8(exterior-tiles1-061)
 $8780 DEFB $03,$0D,$33,$C3,$03,$03,$03,$03 ; #UDGARRAY1,7,4,1;$8780-$8787-8(exterior-tiles1-062)
 $8788 DEFB $01,$81,$81,$81,$83,$8D,$B1,$C1 ; #UDGARRAY1,7,4,1;$8788-$878F-8(exterior-tiles1-063)
 $8790 DEFB $C0,$C0,$C0,$C0,$C3,$CC,$F0,$C0 ; #UDGARRAY1,7,4,1;$8790-$8797-8(exterior-tiles1-064)
 $8798 DEFB $82,$8D,$B1,$C1,$81,$81,$81,$C1 ; #UDGARRAY1,7,4,1;$8798-$879F-8(exterior-tiles1-065)
 $87A0 DEFB $81,$83,$85,$85,$81,$81,$81,$81 ; #UDGARRAY1,7,4,1;$87A0-$87A7-8(exterior-tiles1-066)
 $87A8 DEFB $83,$43,$43,$00,$03,$0F,$3F,$7C ; #UDGARRAY1,7,4,1;$87A8-$87AF-8(exterior-tiles1-067)
 $87B0 DEFB $C1,$C2,$C2,$C0,$C0,$C0,$C0,$C0 ; #UDGARRAY1,7,4,1;$87B0-$87B7-8(exterior-tiles1-068)
 $87B8 DEFB $A1,$A1,$81,$80,$83,$8F,$BF,$BC ; #UDGARRAY1,7,4,1;$87B8-$87BF-8(exterior-tiles1-069)
 $87C0 DEFB $81,$8E,$BF,$BC,$71,$CC,$10,$00 ; #UDGARRAY1,7,4,1;$87C0-$87C7-8(exterior-tiles1-070)
 $87C8 DEFB $70,$C0,$10,$C0,$0C,$30,$01,$07 ; #UDGARRAY1,7,4,1;$87C8-$87CF-8(exterior-tiles1-071)
 $87D0 DEFB $C3,$CF,$DF,$DC,$D3,$C4,$30,$C1 ; #UDGARRAY1,7,4,1;$87D0-$87D7-8(exterior-tiles1-072)
 $87D8 DEFB $86,$0E,$36,$46,$0E,$36,$C7,$07 ; #UDGARRAY1,7,4,1;$87D8-$87DF-8(exterior-tiles1-073)
 $87E0 DEFB $8C,$10,$C1,$07,$1F,$7C,$F0,$C0 ; #UDGARRAY1,7,4,1;$87E0-$87E7-8(exterior-tiles1-074)
 $87E8 DEFB $1F,$7C,$F0,$C0,$02,$00,$00,$18 ; #UDGARRAY1,7,4,1;$87E8-$87EF-8(exterior-tiles1-075)
 $87F0 DEFB $01,$06,$88,$00,$06,$18,$21,$07 ; #UDGARRAY1,7,4,1;$87F0-$87F7-8(exterior-tiles1-076)
 $87F8 DEFB $CC,$D0,$C1,$C7,$DF,$FC,$F0,$C0 ; #UDGARRAY1,7,4,1;$87F8-$87FF-8(exterior-tiles1-077)
 $8800 DEFB $C0,$C0,$C0,$C0,$C0,$C0,$C0,$C0 ; #UDGARRAY1,7,4,1;$8800-$8807-8(exterior-tiles1-078)
 $8808 DEFB $0F,$3C,$F0,$C0,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8808-$880F-8(exterior-tiles1-079)
 $8810 DEFB $C0,$C0,$C0,$C0,$C0,$C0,$D0,$DC ; #UDGARRAY1,7,4,1;$8810-$8817-8(exterior-tiles1-080)
 $8818 DEFB $C0,$C0,$C0,$C0,$00,$C0,$00,$C0 ; #UDGARRAY1,7,4,1;$8818-$881F-8(exterior-tiles1-081)
 $8820 DEFB $C0,$C0,$C0,$C0,$C0,$C3,$CF,$DF ; #UDGARRAY1,7,4,1;$8820-$8827-8(exterior-tiles1-082)
 $8828 DEFB $00,$03,$0F,$3F,$FC,$F0,$C3,$0F ; #UDGARRAY1,7,4,1;$8828-$882F-8(exterior-tiles1-083)
 $8830 DEFB $C0,$06,$C0,$21,$30,$C8,$F4,$CE ; #UDGARRAY1,7,4,1;$8830-$8837-8(exterior-tiles1-084)
 $8838 DEFB $01,$01,$01,$01,$01,$01,$01,$01 ; #UDGARRAY1,7,4,1;$8838-$883F-8(exterior-tiles1-085)
 $8840 DEFB $03,$0D,$21,$01,$0D,$31,$81,$05 ; #UDGARRAY1,7,4,1;$8840-$8847-8(exterior-tiles1-086)
 $8848 DEFB $1A,$7B,$F3,$C3,$03,$03,$13,$01 ; #UDGARRAY1,7,4,1;$8848-$884F-8(exterior-tiles1-087)
 $8850 DEFB $32,$02,$0A,$12,$C2,$0A,$32,$42 ; #UDGARRAY1,7,4,1;$8850-$8857-8(exterior-tiles1-088)
 $8858 DEFB $0A,$12,$82,$0A,$22,$C2,$0A,$32 ; #UDGARRAY1,7,4,1;$8858-$885F-8(exterior-tiles1-089)
 $8860 DEFB $C2,$02,$32,$C2,$0A,$32,$82,$02 ; #UDGARRAY1,7,4,1;$8860-$8867-8(exterior-tiles1-090)
 $8868 DEFB $1A,$7A,$F2,$C2,$02,$02,$02,$22 ; #UDGARRAY1,7,4,1;$8868-$886F-8(exterior-tiles1-091)
 $8870 DEFB $8C,$B0,$C1,$87,$DF,$BC,$B0,$80 ; #UDGARRAY1,7,4,1;$8870-$8877-8(exterior-tiles1-092)
 $8878 DEFB $40,$D0,$C2,$C0,$C0,$C0,$CA,$80 ; #UDGARRAY1,7,4,1;$8878-$887F-8(exterior-tiles1-093)
 $8880 DEFB $02,$03,$03,$03,$03,$03,$03,$01 ; #UDGARRAY1,7,4,1;$8880-$8887-8(exterior-tiles1-094)
 $8888 DEFB $31,$0D,$83,$E1,$FB,$3D,$0D,$01 ; #UDGARRAY1,7,4,1;$8888-$888F-8(exterior-tiles1-095)
 $8890 DEFB $09,$C3,$31,$0D,$C3,$11,$0D,$C3 ; #UDGARRAY1,7,4,1;$8890-$8897-8(exterior-tiles1-096)
 $8898 DEFB $C3,$31,$0D,$81,$31,$0D,$43,$31 ; #UDGARRAY1,7,4,1;$8898-$889F-8(exterior-tiles1-097)
 $88A0 DEFB $01,$09,$03,$01,$0D,$03,$11,$0D ; #UDGARRAY1,7,4,1;$88A0-$88A7-8(exterior-tiles1-098)
 $88A8 DEFB $06,$07,$0E,$16,$06,$06,$16,$06 ; #UDGARRAY1,7,4,1;$88A8-$88AF-8(exterior-tiles1-099)
 $88B0 DEFB $0E,$36,$07,$0E,$26,$46,$0E,$36 ; #UDGARRAY1,7,4,1;$88B0-$88B7-8(exterior-tiles1-100)
 $88B8 DEFB $F8,$3E,$0F,$43,$00,$00,$04,$08 ; #UDGARRAY1,7,4,1;$88B8-$88BF-8(exterior-tiles1-101)
 $88C0 DEFB $03,$20,$0C,$C3,$30,$08,$83,$E0 ; #UDGARRAY1,7,4,1;$88C0-$88C7-8(exterior-tiles1-102)
 $88C8 DEFB $C0,$C0,$C0,$E0,$F8,$3E,$CF,$C3 ; #UDGARRAY1,7,4,1;$88C8-$88CF-8(exterior-tiles1-103)
 $88D0 DEFB $F0,$C8,$C2,$E0,$C8,$C0,$E0,$C0 ; #UDGARRAY1,7,4,1;$88D0-$88D7-8(exterior-tiles1-104)
 $88D8 DEFB $10,$0C,$82,$E0,$F8,$3E,$0F,$03 ; #UDGARRAY1,7,4,1;$88D8-$88DF-8(exterior-tiles1-105)
 $88E0 DEFB $C0,$C0,$C0,$C0,$C0,$C0,$30,$FC ; #UDGARRAY1,7,4,1;$88E0-$88E7-8(exterior-tiles1-106)
 $88E8 DEFB $58,$DE,$CF,$C3,$C0,$C0,$C8,$84 ; #UDGARRAY1,7,4,1;$88E8-$88EF-8(exterior-tiles1-107)
 $88F0 DEFB $C0,$B0,$84,$C0,$B0,$8C,$81,$A0 ; #UDGARRAY1,7,4,1;$88F0-$88F7-8(exterior-tiles1-108)
 $88F8 DEFB $4A,$29,$A4,$92,$49,$24,$92,$49 ; #UDGARRAY1,7,4,1;$88F8-$88FF-8(exterior-tiles1-109)
 $8900 DEFB $93,$4C,$33,$CC,$31,$C1,$01,$01 ; #UDGARRAY1,7,4,1;$8900-$8907-8(exterior-tiles1-110)
 $8908 DEFB $3C,$D0,$E3,$F7,$FB,$3C,$0E,$03 ; #UDGARRAY1,7,4,1;$8908-$890F-8(exterior-tiles1-111)
 $8910 DEFB $3F,$FC,$F0,$C0,$00,$0C,$00,$00 ; #UDGARRAY1,7,4,1;$8910-$8917-8(exterior-tiles1-112)
 $8918 DEFB $03,$00,$60,$00,$01,$00,$00,$08 ; #UDGARRAY1,7,4,1;$8918-$891F-8(exterior-tiles1-113)
 $8920 DEFB $00,$00,$00,$00,$00,$00,$C0,$C0 ; #UDGARRAY1,7,4,1;$8920-$8927-8(exterior-tiles1-114)
 $8928 DEFB $02,$02,$02,$02,$02,$02,$02,$02 ; #UDGARRAY1,7,4,1;$8928-$892F-8(exterior-tiles1-115)
 $8930 DEFB $90,$C2,$8C,$B0,$C3,$84,$B0,$80 ; #UDGARRAY1,7,4,1;$8930-$8937-8(exterior-tiles1-116)
 $8938 DEFB $C3,$84,$B0,$C3,$8C,$90,$C3,$8C ; #UDGARRAY1,7,4,1;$8938-$893F-8(exterior-tiles1-117)
 $8940 DEFB $84,$B0,$C0,$8C,$90,$C3,$84,$B0 ; #UDGARRAY1,7,4,1;$8940-$8947-8(exterior-tiles1-118)
 $8948 DEFB $90,$C0,$80,$B0,$C0,$84,$90,$C0 ; #UDGARRAY1,7,4,1;$8948-$894F-8(exterior-tiles1-119)
 $8950 DEFB $00,$00,$00,$80,$00,$00,$C0,$00 ; #UDGARRAY1,7,4,1;$8950-$8957-8(exterior-tiles1-120)
 $8958 DEFB $10,$C0,$08,$30,$80,$0C,$20,$C0 ; #UDGARRAY1,7,4,1;$8958-$895F-8(exterior-tiles1-121)
 $8960 DEFB $08,$30,$C2,$04,$30,$80,$08,$20 ; #UDGARRAY1,7,4,1;$8960-$8967-8(exterior-tiles1-122)
 $8968 DEFB $00,$00,$00,$00,$03,$08,$10,$01 ; #UDGARRAY1,7,4,1;$8968-$896F-8(exterior-tiles1-123)
 $8970 DEFB $0C,$10,$C3,$0C,$20,$03,$04,$00 ; #UDGARRAY1,7,4,1;$8970-$8977-8(exterior-tiles1-124)
 $8978 DEFB $00,$00,$00,$10,$00,$0C,$30,$42 ; #UDGARRAY1,7,4,1;$8978-$897F-8(exterior-tiles1-125)
 $8980 DEFB $01,$01,$03,$01,$01,$03,$09,$01 ; #UDGARRAY1,7,4,1;$8980-$8987-8(exterior-tiles1-126)
 $8988 DEFB $D0,$C1,$CC,$D0,$C2,$CC,$D0,$C3 ; #UDGARRAY1,7,4,1;$8988-$898F-8(exterior-tiles1-127)
 $8990 DEFB $C0,$C0,$D0,$C0,$C8,$D0,$C2,$C4 ; #UDGARRAY1,7,4,1;$8990-$8997-8(exterior-tiles1-128)
 $8998 DEFB $00,$10,$C3,$F0,$FC,$CF,$C3,$C0 ; #UDGARRAY1,7,4,1;$8998-$899F-8(exterior-tiles1-129)
 $89A0 DEFB $00,$20,$0C,$C0,$30,$0C,$C2,$F0 ; #UDGARRAY1,7,4,1;$89A0-$89A7-8(exterior-tiles1-130)
 $89A8 DEFB $3C,$0F,$03,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$89A8-$89AF-8(exterior-tiles1-131)
 $89B0 DEFB $00,$00,$D0,$CC,$C1,$F0,$CC,$C2 ; #UDGARRAY1,7,4,1;$89B0-$89B7-8(exterior-tiles1-132)
 $89B8 DEFB $80,$80,$C0,$80,$80,$C0,$B0,$80 ; #UDGARRAY1,7,4,1;$89B8-$89BF-8(exterior-tiles1-133)
 $89C0 DEFB $03,$00,$0C,$02,$30,$0C,$03,$20 ; #UDGARRAY1,7,4,1;$89C0-$89C7-8(exterior-tiles1-134)
 $89C8 DEFB $00,$C0,$30,$00,$C0,$30,$0C,$C0 ; #UDGARRAY1,7,4,1;$89C8-$89CF-8(exterior-tiles1-135)
 $89D0 DEFB $0C,$02,$00,$04,$03,$00,$00,$00 ; #UDGARRAY1,7,4,1;$89D0-$89D7-8(exterior-tiles1-136)
 $89D8 DEFB $20,$0C,$C0,$30,$08,$43,$30,$0C ; #UDGARRAY1,7,4,1;$89D8-$89DF-8(exterior-tiles1-137)
 $89E0 DEFB $03,$30,$08,$01,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$89E0-$89E7-8(exterior-tiles1-138)
 $89E8 DEFB $00,$C0,$30,$08,$C0,$00,$00,$00 ; #UDGARRAY1,7,4,1;$89E8-$89EF-8(exterior-tiles1-139)
 $89F0 DEFB $01,$43,$04,$0B,$1C,$30,$01,$02 ; #UDGARRAY1,7,4,1;$89F0-$89F7-8(exterior-tiles1-140)
 $89F8 DEFB $3F,$0F,$C3,$F0,$FC,$3F,$0F,$03 ; #UDGARRAY1,7,4,1;$89F8-$89FF-8(exterior-tiles1-141)
 $8A00 DEFB $00,$C0,$F0,$FC,$3E,$0F,$C2,$F1 ; #UDGARRAY1,7,4,1;$8A00-$8A07-8(exterior-tiles1-142)
 $8A08 DEFB $FB,$37,$0F,$1C,$30,$00,$00,$40 ; #UDGARRAY1,7,4,1;$8A08-$8A0F-8(exterior-tiles1-143)
 $8A10 DEFB $C0,$C4,$00,$00,$20,$18,$00,$00 ; #UDGARRAY1,7,4,1;$8A10-$8A17-8(exterior-tiles1-144)
; Exterior tiles set 2. 220 tiles. Looks like main building wall tiles. (<-
; plot_tile)
 $8A18 DEFB $00,$01,$00,$30,$00,$02,$00,$00 ; #UDGARRAY1,7,4,1;$8A18-$8A1F-8(exterior-tiles2-000)
 $8A20 DEFB $04,$00,$00,$00,$80,$00,$18,$04 ; #UDGARRAY1,7,4,1;$8A20-$8A27-8(exterior-tiles2-001)
 $8A28 DEFB $02,$80,$00,$08,$04,$00,$60,$00 ; #UDGARRAY1,7,4,1;$8A28-$8A2F-8(exterior-tiles2-002)
 $8A30 DEFB $00,$00,$20,$01,$00,$00,$00,$20 ; #UDGARRAY1,7,4,1;$8A30-$8A37-8(exterior-tiles2-003)
 $8A38 DEFB $00,$40,$30,$78,$77,$7B,$3F,$7F ; #UDGARRAY1,7,4,1;$8A38-$8A3F-8(exterior-tiles2-004)
 $8A40 DEFB $FF,$3D,$0F,$03,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8A40-$8A47-8(exterior-tiles2-005)
 $8A48 DEFB $0B,$0F,$0F,$0F,$0D,$4F,$73,$7C ; #UDGARRAY1,7,4,1;$8A48-$8A4F-8(exterior-tiles2-006)
 $8A50 DEFB $7B,$7F,$7F,$7F,$6F,$3F,$0F,$03 ; #UDGARRAY1,7,4,1;$8A50-$8A57-8(exterior-tiles2-007)
 $8A58 DEFB $FE,$FC,$DE,$FE,$FE,$B4,$E0,$C2 ; #UDGARRAY1,7,4,1;$8A58-$8A5F-8(exterior-tiles2-008)
 $8A60 DEFB $FC,$DC,$FC,$FC,$FC,$F2,$CE,$36 ; #UDGARRAY1,7,4,1;$8A60-$8A67-8(exterior-tiles2-009)
 $8A68 DEFB $00,$02,$0E,$1E,$EE,$FE,$7E,$FE ; #UDGARRAY1,7,4,1;$8A68-$8A6F-8(exterior-tiles2-010)
 $8A70 DEFB $FE,$FC,$70,$C1,$00,$10,$00,$02 ; #UDGARRAY1,7,4,1;$8A70-$8A77-8(exterior-tiles2-011)
 $8A78 DEFB $33,$3C,$2F,$3F,$0F,$03,$0C,$0F ; #UDGARRAY1,7,4,1;$8A78-$8A7F-8(exterior-tiles2-012)
 $8A80 DEFB $C0,$30,$F0,$F0,$70,$CC,$3C,$FC ; #UDGARRAY1,7,4,1;$8A80-$8A87-8(exterior-tiles2-013)
 $8A88 DEFB $0F,$03,$0C,$0F,$0F,$0B,$0F,$0F ; #UDGARRAY1,7,4,1;$8A88-$8A8F-8(exterior-tiles2-014)
 $8A90 DEFB $F0,$CC,$3C,$EC,$FC,$FC,$FC,$B0 ; #UDGARRAY1,7,4,1;$8A90-$8A97-8(exterior-tiles2-015)
 $8A98 DEFB $33,$3C,$3F,$37,$3F,$3F,$3F,$3D ; #UDGARRAY1,7,4,1;$8A98-$8A9F-8(exterior-tiles2-016)
 $8AA0 DEFB $C0,$30,$F0,$F0,$70,$F0,$F0,$F0 ; #UDGARRAY1,7,4,1;$8AA0-$8AA7-8(exterior-tiles2-017)
 $8AA8 DEFB $0F,$0F,$0F,$0F,$0B,$0F,$0F,$0F ; #UDGARRAY1,7,4,1;$8AA8-$8AAF-8(exterior-tiles2-018)
 $8AB0 DEFB $BC,$FC,$F4,$FC,$FC,$DC,$FC,$F0 ; #UDGARRAY1,7,4,1;$8AB0-$8AB7-8(exterior-tiles2-019)
 $8AB8 DEFB $BC,$FC,$F4,$FC,$FC,$DC,$FC,$F3 ; #UDGARRAY1,7,4,1;$8AB8-$8ABF-8(exterior-tiles2-020)
 $8AC0 DEFB $C7,$37,$F4,$F3,$77,$F4,$F0,$F0 ; #UDGARRAY1,7,4,1;$8AC0-$8AC7-8(exterior-tiles2-021)
 $8AC8 DEFB $CC,$3C,$B0,$88,$38,$F8,$F0,$CC ; #UDGARRAY1,7,4,1;$8AC8-$8ACF-8(exterior-tiles2-022)
 $8AD0 DEFB $0F,$0F,$6C,$63,$07,$34,$F0,$CC ; #UDGARRAY1,7,4,1;$8AD0-$8AD7-8(exterior-tiles2-023)
 $8AD8 DEFB $3C,$FC,$F3,$C7,$04,$03,$03,$03 ; #UDGARRAY1,7,4,1;$8AD8-$8ADF-8(exterior-tiles2-024)
 $8AE0 DEFB $00,$00,$00,$00,$00,$00,$C0,$C0 ; #UDGARRAY1,7,4,1;$8AE0-$8AE7-8(exterior-tiles2-025)
 $8AE8 DEFB $00,$00,$00,$00,$20,$E0,$C0,$30 ; #UDGARRAY1,7,4,1;$8AE8-$8AEF-8(exterior-tiles2-026)
 $8AF0 DEFB $F0,$F0,$C8,$38,$70,$40,$00,$00 ; #UDGARRAY1,7,4,1;$8AF0-$8AF7-8(exterior-tiles2-027)
 $8AF8 DEFB $3C,$B3,$83,$33,$F0,$F3,$CF,$0C ; #UDGARRAY1,7,4,1;$8AF8-$8AFF-8(exterior-tiles2-028)
 $8B00 DEFB $0F,$0E,$0F,$0F,$0C,$03,$0F,$3F ; #UDGARRAY1,7,4,1;$8B00-$8B07-8(exterior-tiles2-029)
 $8B08 DEFB $0F,$0B,$0F,$0F,$0F,$0D,$0F,$0F ; #UDGARRAY1,7,4,1;$8B08-$8B0F-8(exterior-tiles2-030)
 $8B10 DEFB $70,$F0,$F0,$F0,$F0,$D0,$F0,$F0 ; #UDGARRAY1,7,4,1;$8B10-$8B17-8(exterior-tiles2-031)
 $8B18 DEFB $00,$00,$00,$20,$F0,$E0,$E0,$D0 ; #UDGARRAY1,7,4,1;$8B18-$8B1F-8(exterior-tiles2-032)
 $8B20 DEFB $00,$00,$00,$00,$00,$03,$07,$09 ; #UDGARRAY1,7,4,1;$8B20-$8B27-8(exterior-tiles2-033)
 $8B28 DEFB $00,$00,$00,$0C,$0F,$0F,$0B,$0F ; #UDGARRAY1,7,4,1;$8B28-$8B2F-8(exterior-tiles2-034)
 $8B30 DEFB $00,$00,$00,$00,$00,$C0,$F0,$F0 ; #UDGARRAY1,7,4,1;$8B30-$8B37-8(exterior-tiles2-035)
 $8B38 DEFB $FF,$FF,$7F,$FB,$FF,$3F,$4F,$73 ; #UDGARRAY1,7,4,1;$8B38-$8B3F-8(exterior-tiles2-036)
 $8B40 DEFB $B6,$B6,$B6,$B6,$B6,$B6,$96,$E6 ; #UDGARRAY1,7,4,1;$8B40-$8B47-8(exterior-tiles2-037)
 $8B48 DEFB $7C,$7F,$77,$6B,$6B,$6D,$6D,$6D ; #UDGARRAY1,7,4,1;$8B48-$8B4F-8(exterior-tiles2-038)
 $8B50 DEFB $FF,$3B,$CF,$F3,$FC,$DE,$AE,$AE ; #UDGARRAY1,7,4,1;$8B50-$8B57-8(exterior-tiles2-039)
 $8B58 DEFB $6D,$6D,$6D,$6D,$6D,$6D,$6D,$6D ; #UDGARRAY1,7,4,1;$8B58-$8B5F-8(exterior-tiles2-040)
 $8B60 DEFB $B6,$B6,$B6,$B6,$B6,$B6,$B6,$B6 ; #UDGARRAY1,7,4,1;$8B60-$8B67-8(exterior-tiles2-041)
 $8B68 DEFB $6D,$6D,$6D,$65,$79,$3F,$0F,$03 ; #UDGARRAY1,7,4,1;$8B68-$8B6F-8(exterior-tiles2-042)
 $8B70 DEFB $FF,$3E,$0E,$02,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8B70-$8B77-8(exterior-tiles2-043)
 $8B78 DEFB $FE,$EC,$73,$0F,$3F,$7B,$75,$75 ; #UDGARRAY1,7,4,1;$8B78-$8B7F-8(exterior-tiles2-044)
 $8B80 DEFB $FF,$F7,$FF,$FE,$FB,$B4,$E2,$CE ; #UDGARRAY1,7,4,1;$8B80-$8B87-8(exterior-tiles2-045)
 $8B88 DEFB $3F,$FE,$EE,$D6,$D6,$B6,$B6,$B6 ; #UDGARRAY1,7,4,1;$8B88-$8B8F-8(exterior-tiles2-046)
 $8B90 DEFB $6D,$6D,$6D,$6D,$6D,$6D,$69,$67 ; #UDGARRAY1,7,4,1;$8B90-$8B97-8(exterior-tiles2-047)
 $8B98 DEFB $B6,$B6,$B7,$A6,$9E,$FC,$F0,$C1 ; #UDGARRAY1,7,4,1;$8B98-$8B9F-8(exterior-tiles2-048)
 $8BA0 DEFB $7F,$7C,$70,$41,$00,$00,$40,$02 ; #UDGARRAY1,7,4,1;$8BA0-$8BA7-8(exterior-tiles2-049)
 $8BA8 DEFB $70,$F3,$CF,$3F,$FF,$DF,$FD,$FF ; #UDGARRAY1,7,4,1;$8BA8-$8BAF-8(exterior-tiles2-050)
 $8BB0 DEFB $B7,$B6,$B6,$B6,$B6,$B6,$B6,$B6 ; #UDGARRAY1,7,4,1;$8BB0-$8BB7-8(exterior-tiles2-051)
 $8BB8 DEFB $0F,$CF,$F7,$FF,$FF,$BF,$FF,$FF ; #UDGARRAY1,7,4,1;$8BB8-$8BBF-8(exterior-tiles2-052)
 $8BC0 DEFB $F0,$F0,$F0,$D0,$F0,$F0,$F0,$FC ; #UDGARRAY1,7,4,1;$8BC0-$8BC7-8(exterior-tiles2-053)
 $8BC8 DEFB $00,$01,$0E,$37,$B7,$D7,$F7,$F7 ; #UDGARRAY1,7,4,1;$8BC8-$8BCF-8(exterior-tiles2-054)
 $8BD0 DEFB $F6,$B4,$F0,$C0,$01,$40,$00,$06 ; #UDGARRAY1,7,4,1;$8BD0-$8BD7-8(exterior-tiles2-055)
 $8BD8 DEFB $00,$00,$00,$00,$00,$00,$00,$0C ; #UDGARRAY1,7,4,1;$8BD8-$8BDF-8(exterior-tiles2-056)
 $8BE0 DEFB $00,$C0,$F0,$3C,$7F,$B3,$87,$8B ; #UDGARRAY1,7,4,1;$8BE0-$8BE7-8(exterior-tiles2-057)
 $8BE8 DEFB $00,$03,$0F,$3C,$FE,$CD,$E1,$D1 ; #UDGARRAY1,7,4,1;$8BE8-$8BEF-8(exterior-tiles2-058)
 $8BF0 DEFB $0F,$0B,$0D,$0D,$0E,$0E,$06,$0E ; #UDGARRAY1,7,4,1;$8BF0-$8BF7-8(exterior-tiles2-059)
 $8BF8 DEFB $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E ; #UDGARRAY1,7,4,1;$8BF8-$8BFF-8(exterior-tiles2-060)
 $8C00 DEFB $7F,$B3,$87,$8B,$88,$88,$88,$88 ; #UDGARRAY1,7,4,1;$8C00-$8C07-8(exterior-tiles2-061)
 $8C08 DEFB $00,$C0,$70,$F0,$F0,$D0,$F0,$F0 ; #UDGARRAY1,7,4,1;$8C08-$8C0F-8(exterior-tiles2-062)
 $8C10 DEFB $0E,$0A,$0E,$0E,$0E,$0E,$0D,$0D ; #UDGARRAY1,7,4,1;$8C10-$8C17-8(exterior-tiles2-063)
 $8C18 DEFB $88,$88,$88,$88,$88,$48,$70,$74 ; #UDGARRAY1,7,4,1;$8C18-$8C1F-8(exterior-tiles2-064)
 $8C20 DEFB $37,$F7,$F3,$DF,$FF,$3D,$0F,$03 ; #UDGARRAY1,7,4,1;$8C20-$8C27-8(exterior-tiles2-065)
 $8C28 DEFB $08,$48,$70,$74,$36,$F6,$F2,$DE ; #UDGARRAY1,7,4,1;$8C28-$8C2F-8(exterior-tiles2-066)
 $8C30 DEFB $60,$D0,$B0,$B0,$70,$70,$70,$70 ; #UDGARRAY1,7,4,1;$8C30-$8C37-8(exterior-tiles2-067)
 $8C38 DEFB $70,$70,$50,$70,$70,$70,$70,$70 ; #UDGARRAY1,7,4,1;$8C38-$8C3F-8(exterior-tiles2-068)
 $8C40 DEFB $11,$11,$11,$11,$11,$11,$11,$11 ; #UDGARRAY1,7,4,1;$8C40-$8C47-8(exterior-tiles2-069)
 $8C48 DEFB $FE,$CD,$E1,$D1,$11,$11,$11,$11 ; #UDGARRAY1,7,4,1;$8C48-$8C4F-8(exterior-tiles2-070)
 $8C50 DEFB $00,$03,$07,$0D,$0F,$0F,$0F,$0F ; #UDGARRAY1,7,4,1;$8C50-$8C57-8(exterior-tiles2-071)
 $8C58 DEFB $11,$11,$11,$11,$11,$12,$0E,$2E ; #UDGARRAY1,7,4,1;$8C58-$8C5F-8(exterior-tiles2-072)
 $8C60 DEFB $70,$50,$70,$70,$70,$70,$B0,$B0 ; #UDGARRAY1,7,4,1;$8C60-$8C67-8(exterior-tiles2-073)
 $8C68 DEFB $10,$12,$0E,$2E,$6C,$6F,$4F,$7B ; #UDGARRAY1,7,4,1;$8C68-$8C6F-8(exterior-tiles2-074)
 $8C70 DEFB $EC,$EF,$CF,$FB,$FF,$BC,$F0,$C0 ; #UDGARRAY1,7,4,1;$8C70-$8C77-8(exterior-tiles2-075)
 $8C78 DEFB $D0,$F0,$F0,$C0,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8C78-$8C7F-8(exterior-tiles2-076)
 $8C80 DEFB $0F,$0F,$0F,$0F,$0F,$0C,$00,$00 ; #UDGARRAY1,7,4,1;$8C80-$8C87-8(exterior-tiles2-077)
 $8C88 DEFB $00,$00,$0C,$13,$14,$14,$08,$08 ; #UDGARRAY1,7,4,1;$8C88-$8C8F-8(exterior-tiles2-078)
 $8C90 DEFB $00,$00,$00,$00,$C0,$30,$10,$6C ; #UDGARRAY1,7,4,1;$8C90-$8C97-8(exterior-tiles2-079)
 $8C98 DEFB $FE,$FE,$7C,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8C98-$8C9F-8(exterior-tiles2-080)
 $8CA0 DEFB $13,$0C,$30,$C3,$0C,$32,$C0,$20 ; #UDGARRAY1,7,4,1;$8CA0-$8CA7-8(exterior-tiles2-081)
 $8CA8 DEFB $00,$01,$01,$02,$12,$04,$34,$CB ; #UDGARRAY1,7,4,1;$8CA8-$8CAF-8(exterior-tiles2-082)
 $8CB0 DEFB $00,$00,$00,$00,$00,$00,$01,$00 ; #UDGARRAY1,7,4,1;$8CB0-$8CB7-8(exterior-tiles2-083)
 $8CB8 DEFB $08,$14,$D0,$20,$20,$20,$20,$20 ; #UDGARRAY1,7,4,1;$8CB8-$8CBF-8(exterior-tiles2-084)
 $8CC0 DEFB $00,$00,$00,$00,$03,$0C,$08,$36 ; #UDGARRAY1,7,4,1;$8CC0-$8CC7-8(exterior-tiles2-085)
 $8CC8 DEFB $7F,$7F,$3E,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8CC8-$8CCF-8(exterior-tiles2-086)
 $8CD0 DEFB $00,$00,$30,$C8,$28,$28,$10,$10 ; #UDGARRAY1,7,4,1;$8CD0-$8CD7-8(exterior-tiles2-087)
 $8CD8 DEFB $00,$00,$00,$00,$00,$00,$80,$00 ; #UDGARRAY1,7,4,1;$8CD8-$8CDF-8(exterior-tiles2-088)
 $8CE0 DEFB $C8,$30,$0C,$C3,$30,$4C,$03,$04 ; #UDGARRAY1,7,4,1;$8CE0-$8CE7-8(exterior-tiles2-089)
 $8CE8 DEFB $00,$80,$80,$40,$48,$20,$2C,$D3 ; #UDGARRAY1,7,4,1;$8CE8-$8CEF-8(exterior-tiles2-090)
 $8CF0 DEFB $10,$28,$0B,$04,$04,$04,$04,$04 ; #UDGARRAY1,7,4,1;$8CF0-$8CF7-8(exterior-tiles2-091)
 $8CF8 DEFB $0B,$0F,$0F,$03,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8CF8-$8CFF-8(exterior-tiles2-092)
 $8D00 DEFB $E0,$F0,$B0,$F0,$F0,$30,$00,$00 ; #UDGARRAY1,7,4,1;$8D00-$8D07-8(exterior-tiles2-093)
 $8D08 DEFB $88,$88,$88,$88,$88,$88,$88,$88 ; #UDGARRAY1,7,4,1;$8D08-$8D0F-8(exterior-tiles2-094)
 $8D10 DEFB $08,$06,$0B,$1C,$13,$3B,$1B,$2B ; #UDGARRAY1,7,4,1;$8D10-$8D17-8(exterior-tiles2-095)
 $8D18 DEFB $00,$00,$00,$04,$18,$CC,$72,$36 ; #UDGARRAY1,7,4,1;$8D18-$8D1F-8(exterior-tiles2-096)
 $8D20 DEFB $4B,$09,$01,$00,$00,$C0,$F0,$3C ; #UDGARRAY1,7,4,1;$8D20-$8D27-8(exterior-tiles2-097)
 $8D28 DEFB $67,$DF,$CE,$8A,$12,$24,$04,$00 ; #UDGARRAY1,7,4,1;$8D28-$8D2F-8(exterior-tiles2-098)
 $8D30 DEFB $00,$00,$00,$00,$00,$C0,$F0,$3C ; #UDGARRAY1,7,4,1;$8D30-$8D37-8(exterior-tiles2-099)
 $8D38 DEFB $00,$80,$80,$30,$F0,$F3,$CF,$3C ; #UDGARRAY1,7,4,1;$8D38-$8D3F-8(exterior-tiles2-100)
 $8D40 DEFB $00,$00,$00,$00,$00,$02,$0E,$3E ; #UDGARRAY1,7,4,1;$8D40-$8D47-8(exterior-tiles2-101)
 $8D48 DEFB $00,$00,$00,$00,$00,$40,$70,$7C ; #UDGARRAY1,7,4,1;$8D48-$8D4F-8(exterior-tiles2-102)
 $8D50 DEFB $FF,$DF,$FD,$FF,$FF,$FC,$70,$C0 ; #UDGARRAY1,7,4,1;$8D50-$8D57-8(exterior-tiles2-103)
 $8D58 DEFB $70,$F0,$F0,$F0,$D0,$F0,$F0,$F0 ; #UDGARRAY1,7,4,1;$8D58-$8D5F-8(exterior-tiles2-104)
 $8D60 DEFB $0F,$8F,$8F,$4F,$4B,$2F,$2F,$D7 ; #UDGARRAY1,7,4,1;$8D60-$8D67-8(exterior-tiles2-105)
 $8D68 DEFB $BC,$FD,$F5,$FA,$FA,$D4,$F4,$EB ; #UDGARRAY1,7,4,1;$8D68-$8D6F-8(exterior-tiles2-106)
 $8D70 DEFB $13,$28,$2B,$35,$35,$35,$35,$3B ; #UDGARRAY1,7,4,1;$8D70-$8D77-8(exterior-tiles2-107)
 $8D78 DEFB $C8,$14,$D0,$A0,$20,$A0,$A0,$D0 ; #UDGARRAY1,7,4,1;$8D78-$8D7F-8(exterior-tiles2-108)
 $8D80 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8D80-$8D87-8(exterior-tiles2-109)
 $8D88 DEFB $00,$C0,$F0,$FC,$3C,$0C,$30,$3C ; #UDGARRAY1,7,4,1;$8D88-$8D8F-8(exterior-tiles2-110)
 $8D90 DEFB $00,$03,$43,$73,$38,$CB,$F3,$FC ; #UDGARRAY1,7,4,1;$8D90-$8D97-8(exterior-tiles2-111)
 $8D98 DEFB $00,$00,$C0,$F0,$F0,$30,$C0,$D0 ; #UDGARRAY1,7,4,1;$8D98-$8D9F-8(exterior-tiles2-112)
 $8DA0 DEFB $0D,$01,$0C,$0F,$0F,$03,$0C,$0F ; #UDGARRAY1,7,4,1;$8DA0-$8DA7-8(exterior-tiles2-113)
 $8DA8 DEFB $3C,$CC,$E0,$2C,$CF,$C3,$CC,$0F ; #UDGARRAY1,7,4,1;$8DA8-$8DAF-8(exterior-tiles2-114)
 $8DB0 DEFB $1C,$CE,$F2,$FC,$3C,$4C,$70,$38 ; #UDGARRAY1,7,4,1;$8DB0-$8DB7-8(exterior-tiles2-115)
 $8DB8 DEFB $00,$00,$00,$00,$00,$C0,$F0,$FC ; #UDGARRAY1,7,4,1;$8DB8-$8DBF-8(exterior-tiles2-116)
 $8DC0 DEFB $03,$00,$03,$03,$03,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8DC0-$8DC7-8(exterior-tiles2-117)
 $8DC8 DEFB $4F,$73,$38,$CB,$F3,$F0,$30,$00 ; #UDGARRAY1,7,4,1;$8DC8-$8DCF-8(exterior-tiles2-118)
 $8DD0 DEFB $CB,$C3,$CC,$0F,$CF,$D3,$1C,$0C ; #UDGARRAY1,7,4,1;$8DD0-$8DD7-8(exterior-tiles2-119)
 $8DD8 DEFB $3C,$CC,$C0,$00,$C0,$C0,$C0,$00 ; #UDGARRAY1,7,4,1;$8DD8-$8DDF-8(exterior-tiles2-120)
 $8DE0 DEFB $00,$C0,$70,$EC,$ED,$EB,$EF,$EF ; #UDGARRAY1,7,4,1;$8DE0-$8DE7-8(exterior-tiles2-121)
 $8DE8 DEFB $EF,$2D,$0F,$03,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8DE8-$8DEF-8(exterior-tiles2-122)
 $8DF0 DEFB $FE,$FC,$70,$C6,$30,$F3,$CF,$0C ; #UDGARRAY1,7,4,1;$8DF0-$8DF7-8(exterior-tiles2-123)
 $8DF8 DEFB $00,$0C,$3C,$FC,$F3,$4F,$0C,$03 ; #UDGARRAY1,7,4,1;$8DF8-$8DFF-8(exterior-tiles2-124)
 $8E00 DEFB $3C,$FC,$F3,$CF,$0C,$02,$0E,$3E ; #UDGARRAY1,7,4,1;$8E00-$8E07-8(exterior-tiles2-125)
 $8E08 DEFB $0F,$3F,$3C,$33,$0B,$38,$70,$40 ; #UDGARRAY1,7,4,1;$8E08-$8E0F-8(exterior-tiles2-126)
 $8E10 DEFB $04,$1C,$D3,$CF,$3F,$3C,$30,$00 ; #UDGARRAY1,7,4,1;$8E10-$8E17-8(exterior-tiles2-127)
 $8E18 DEFB $FF,$DF,$FF,$FF,$FB,$3F,$0D,$01 ; #UDGARRAY1,7,4,1;$8E18-$8E1F-8(exterior-tiles2-128)
 $8E20 DEFB $03,$03,$0C,$0F,$0F,$13,$1C,$0E ; #UDGARRAY1,7,4,1;$8E20-$8E27-8(exterior-tiles2-129)
 $8E28 DEFB $32,$3C,$3F,$0F,$13,$1C,$0E,$02 ; #UDGARRAY1,7,4,1;$8E28-$8E2F-8(exterior-tiles2-130)
 $8E30 DEFB $30,$C0,$B0,$FC,$FF,$DF,$EF,$FF ; #UDGARRAY1,7,4,1;$8E30-$8E37-8(exterior-tiles2-131)
 $8E38 DEFB $F0,$F0,$F0,$F0,$B0,$F0,$F0,$F0 ; #UDGARRAY1,7,4,1;$8E38-$8E3F-8(exterior-tiles2-132)
 $8E40 DEFB $30,$C0,$F0,$EC,$FC,$F4,$3C,$CC ; #UDGARRAY1,7,4,1;$8E40-$8E47-8(exterior-tiles2-133)
 $8E48 DEFB $FC,$EC,$3C,$CC,$F0,$D0,$F0,$F0 ; #UDGARRAY1,7,4,1;$8E48-$8E4F-8(exterior-tiles2-134)
 $8E50 DEFB $30,$C0,$F0,$BC,$FC,$FC,$EC,$DC ; #UDGARRAY1,7,4,1;$8E50-$8E57-8(exterior-tiles2-135)
 $8E58 DEFB $08,$48,$70,$74,$37,$F7,$F3,$FF ; #UDGARRAY1,7,4,1;$8E58-$8E5F-8(exterior-tiles2-136)
 $8E60 DEFB $30,$F0,$F0,$F0,$F0,$F0,$F0,$F0 ; #UDGARRAY1,7,4,1;$8E60-$8E67-8(exterior-tiles2-137)
 $8E68 DEFB $2C,$4D,$15,$15,$14,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8E68-$8E6F-8(exterior-tiles2-138)
 $8E70 DEFB $C0,$30,$F0,$F0,$F0,$C3,$2F,$EF ; #UDGARRAY1,7,4,1;$8E70-$8E77-8(exterior-tiles2-139)
 $8E78 DEFB $EF,$6F,$EB,$EF,$EF,$AC,$E3,$EF ; #UDGARRAY1,7,4,1;$8E78-$8E7F-8(exterior-tiles2-140)
 $8E80 DEFB $CF,$2F,$EB,$EF,$AF,$ED,$CF,$33 ; #UDGARRAY1,7,4,1;$8E80-$8E87-8(exterior-tiles2-141)
 $8E88 DEFB $EC,$3F,$0F,$03,$00,$00,$80,$00 ; #UDGARRAY1,7,4,1;$8E88-$8E8F-8(exterior-tiles2-142)
 $8E90 DEFB $6D,$2D,$CD,$F1,$CC,$3F,$0F,$03 ; #UDGARRAY1,7,4,1;$8E90-$8E97-8(exterior-tiles2-143)
 $8E98 DEFB $B6,$B6,$B6,$B6,$B6,$36,$C6,$F2 ; #UDGARRAY1,7,4,1;$8E98-$8E9F-8(exterior-tiles2-144)
 $8EA0 DEFB $B0,$F3,$CF,$33,$E8,$E8,$A8,$EC ; #UDGARRAY1,7,4,1;$8EA0-$8EA7-8(exterior-tiles2-145)
 $8EA8 DEFB $08,$10,$C0,$70,$FC,$3B,$0F,$03 ; #UDGARRAY1,7,4,1;$8EA8-$8EAF-8(exterior-tiles2-146)
 $8EB0 DEFB $00,$00,$00,$00,$00,$00,$C0,$F0 ; #UDGARRAY1,7,4,1;$8EB0-$8EB7-8(exterior-tiles2-147)
 $8EB8 DEFB $C3,$08,$C2,$F0,$EC,$3F,$0F,$03 ; #UDGARRAY1,7,4,1;$8EB8-$8EBF-8(exterior-tiles2-148)
 $8EC0 DEFB $00,$C0,$30,$0C,$93,$00,$C0,$F2 ; #UDGARRAY1,7,4,1;$8EC0-$8EC7-8(exterior-tiles2-149)
 $8EC8 DEFB $EC,$3F,$0F,$03,$00,$C0,$30,$4C ; #UDGARRAY1,7,4,1;$8EC8-$8ECF-8(exterior-tiles2-150)
 $8ED0 DEFB $03,$10,$C4,$B0,$FC,$3F,$0F,$03 ; #UDGARRAY1,7,4,1;$8ED0-$8ED7-8(exterior-tiles2-151)
 $8ED8 DEFB $0E,$0D,$01,$0A,$3A,$05,$35,$CB ; #UDGARRAY1,7,4,1;$8ED8-$8EDF-8(exterior-tiles2-152)
 $8EE0 DEFB $2B,$17,$D4,$23,$2F,$2D,$2F,$0F ; #UDGARRAY1,7,4,1;$8EE0-$8EE7-8(exterior-tiles2-153)
 $8EE8 DEFB $00,$10,$C0,$71,$FC,$3B,$0F,$03 ; #UDGARRAY1,7,4,1;$8EE8-$8EEF-8(exterior-tiles2-154)
 $8EF0 DEFB $0F,$0C,$03,$0F,$3F,$3F,$2F,$3F ; #UDGARRAY1,7,4,1;$8EF0-$8EF7-8(exterior-tiles2-155)
 $8EF8 DEFB $3D,$3F,$3C,$33,$0F,$0D,$0F,$0F ; #UDGARRAY1,7,4,1;$8EF8-$8EFF-8(exterior-tiles2-156)
 $8F00 DEFB $0F,$0C,$03,$0F,$3F,$2F,$3C,$33 ; #UDGARRAY1,7,4,1;$8F00-$8F07-8(exterior-tiles2-157)
 $8F08 DEFB $0F,$0F,$0D,$0F,$0F,$0F,$0F,$0B ; #UDGARRAY1,7,4,1;$8F08-$8F0F-8(exterior-tiles2-158)
 $8F10 DEFB $0F,$0F,$0D,$0F,$0F,$0F,$CF,$F3 ; #UDGARRAY1,7,4,1;$8F10-$8F17-8(exterior-tiles2-159)
 $8F18 DEFB $00,$02,$20,$00,$00,$08,$C0,$F0 ; #UDGARRAY1,7,4,1;$8F18-$8F1F-8(exterior-tiles2-160)
 $8F20 DEFB $FC,$3F,$CF,$F3,$EC,$FC,$BC,$FC ; #UDGARRAY1,7,4,1;$8F20-$8F27-8(exterior-tiles2-161)
 $8F28 DEFB $3F,$DC,$F3,$CD,$3F,$2F,$3C,$33 ; #UDGARRAY1,7,4,1;$8F28-$8F2F-8(exterior-tiles2-162)
 $8F30 DEFB $00,$00,$00,$00,$03,$0C,$C1,$F0 ; #UDGARRAY1,7,4,1;$8F30-$8F37-8(exterior-tiles2-163)
 $8F38 DEFB $03,$0C,$30,$C0,$01,$20,$00,$04 ; #UDGARRAY1,7,4,1;$8F38-$8F3F-8(exterior-tiles2-164)
 $8F40 DEFB $00,$00,$00,$00,$03,$0C,$30,$C0 ; #UDGARRAY1,7,4,1;$8F40-$8F47-8(exterior-tiles2-165)
 $8F48 DEFB $00,$00,$00,$00,$03,$0F,$3F,$7C ; #UDGARRAY1,7,4,1;$8F48-$8F4F-8(exterior-tiles2-166)
 $8F50 DEFB $03,$0D,$3F,$FC,$B0,$C0,$00,$00 ; #UDGARRAY1,7,4,1;$8F50-$8F57-8(exterior-tiles2-167)
 $8F58 DEFB $F0,$C0,$00,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8F58-$8F5F-8(exterior-tiles2-168)
 $8F60 DEFB $0F,$03,$00,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8F60-$8F67-8(exterior-tiles2-169)
 $8F68 DEFB $C0,$B0,$FC,$3F,$0D,$03,$00,$00 ; #UDGARRAY1,7,4,1;$8F68-$8F6F-8(exterior-tiles2-170)
 $8F70 DEFB $00,$00,$00,$00,$C0,$F0,$EC,$3F ; #UDGARRAY1,7,4,1;$8F70-$8F77-8(exterior-tiles2-171)
 $8F78 DEFB $00,$00,$00,$00,$C0,$30,$0C,$43 ; #UDGARRAY1,7,4,1;$8F78-$8F7F-8(exterior-tiles2-172)
 $8F80 DEFB $C0,$30,$0C,$43,$00,$02,$20,$00 ; #UDGARRAY1,7,4,1;$8F80-$8F87-8(exterior-tiles2-173)
 $8F88 DEFB $00,$00,$00,$00,$C0,$30,$03,$8F ; #UDGARRAY1,7,4,1;$8F88-$8F8F-8(exterior-tiles2-174)
 $8F90 DEFB $00,$40,$03,$0D,$3F,$FC,$B0,$C0 ; #UDGARRAY1,7,4,1;$8F90-$8F97-8(exterior-tiles2-175)
 $8F98 DEFB $3F,$DC,$F0,$C0,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8F98-$8F9F-8(exterior-tiles2-176)
 $8FA0 DEFB $00,$10,$00,$00,$02,$80,$03,$0F ; #UDGARRAY1,7,4,1;$8FA0-$8FA7-8(exterior-tiles2-177)
 $8FA8 DEFB $00,$42,$00,$08,$03,$4C,$33,$CC ; #UDGARRAY1,7,4,1;$8FA8-$8FAF-8(exterior-tiles2-178)
 $8FB0 DEFB $43,$0C,$33,$CC,$30,$C7,$09,$0E ; #UDGARRAY1,7,4,1;$8FB0-$8FB7-8(exterior-tiles2-179)
 $8FB8 DEFB $08,$C0,$30,$CC,$33,$0C,$83,$00 ; #UDGARRAY1,7,4,1;$8FB8-$8FBF-8(exterior-tiles2-180)
 $8FC0 DEFB $00,$00,$44,$00,$00,$C2,$30,$EC ; #UDGARRAY1,7,4,1;$8FC0-$8FC7-8(exterior-tiles2-181)
 $8FC8 DEFB $33,$8C,$03,$10,$00,$00,$40,$02 ; #UDGARRAY1,7,4,1;$8FC8-$8FCF-8(exterior-tiles2-182)
 $8FD0 DEFB $00,$C1,$30,$CC,$33,$0C,$23,$00 ; #UDGARRAY1,7,4,1;$8FD0-$8FD7-8(exterior-tiles2-183)
 $8FD8 DEFB $70,$90,$E3,$0C,$33,$CC,$32,$C0 ; #UDGARRAY1,7,4,1;$8FD8-$8FDF-8(exterior-tiles2-184)
 $8FE0 DEFB $33,$CC,$30,$C0,$00,$11,$00,$20 ; #UDGARRAY1,7,4,1;$8FE0-$8FE7-8(exterior-tiles2-185)
 $8FE8 DEFB $00,$00,$00,$00,$03,$0C,$33,$CD ; #UDGARRAY1,7,4,1;$8FE8-$8FEF-8(exterior-tiles2-186)
 $8FF0 DEFB $2F,$6E,$2F,$6F,$63,$4F,$6F,$2C ; #UDGARRAY1,7,4,1;$8FF0-$8FF7-8(exterior-tiles2-187)
 $8FF8 DEFB $03,$0C,$30,$C0,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$8FF8-$8FFF-8(exterior-tiles2-188)
 $9000 DEFB $70,$40,$00,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9000-$9007-8(exterior-tiles2-189)
 $9008 DEFB $02,$40,$03,$0F,$3B,$7C,$70,$40 ; #UDGARRAY1,7,4,1;$9008-$900F-8(exterior-tiles2-190)
 $9010 DEFB $00,$00,$00,$00,$03,$0C,$30,$40 ; #UDGARRAY1,7,4,1;$9010-$9017-8(exterior-tiles2-191)
 $9018 DEFB $30,$F0,$B0,$F0,$F0,$D0,$F0,$F0 ; #UDGARRAY1,7,4,1;$9018-$901F-8(exterior-tiles2-192)
 $9020 DEFB $03,$0C,$30,$C0,$08,$20,$2C,$D3 ; #UDGARRAY1,7,4,1;$9020-$9027-8(exterior-tiles2-193)
 $9028 DEFB $F0,$D0,$F0,$F0,$F0,$B0,$F0,$CC ; #UDGARRAY1,7,4,1;$9028-$902F-8(exterior-tiles2-194)
 $9030 DEFB $FF,$3C,$03,$8D,$3F,$DC,$F0,$C0 ; #UDGARRAY1,7,4,1;$9030-$9037-8(exterior-tiles2-195)
 $9038 DEFB $2F,$CF,$F7,$FF,$DF,$FF,$EF,$FD ; #UDGARRAY1,7,4,1;$9038-$903F-8(exterior-tiles2-196)
 $9040 DEFB $2F,$CB,$2F,$EF,$AF,$ED,$EF,$EF ; #UDGARRAY1,7,4,1;$9040-$9047-8(exterior-tiles2-197)
 $9048 DEFB $EF,$AF,$EF,$E3,$EC,$2F,$CD,$EF ; #UDGARRAY1,7,4,1;$9048-$904F-8(exterior-tiles2-198)
 $9050 DEFB $C0,$E0,$E0,$EC,$E7,$E3,$2F,$CF ; #UDGARRAY1,7,4,1;$9050-$9057-8(exterior-tiles2-199)
 $9058 DEFB $C0,$30,$CC,$F3,$F0,$F0,$CC,$3C ; #UDGARRAY1,7,4,1;$9058-$905F-8(exterior-tiles2-200)
 $9060 DEFB $10,$08,$0B,$04,$C4,$34,$C4,$CB ; #UDGARRAY1,7,4,1;$9060-$9067-8(exterior-tiles2-201)
 $9068 DEFB $D6,$D6,$D6,$D6,$D2,$D0,$D4,$03 ; #UDGARRAY1,7,4,1;$9068-$906F-8(exterior-tiles2-202)
 $9070 DEFB $C0,$30,$CC,$93,$54,$D6,$D6,$D6 ; #UDGARRAY1,7,4,1;$9070-$9077-8(exterior-tiles2-203)
 $9078 DEFB $D6,$D2,$D4,$D6,$D6,$56,$96,$C6 ; #UDGARRAY1,7,4,1;$9078-$907F-8(exterior-tiles2-204)
 $9080 DEFB $F0,$DC,$CF,$D3,$D4,$D6,$56,$96 ; #UDGARRAY1,7,4,1;$9080-$9087-8(exterior-tiles2-205)
 $9088 DEFB $D4,$D6,$D6,$D2,$D4,$56,$96,$C6 ; #UDGARRAY1,7,4,1;$9088-$908F-8(exterior-tiles2-206)
 $9090 DEFB $00,$00,$00,$00,$01,$03,$05,$0F ; #UDGARRAY1,7,4,1;$9090-$9097-8(exterior-tiles2-207)
 $9098 DEFB $CB,$2B,$ED,$ED,$6D,$2D,$0D,$33 ; #UDGARRAY1,7,4,1;$9098-$909F-8(exterior-tiles2-208)
 $90A0 DEFB $D6,$D6,$D6,$D6,$D6,$D6,$C6,$D2 ; #UDGARRAY1,7,4,1;$90A0-$90A7-8(exterior-tiles2-209)
 $90A8 DEFB $1C,$0F,$03,$00,$10,$00,$00,$02 ; #UDGARRAY1,7,4,1;$90A8-$90AF-8(exterior-tiles2-210)
 $90B0 DEFB $56,$16,$C6,$F2,$3C,$0B,$04,$03 ; #UDGARRAY1,7,4,1;$90B0-$90B7-8(exterior-tiles2-211)
 $90B8 DEFB $D6,$D2,$D4,$83,$4C,$32,$C8,$2C ; #UDGARRAY1,7,4,1;$90B8-$90BF-8(exterior-tiles2-212)
 $90C0 DEFB $D6,$D6,$16,$C6,$F2,$3C,$CF,$D3 ; #UDGARRAY1,7,4,1;$90C0-$90C7-8(exterior-tiles2-213)
 $90C8 DEFB $0F,$0C,$03,$0F,$3F,$2F,$3C,$33 ; #UDGARRAY1,7,4,1;$90C8-$90CF-8(exterior-tiles2-214)
 $90D0 DEFB $CB,$0B,$0D,$0D,$8D,$ED,$4D,$33 ; #UDGARRAY1,7,4,1;$90D0-$90D7-8(exterior-tiles2-215)
 $90D8 DEFB $0B,$0F,$2F,$CD,$32,$4C,$03,$04 ; #UDGARRAY1,7,4,1;$90D8-$90DF-8(exterior-tiles2-216)
 $90E0 DEFB $23,$CF,$33,$4C,$53,$5C,$2F,$23 ; #UDGARRAY1,7,4,1;$90E0-$90E7-8(exterior-tiles2-217)
 $90E8 DEFB $D3,$D0,$B0,$B0,$B3,$B7,$B3,$CC ; #UDGARRAY1,7,4,1;$90E8-$90EF-8(exterior-tiles2-218)
 $90F0 DEFB $D3,$D4,$B6,$B7,$B7,$B4,$F0,$EC ; #UDGARRAY1,7,4,1;$90F0-$90F7-8(exterior-tiles2-219)
; Exterior tiles set 3. 243 tiles. Looks like main building wall tiles.
 $90F8 DEFB $4C,$32,$C0,$20,$04,$03,$0C,$32 ; #UDGARRAY1,7,4,1;$90F8-$90FF-8(exterior-tiles3-000)
 $9100 DEFB $18,$3C,$78,$B4,$E0,$CC,$A3,$44 ; #UDGARRAY1,7,4,1;$9100-$9107-8(exterior-tiles3-001)
 $9108 DEFB $40,$08,$08,$00,$00,$00,$20,$C0 ; #UDGARRAY1,7,4,1;$9108-$910F-8(exterior-tiles3-002)
 $9110 DEFB $1E,$2C,$7B,$64,$98,$B0,$D0,$CC ; #UDGARRAY1,7,4,1;$9110-$9117-8(exterior-tiles3-003)
 $9118 DEFB $00,$00,$00,$00,$80,$C0,$A0,$F0 ; #UDGARRAY1,7,4,1;$9118-$911F-8(exterior-tiles3-004)
 $9120 DEFB $32,$4C,$03,$04,$00,$00,$20,$C0 ; #UDGARRAY1,7,4,1;$9120-$9127-8(exterior-tiles3-005)
 $9128 DEFB $00,$00,$20,$C0,$32,$4C,$03,$04 ; #UDGARRAY1,7,4,1;$9128-$912F-8(exterior-tiles3-006)
 $9130 DEFB $32,$4C,$03,$04,$01,$03,$25,$CF ; #UDGARRAY1,7,4,1;$9130-$9137-8(exterior-tiles3-007)
 $9138 DEFB $D3,$D0,$B0,$B0,$B0,$B0,$B0,$CC ; #UDGARRAY1,7,4,1;$9138-$913F-8(exterior-tiles3-008)
 $9140 DEFB $20,$C0,$30,$4C,$43,$40,$20,$20 ; #UDGARRAY1,7,4,1;$9140-$9147-8(exterior-tiles3-009)
 $9148 DEFB $32,$4C,$03,$04,$20,$C0,$30,$4C ; #UDGARRAY1,7,4,1;$9148-$914F-8(exterior-tiles3-010)
 $9150 DEFB $43,$40,$20,$20,$20,$C0,$30,$4C ; #UDGARRAY1,7,4,1;$9150-$9157-8(exterior-tiles3-011)
 $9158 DEFB $20,$C0,$30,$4C,$42,$40,$20,$20 ; #UDGARRAY1,7,4,1;$9158-$915F-8(exterior-tiles3-012)
 $9160 DEFB $03,$00,$40,$40,$20,$04,$04,$00 ; #UDGARRAY1,7,4,1;$9160-$9167-8(exterior-tiles3-013)
 $9168 DEFB $20,$C0,$30,$4C,$02,$10,$08,$48 ; #UDGARRAY1,7,4,1;$9168-$916F-8(exterior-tiles3-014)
 $9170 DEFB $20,$C0,$30,$4C,$03,$00,$30,$00 ; #UDGARRAY1,7,4,1;$9170-$9177-8(exterior-tiles3-015)
 $9178 DEFB $D3,$D0,$B0,$B0,$B0,$B0,$B0,$EC ; #UDGARRAY1,7,4,1;$9178-$917F-8(exterior-tiles3-016)
 $9180 DEFB $63,$00,$00,$00,$04,$24,$14,$00 ; #UDGARRAY1,7,4,1;$9180-$9187-8(exterior-tiles3-017)
 $9188 DEFB $40,$40,$01,$09,$08,$04,$64,$00 ; #UDGARRAY1,7,4,1;$9188-$918F-8(exterior-tiles3-018)
 $9190 DEFB $00,$04,$05,$42,$22,$20,$08,$00 ; #UDGARRAY1,7,4,1;$9190-$9197-8(exterior-tiles3-019)
 $9198 DEFB $00,$12,$02,$40,$40,$24,$28,$08 ; #UDGARRAY1,7,4,1;$9198-$919F-8(exterior-tiles3-020)
 $91A0 DEFB $C2,$02,$04,$20,$20,$10,$02,$00 ; #UDGARRAY1,7,4,1;$91A0-$91A7-8(exterior-tiles3-021)
 $91A8 DEFB $40,$08,$0A,$04,$04,$40,$40,$20 ; #UDGARRAY1,7,4,1;$91A8-$91AF-8(exterior-tiles3-022)
 $91B0 DEFB $00,$20,$10,$00,$00,$08,$08,$00 ; #UDGARRAY1,7,4,1;$91B0-$91B7-8(exterior-tiles3-023)
 $91B8 DEFB $40,$00,$00,$10,$10,$00,$04,$03 ; #UDGARRAY1,7,4,1;$91B8-$91BF-8(exterior-tiles3-024)
 $91C0 DEFB $18,$3C,$1E,$2D,$07,$33,$C5,$22 ; #UDGARRAY1,7,4,1;$91C0-$91C7-8(exterior-tiles3-025)
 $91C8 DEFB $0C,$30,$C0,$20,$80,$C0,$A4,$F3 ; #UDGARRAY1,7,4,1;$91C8-$91CF-8(exterior-tiles3-026)
 $91D0 DEFB $00,$00,$04,$03,$4C,$32,$C0,$20 ; #UDGARRAY1,7,4,1;$91D0-$91D7-8(exterior-tiles3-027)
 $91D8 DEFB $4C,$32,$C0,$20,$00,$00,$04,$03 ; #UDGARRAY1,7,4,1;$91D8-$91DF-8(exterior-tiles3-028)
 $91E0 DEFB $78,$34,$DE,$26,$19,$0D,$0B,$33 ; #UDGARRAY1,7,4,1;$91E0-$91E7-8(exterior-tiles3-029)
 $91E8 DEFB $04,$03,$0C,$32,$C2,$02,$04,$04 ; #UDGARRAY1,7,4,1;$91E8-$91EF-8(exterior-tiles3-030)
 $91F0 DEFB $CB,$0B,$0D,$0D,$0D,$0D,$0D,$33 ; #UDGARRAY1,7,4,1;$91F0-$91F7-8(exterior-tiles3-031)
 $91F8 DEFB $C2,$02,$04,$04,$04,$03,$0C,$32 ; #UDGARRAY1,7,4,1;$91F8-$91FF-8(exterior-tiles3-032)
 $9200 DEFB $C0,$00,$00,$08,$04,$44,$40,$00 ; #UDGARRAY1,7,4,1;$9200-$9207-8(exterior-tiles3-033)
 $9208 DEFB $04,$03,$0C,$32,$C0,$00,$02,$00 ; #UDGARRAY1,7,4,1;$9208-$920F-8(exterior-tiles3-034)
 $9210 DEFB $C6,$00,$10,$12,$0A,$48,$00,$00 ; #UDGARRAY1,7,4,1;$9210-$9217-8(exterior-tiles3-035)
 $9218 DEFB $04,$03,$0C,$30,$40,$00,$0C,$00 ; #UDGARRAY1,7,4,1;$9218-$921F-8(exterior-tiles3-036)
 $9220 DEFB $04,$03,$0C,$32,$42,$02,$04,$04 ; #UDGARRAY1,7,4,1;$9220-$9227-8(exterior-tiles3-037)
 $9228 DEFB $00,$01,$00,$30,$00,$02,$00,$00 ; #UDGARRAY1,7,4,1;$9228-$922F-8(exterior-tiles3-038)
 $9230 DEFB $02,$00,$00,$00,$40,$00,$0C,$00 ; #UDGARRAY1,7,4,1;$9230-$9237-8(exterior-tiles3-039)
 $9238 DEFB $02,$80,$00,$08,$04,$00,$60,$00 ; #UDGARRAY1,7,4,1;$9238-$923F-8(exterior-tiles3-040)
 $9240 DEFB $00,$00,$20,$01,$00,$00,$00,$20 ; #UDGARRAY1,7,4,1;$9240-$9247-8(exterior-tiles3-041)
 $9248 DEFB $23,$C3,$33,$4A,$02,$02,$02,$03 ; #UDGARRAY1,7,4,1;$9248-$924F-8(exterior-tiles3-042)
 $9250 DEFB $44,$43,$4C,$D2,$C0,$C0,$C0,$C0 ; #UDGARRAY1,7,4,1;$9250-$9257-8(exterior-tiles3-043)
 $9258 DEFB $23,$C3,$33,$4A,$42,$42,$22,$22 ; #UDGARRAY1,7,4,1;$9258-$925F-8(exterior-tiles3-044)
 $9260 DEFB $44,$43,$4C,$D2,$C2,$C2,$C4,$C4 ; #UDGARRAY1,7,4,1;$9260-$9267-8(exterior-tiles3-045)
 $9268 DEFB $03,$03,$C2,$33,$0B,$03,$02,$02 ; #UDGARRAY1,7,4,1;$9268-$926F-8(exterior-tiles3-046)
 $9270 DEFB $40,$C0,$C3,$CC,$D0,$C0,$C0,$C0 ; #UDGARRAY1,7,4,1;$9270-$9277-8(exterior-tiles3-047)
 $9278 DEFB $01,$03,$22,$C3,$33,$4B,$02,$03 ; #UDGARRAY1,7,4,1;$9278-$927F-8(exterior-tiles3-048)
 $9280 DEFB $80,$C0,$C4,$C3,$4C,$D2,$C0,$C0 ; #UDGARRAY1,7,4,1;$9280-$9287-8(exterior-tiles3-049)
 $9288 DEFB $1E,$3C,$7B,$64,$F8,$C0,$B0,$BC ; #UDGARRAY1,7,4,1;$9288-$928F-8(exterior-tiles3-050)
 $9290 DEFB $BF,$CF,$B3,$B4,$B7,$D6,$D6,$D6 ; #UDGARRAY1,7,4,1;$9290-$9297-8(exterior-tiles3-051)
 $9298 DEFB $B7,$AE,$AF,$AF,$AF,$AF,$AF,$B7 ; #UDGARRAY1,7,4,1;$9298-$929F-8(exterior-tiles3-052)
 $92A0 DEFB $D7,$D6,$D7,$B7,$B7,$B7,$B7,$D7 ; #UDGARRAY1,7,4,1;$92A0-$92A7-8(exterior-tiles3-053)
 $92A8 DEFB $67,$06,$02,$40,$40,$00,$04,$00 ; #UDGARRAY1,7,4,1;$92A8-$92AF-8(exterior-tiles3-054)
 $92B0 DEFB $32,$4C,$03,$04,$00,$C0,$F0,$FC ; #UDGARRAY1,7,4,1;$92B0-$92B7-8(exterior-tiles3-055)
 $92B8 DEFB $00,$C0,$70,$FC,$3F,$CD,$F3,$FC ; #UDGARRAY1,7,4,1;$92B8-$92BF-8(exterior-tiles3-056)
 $92C0 DEFB $00,$C0,$F0,$DC,$3E,$CE,$F2,$F4 ; #UDGARRAY1,7,4,1;$92C0-$92C7-8(exterior-tiles3-057)
 $92C8 DEFB $2E,$CE,$2E,$4E,$4E,$4E,$2E,$2E ; #UDGARRAY1,7,4,1;$92C8-$92CF-8(exterior-tiles3-058)
 $92D0 DEFB $43,$40,$20,$20,$20,$A0,$D0,$FC ; #UDGARRAY1,7,4,1;$92D0-$92D7-8(exterior-tiles3-059)
 $92D8 DEFB $2E,$AE,$D6,$F6,$36,$0E,$02,$00 ; #UDGARRAY1,7,4,1;$92D8-$92DF-8(exterior-tiles3-060)
 $92E0 DEFB $3F,$0F,$03,$40,$40,$20,$02,$00 ; #UDGARRAY1,7,4,1;$92E0-$92E7-8(exterior-tiles3-061)
 $92E8 DEFB $20,$A0,$D0,$FC,$3F,$0F,$03,$40 ; #UDGARRAY1,7,4,1;$92E8-$92EF-8(exterior-tiles3-062)
 $92F0 DEFB $36,$CE,$2E,$4E,$4E,$4E,$2E,$2E ; #UDGARRAY1,7,4,1;$92F0-$92F7-8(exterior-tiles3-063)
 $92F8 DEFB $37,$CF,$F3,$FC,$3F,$CF,$33,$4C ; #UDGARRAY1,7,4,1;$92F8-$92FF-8(exterior-tiles3-064)
 $9300 DEFB $B3,$B0,$B0,$B0,$B0,$B0,$B0,$BC ; #UDGARRAY1,7,4,1;$9300-$9307-8(exterior-tiles3-065)
 $9308 DEFB $B3,$B0,$B0,$B0,$B0,$B0,$B0,$AC ; #UDGARRAY1,7,4,1;$9308-$930F-8(exterior-tiles3-066)
 $9310 DEFB $3F,$CF,$33,$4C,$43,$40,$20,$20 ; #UDGARRAY1,7,4,1;$9310-$9317-8(exterior-tiles3-067)
 $9318 DEFB $3F,$8F,$B3,$BC,$BF,$BF,$B3,$AC ; #UDGARRAY1,7,4,1;$9318-$931F-8(exterior-tiles3-068)
 $9320 DEFB $21,$C1,$31,$4D,$41,$41,$21,$21 ; #UDGARRAY1,7,4,1;$9320-$9327-8(exterior-tiles3-069)
 $9328 DEFB $21,$A1,$D1,$FD,$3F,$0F,$03,$00 ; #UDGARRAY1,7,4,1;$9328-$932F-8(exterior-tiles3-070)
 $9330 DEFB $3F,$CF,$33,$4D,$41,$41,$21,$21 ; #UDGARRAY1,7,4,1;$9330-$9337-8(exterior-tiles3-071)
 $9338 DEFB $00,$00,$00,$00,$92,$CC,$A3,$F0 ; #UDGARRAY1,7,4,1;$9338-$933F-8(exterior-tiles3-072)
 $9340 DEFB $20,$C0,$30,$4C,$43,$40,$24,$03 ; #UDGARRAY1,7,4,1;$9340-$9347-8(exterior-tiles3-073)
 $9348 DEFB $4C,$30,$C0,$2C,$03,$40,$44,$03 ; #UDGARRAY1,7,4,1;$9348-$934F-8(exterior-tiles3-074)
 $9350 DEFB $4C,$30,$C0,$0C,$00,$13,$0C,$32 ; #UDGARRAY1,7,4,1;$9350-$9357-8(exterior-tiles3-075)
 $9358 DEFB $44,$43,$0C,$32,$C2,$02,$34,$04 ; #UDGARRAY1,7,4,1;$9358-$935F-8(exterior-tiles3-076)
 $9360 DEFB $C2,$02,$34,$04,$44,$43,$0C,$32 ; #UDGARRAY1,7,4,1;$9360-$9367-8(exterior-tiles3-077)
 $9368 DEFB $CB,$0B,$2D,$0D,$4D,$4D,$0D,$33 ; #UDGARRAY1,7,4,1;$9368-$936F-8(exterior-tiles3-078)
 $9370 DEFB $20,$C0,$30,$4C,$43,$40,$04,$03 ; #UDGARRAY1,7,4,1;$9370-$9377-8(exterior-tiles3-079)
 $9378 DEFB $43,$40,$04,$03,$4C,$32,$C0,$2C ; #UDGARRAY1,7,4,1;$9378-$937F-8(exterior-tiles3-080)
 $9380 DEFB $03,$40,$44,$03,$4C,$32,$C0,$2C ; #UDGARRAY1,7,4,1;$9380-$9387-8(exterior-tiles3-081)
 $9388 DEFB $D3,$D0,$B4,$03,$4C,$32,$C0,$20 ; #UDGARRAY1,7,4,1;$9388-$938F-8(exterior-tiles3-082)
 $9390 DEFB $C3,$00,$04,$03,$4C,$32,$C0,$20 ; #UDGARRAY1,7,4,1;$9390-$9397-8(exterior-tiles3-083)
 $9398 DEFB $00,$00,$20,$20,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9398-$939F-8(exterior-tiles3-084)
 $93A0 DEFB $00,$00,$00,$18,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$93A0-$93A7-8(exterior-tiles3-085)
 $93A8 DEFB $00,$08,$04,$00,$00,$00,$00,$20 ; #UDGARRAY1,7,4,1;$93A8-$93AF-8(exterior-tiles3-086)
 $93B0 DEFB $10,$00,$00,$00,$00,$02,$04,$00 ; #UDGARRAY1,7,4,1;$93B0-$93B7-8(exterior-tiles3-087)
 $93B8 DEFB $04,$03,$0C,$32,$42,$02,$24,$C0 ; #UDGARRAY1,7,4,1;$93B8-$93BF-8(exterior-tiles3-088)
 $93C0 DEFB $04,$03,$0C,$32,$C0,$00,$20,$C0 ; #UDGARRAY1,7,4,1;$93C0-$93C7-8(exterior-tiles3-089)
 $93C8 DEFB $00,$60,$94,$F3,$B4,$B2,$D0,$D0 ; #UDGARRAY1,7,4,1;$93C8-$93CF-8(exterior-tiles3-090)
 $93D0 DEFB $32,$4C,$03,$34,$41,$03,$25,$CF ; #UDGARRAY1,7,4,1;$93D0-$93D7-8(exterior-tiles3-091)
 $93D8 DEFB $CB,$0B,$2D,$CD,$32,$4C,$03,$34 ; #UDGARRAY1,7,4,1;$93D8-$93DF-8(exterior-tiles3-092)
 $93E0 DEFB $C2,$02,$22,$C0,$32,$4C,$03,$34 ; #UDGARRAY1,7,4,1;$93E0-$93E7-8(exterior-tiles3-093)
 $93E8 DEFB $C0,$02,$20,$C0,$32,$4C,$03,$04 ; #UDGARRAY1,7,4,1;$93E8-$93EF-8(exterior-tiles3-094)
 $93F0 DEFB $32,$4C,$03,$34,$C0,$02,$22,$C0 ; #UDGARRAY1,7,4,1;$93F0-$93F7-8(exterior-tiles3-095)
 $93F8 DEFB $20,$C2,$30,$4C,$43,$40,$2C,$20 ; #UDGARRAY1,7,4,1;$93F8-$93FF-8(exterior-tiles3-096)
 $9400 DEFB $D3,$D0,$B4,$B2,$B2,$B2,$B0,$CC ; #UDGARRAY1,7,4,1;$9400-$9407-8(exterior-tiles3-097)
 $9408 DEFB $32,$4C,$03,$04,$20,$C2,$30,$4C ; #UDGARRAY1,7,4,1;$9408-$940F-8(exterior-tiles3-098)
 $9410 DEFB $0A,$CE,$32,$4C,$42,$4C,$2E,$26 ; #UDGARRAY1,7,4,1;$9410-$9417-8(exterior-tiles3-099)
 $9418 DEFB $0C,$00,$20,$C0,$32,$4C,$03,$34 ; #UDGARRAY1,7,4,1;$9418-$941F-8(exterior-tiles3-100)
 $9420 DEFB $F2,$CC,$D3,$D4,$B0,$B0,$B0,$CC ; #UDGARRAY1,7,4,1;$9420-$9427-8(exterior-tiles3-101)
 $9428 DEFB $22,$C2,$30,$4C,$43,$40,$2C,$22 ; #UDGARRAY1,7,4,1;$9428-$942F-8(exterior-tiles3-102)
 $9430 DEFB $22,$C2,$30,$4C,$43,$40,$20,$20 ; #UDGARRAY1,7,4,1;$9430-$9437-8(exterior-tiles3-103)
 $9438 DEFB $43,$40,$2C,$22,$22,$C2,$30,$4C ; #UDGARRAY1,7,4,1;$9438-$943F-8(exterior-tiles3-104)
 $9440 DEFB $00,$21,$10,$10,$03,$0C,$33,$CC ; #UDGARRAY1,7,4,1;$9440-$9447-8(exterior-tiles3-105)
 $9448 DEFB $40,$8C,$30,$C4,$30,$C0,$0E,$12 ; #UDGARRAY1,7,4,1;$9448-$944F-8(exterior-tiles3-106)
 $9450 DEFB $33,$0C,$03,$40,$44,$44,$20,$00 ; #UDGARRAY1,7,4,1;$9450-$9457-8(exterior-tiles3-107)
 $9458 DEFB $0C,$C0,$03,$C0,$30,$02,$0A,$04 ; #UDGARRAY1,7,4,1;$9458-$945F-8(exterior-tiles3-108)
 $9460 DEFB $00,$40,$E0,$00,$C2,$E0,$C0,$00 ; #UDGARRAY1,7,4,1;$9460-$9467-8(exterior-tiles3-109)
 $9468 DEFB $31,$CD,$32,$0D,$3E,$19,$02,$02 ; #UDGARRAY1,7,4,1;$9468-$946F-8(exterior-tiles3-110)
 $9470 DEFB $8C,$B3,$4C,$B0,$7C,$99,$C0,$C0 ; #UDGARRAY1,7,4,1;$9470-$9477-8(exterior-tiles3-111)
 $9478 DEFB $00,$02,$07,$00,$43,$07,$02,$00 ; #UDGARRAY1,7,4,1;$9478-$947F-8(exterior-tiles3-112)
 $9480 DEFB $D9,$DB,$2A,$CB,$33,$4B,$B2,$DB ; #UDGARRAY1,7,4,1;$9480-$9487-8(exterior-tiles3-113)
 $9488 DEFB $9B,$DB,$D4,$D3,$4C,$D2,$CD,$DB ; #UDGARRAY1,7,4,1;$9488-$948F-8(exterior-tiles3-114)
 $9490 DEFB $3B,$CB,$33,$CA,$E2,$EA,$EA,$EA ; #UDGARRAY1,7,4,1;$9490-$9497-8(exterior-tiles3-115)
 $9498 DEFB $5C,$53,$4C,$D3,$C7,$D7,$D7,$D7 ; #UDGARRAY1,7,4,1;$9498-$949F-8(exterior-tiles3-116)
 $94A0 DEFB $31,$CD,$32,$CC,$BE,$D8,$E0,$F8 ; #UDGARRAY1,7,4,1;$94A0-$94A7-8(exterior-tiles3-117)
 $94A8 DEFB $8C,$B3,$4C,$33,$7D,$1B,$07,$1F ; #UDGARRAY1,7,4,1;$94A8-$94AF-8(exterior-tiles3-118)
 $94B0 DEFB $32,$4C,$33,$34,$3A,$1A,$2A,$C8 ; #UDGARRAY1,7,4,1;$94B0-$94B7-8(exterior-tiles3-119)
 $94B8 DEFB $32,$4C,$33,$14,$2A,$CA,$32,$4C ; #UDGARRAY1,7,4,1;$94B8-$94BF-8(exterior-tiles3-120)
 $94C0 DEFB $53,$54,$26,$26,$2A,$CA,$32,$4C ; #UDGARRAY1,7,4,1;$94C0-$94C7-8(exterior-tiles3-121)
 $94C8 DEFB $3B,$C3,$33,$0B,$02,$02,$03,$01 ; #UDGARRAY1,7,4,1;$94C8-$94CF-8(exterior-tiles3-122)
 $94D0 DEFB $D8,$D8,$D8,$D8,$E8,$E8,$E8,$E8 ; #UDGARRAY1,7,4,1;$94D0-$94D7-8(exterior-tiles3-123)
 $94D8 DEFB $1B,$1B,$1B,$1B,$17,$17,$17,$17 ; #UDGARRAY1,7,4,1;$94D8-$94DF-8(exterior-tiles3-124)
 $94E0 DEFB $5C,$43,$4C,$50,$C0,$C0,$C0,$80 ; #UDGARRAY1,7,4,1;$94E0-$94E7-8(exterior-tiles3-125)
 $94E8 DEFB $4C,$32,$CC,$2C,$5C,$58,$54,$13 ; #UDGARRAY1,7,4,1;$94E8-$94EF-8(exterior-tiles3-126)
 $94F0 DEFB $4C,$32,$CC,$28,$54,$53,$4C,$32 ; #UDGARRAY1,7,4,1;$94F0-$94F7-8(exterior-tiles3-127)
 $94F8 DEFB $CA,$2A,$64,$64,$54,$53,$4C,$32 ; #UDGARRAY1,7,4,1;$94F8-$94FF-8(exterior-tiles3-128)
 $9500 DEFB $36,$36,$36,$36,$3A,$1A,$2A,$C8 ; #UDGARRAY1,7,4,1;$9500-$9507-8(exterior-tiles3-129)
 $9508 DEFB $6C,$6C,$6C,$6C,$5C,$58,$54,$13 ; #UDGARRAY1,7,4,1;$9508-$950F-8(exterior-tiles3-130)
 $9510 DEFB $0B,$43,$02,$C2,$F3,$3D,$CE,$03 ; #UDGARRAY1,7,4,1;$9510-$9517-8(exterior-tiles3-131)
 $9518 DEFB $42,$50,$C0,$C3,$CF,$BC,$70,$CC ; #UDGARRAY1,7,4,1;$9518-$951F-8(exterior-tiles3-132)
 $9520 DEFB $C0,$0C,$30,$C3,$0C,$33,$CC,$30 ; #UDGARRAY1,7,4,1;$9520-$9527-8(exterior-tiles3-133)
 $9528 DEFB $01,$0D,$20,$C3,$0C,$33,$CC,$30 ; #UDGARRAY1,7,4,1;$9528-$952F-8(exterior-tiles3-134)
 $9530 DEFB $00,$21,$10,$10,$03,$0C,$32,$CD ; #UDGARRAY1,7,4,1;$9530-$9537-8(exterior-tiles3-135)
 $9538 DEFB $13,$1C,$1C,$1C,$1D,$1D,$1C,$2C ; #UDGARRAY1,7,4,1;$9538-$953F-8(exterior-tiles3-136)
 $9540 DEFB $CC,$3C,$6C,$6C,$5C,$5C,$5C,$5C ; #UDGARRAY1,7,4,1;$9540-$9547-8(exterior-tiles3-137)
 $9548 DEFB $03,$30,$08,$C3,$30,$CC,$33,$0C ; #UDGARRAY1,7,4,1;$9548-$954F-8(exterior-tiles3-138)
 $9550 DEFB $82,$80,$08,$C2,$30,$CC,$33,$0C ; #UDGARRAY1,7,4,1;$9550-$9557-8(exterior-tiles3-139)
 $9558 DEFB $F0,$3C,$0F,$03,$08,$83,$20,$0C ; #UDGARRAY1,7,4,1;$9558-$955F-8(exterior-tiles3-140)
 $9560 DEFB $F0,$3C,$8F,$83,$88,$83,$A0,$8C ; #UDGARRAY1,7,4,1;$9560-$9567-8(exterior-tiles3-141)
 $9568 DEFB $0F,$3C,$F1,$C1,$01,$01,$C1,$09 ; #UDGARRAY1,7,4,1;$9568-$956F-8(exterior-tiles3-142)
 $9570 DEFB $30,$CC,$33,$4C,$E3,$80,$08,$00 ; #UDGARRAY1,7,4,1;$9570-$9577-8(exterior-tiles3-143)
 $9578 DEFB $33,$3C,$36,$36,$3A,$3A,$3A,$3A ; #UDGARRAY1,7,4,1;$9578-$957F-8(exterior-tiles3-144)
 $9580 DEFB $C0,$30,$4C,$03,$10,$02,$40,$03 ; #UDGARRAY1,7,4,1;$9580-$9587-8(exterior-tiles3-145)
 $9588 DEFB $0C,$33,$CC,$32,$C7,$01,$20,$00 ; #UDGARRAY1,7,4,1;$9588-$958F-8(exterior-tiles3-146)
 $9590 DEFB $C8,$38,$38,$38,$B8,$B8,$38,$34 ; #UDGARRAY1,7,4,1;$9590-$9597-8(exterior-tiles3-147)
 $9598 DEFB $07,$40,$08,$20,$C0,$04,$30,$C3 ; #UDGARRAY1,7,4,1;$9598-$959F-8(exterior-tiles3-148)
 $95A0 DEFB $C0,$F0,$1C,$83,$0C,$33,$CC,$30 ; #UDGARRAY1,7,4,1;$95A0-$95A7-8(exterior-tiles3-149)
 $95A8 DEFB $00,$00,$00,$C0,$F3,$3C,$8F,$03 ; #UDGARRAY1,7,4,1;$95A8-$95AF-8(exterior-tiles3-150)
 $95B0 DEFB $03,$0F,$38,$C1,$30,$8C,$33,$0C ; #UDGARRAY1,7,4,1;$95B0-$95B7-8(exterior-tiles3-151)
 $95B8 DEFB $03,$0C,$30,$C2,$10,$00,$08,$C1 ; #UDGARRAY1,7,4,1;$95B8-$95BF-8(exterior-tiles3-152)
 $95C0 DEFB $E0,$02,$10,$0C,$01,$30,$04,$C3 ; #UDGARRAY1,7,4,1;$95C0-$95C7-8(exterior-tiles3-153)
 $95C8 DEFB $02,$02,$00,$10,$C0,$30,$4C,$B3 ; #UDGARRAY1,7,4,1;$95C8-$95CF-8(exterior-tiles3-154)
 $95D0 DEFB $06,$38,$C0,$10,$C0,$32,$0C,$03 ; #UDGARRAY1,7,4,1;$95D0-$95D7-8(exterior-tiles3-155)
 $95D8 DEFB $60,$1C,$03,$08,$03,$4C,$30,$C0 ; #UDGARRAY1,7,4,1;$95D8-$95DF-8(exterior-tiles3-156)
 $95E0 DEFB $C0,$30,$0C,$E3,$18,$07,$20,$00 ; #UDGARRAY1,7,4,1;$95E0-$95E7-8(exterior-tiles3-157)
 $95E8 DEFB $00,$04,$04,$00,$C1,$30,$CC,$3B ; #UDGARRAY1,7,4,1;$95E8-$95EF-8(exterior-tiles3-158)
 $95F0 DEFB $03,$0C,$30,$C7,$18,$E0,$04,$00 ; #UDGARRAY1,7,4,1;$95F0-$95F7-8(exterior-tiles3-159)
 $95F8 DEFB $00,$22,$20,$00,$03,$0C,$33,$DC ; #UDGARRAY1,7,4,1;$95F8-$95FF-8(exterior-tiles3-160)
 $9600 DEFB $36,$36,$36,$36,$3A,$3A,$3A,$3A ; #UDGARRAY1,7,4,1;$9600-$9607-8(exterior-tiles3-161)
 $9608 DEFB $36,$32,$34,$33,$4C,$32,$C8,$2A ; #UDGARRAY1,7,4,1;$9608-$960F-8(exterior-tiles3-162)
 $9610 DEFB $34,$33,$0C,$32,$CA,$3A,$34,$34 ; #UDGARRAY1,7,4,1;$9610-$9617-8(exterior-tiles3-163)
 $9618 DEFB $D9,$DB,$DA,$DB,$EB,$EB,$EA,$A3 ; #UDGARRAY1,7,4,1;$9618-$961F-8(exterior-tiles3-164)
 $9620 DEFB $4D,$33,$CA,$2B,$CB,$EB,$EA,$A3 ; #UDGARRAY1,7,4,1;$9620-$9627-8(exterior-tiles3-165)
 $9628 DEFB $4D,$33,$CB,$2A,$CA,$E2,$CC,$B2 ; #UDGARRAY1,7,4,1;$9628-$962F-8(exterior-tiles3-166)
 $9630 DEFB $C3,$03,$03,$03,$02,$02,$0B,$33 ; #UDGARRAY1,7,4,1;$9630-$9637-8(exterior-tiles3-167)
 $9638 DEFB $CB,$1B,$DB,$DA,$EA,$E2,$CC,$32 ; #UDGARRAY1,7,4,1;$9638-$963F-8(exterior-tiles3-168)
 $9640 DEFB $30,$C3,$00,$33,$CF,$3C,$F0,$C0 ; #UDGARRAY1,7,4,1;$9640-$9647-8(exterior-tiles3-169)
 $9648 DEFB $00,$30,$42,$04,$10,$C3,$08,$03 ; #UDGARRAY1,7,4,1;$9648-$964F-8(exterior-tiles3-170)
 $9650 DEFB $0F,$3C,$F0,$C0,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9650-$9657-8(exterior-tiles3-171)
 $9658 DEFB $09,$C3,$31,$0D,$C3,$11,$0D,$C3 ; #UDGARRAY1,7,4,1;$9658-$965F-8(exterior-tiles3-172)
 $9660 DEFB $90,$C2,$8C,$B0,$C3,$84,$B0,$80 ; #UDGARRAY1,7,4,1;$9660-$9667-8(exterior-tiles3-173)
 $9668 DEFB $08,$30,$C2,$04,$30,$80,$08,$20 ; #UDGARRAY1,7,4,1;$9668-$966F-8(exterior-tiles3-174)
 $9670 DEFB $00,$C0,$30,$00,$C0,$30,$0C,$C0 ; #UDGARRAY1,7,4,1;$9670-$9677-8(exterior-tiles3-175)
 $9678 DEFB $20,$0C,$C0,$30,$08,$43,$30,$0C ; #UDGARRAY1,7,4,1;$9678-$967F-8(exterior-tiles3-176)
 $9680 DEFB $C3,$31,$0D,$81,$31,$0D,$43,$31 ; #UDGARRAY1,7,4,1;$9680-$9687-8(exterior-tiles3-177)
 $9688 DEFB $C3,$84,$B0,$C3,$8C,$90,$C3,$8C ; #UDGARRAY1,7,4,1;$9688-$968F-8(exterior-tiles3-178)
 $9690 DEFB $CB,$0B,$0D,$0D,$0D,$CD,$CD,$33 ; #UDGARRAY1,7,4,1;$9690-$9697-8(exterior-tiles3-179)
 $9698 DEFB $CB,$2B,$ED,$ED,$ED,$2D,$0D,$37 ; #UDGARRAY1,7,4,1;$9698-$969F-8(exterior-tiles3-180)
 $96A0 DEFB $F4,$33,$0C,$32,$C2,$02,$04,$04 ; #UDGARRAY1,7,4,1;$96A0-$96A7-8(exterior-tiles3-181)
 $96A8 DEFB $04,$C3,$CC,$32,$0A,$3A,$F5,$F5 ; #UDGARRAY1,7,4,1;$96A8-$96AF-8(exterior-tiles3-182)
 $96B0 DEFB $C2,$02,$04,$04,$04,$43,$4C,$32 ; #UDGARRAY1,7,4,1;$96B0-$96B7-8(exterior-tiles3-183)
 $96B8 DEFB $CA,$3A,$75,$75,$74,$33,$0C,$32 ; #UDGARRAY1,7,4,1;$96B8-$96BF-8(exterior-tiles3-184)
 $96C0 DEFB $4C,$32,$CD,$2B,$D4,$33,$0C,$32 ; #UDGARRAY1,7,4,1;$96C0-$96C7-8(exterior-tiles3-185)
 $96C8 DEFB $4C,$32,$C0,$20,$00,$C0,$F4,$B3 ; #UDGARRAY1,7,4,1;$96C8-$96CF-8(exterior-tiles3-186)
 $96D0 DEFB $5F,$3B,$04,$03,$4C,$32,$C0,$20 ; #UDGARRAY1,7,4,1;$96D0-$96D7-8(exterior-tiles3-187)
 $96D8 DEFB $00,$40,$74,$33,$4C,$32,$CD,$2F ; #UDGARRAY1,7,4,1;$96D8-$96DF-8(exterior-tiles3-188)
 $96E0 DEFB $D6,$D6,$D6,$D6,$D6,$D2,$D4,$93 ; #UDGARRAY1,7,4,1;$96E0-$96E7-8(exterior-tiles3-189)
 $96E8 DEFB $CB,$2B,$CD,$ED,$2D,$0D,$0D,$33 ; #UDGARRAY1,7,4,1;$96E8-$96EF-8(exterior-tiles3-190)
 $96F0 DEFB $00,$00,$00,$00,$06,$0B,$0F,$0D ; #UDGARRAY1,7,4,1;$96F0-$96F7-8(exterior-tiles3-191)
 $96F8 DEFB $4F,$37,$CD,$2F,$0B,$0F,$0D,$0F ; #UDGARRAY1,7,4,1;$96F8-$96FF-8(exterior-tiles3-192)
 $9700 DEFB $00,$00,$00,$00,$60,$D0,$F0,$B0 ; #UDGARRAY1,7,4,1;$9700-$9707-8(exterior-tiles3-193)
 $9708 DEFB $F2,$AC,$F3,$F4,$D0,$F0,$F0,$B0 ; #UDGARRAY1,7,4,1;$9708-$970F-8(exterior-tiles3-194)
 $9710 DEFB $D3,$D0,$B0,$B0,$B3,$B7,$B3,$CC ; #UDGARRAY1,7,4,1;$9710-$9717-8(exterior-tiles3-195)
 $9718 DEFB $22,$CE,$32,$4C,$52,$5C,$AE,$2E ; #UDGARRAY1,7,4,1;$9718-$971F-8(exterior-tiles3-196)
 $9720 DEFB $D3,$D4,$B7,$B7,$B7,$B4,$B0,$CC ; #UDGARRAY1,7,4,1;$9720-$9727-8(exterior-tiles3-197)
 $9728 DEFB $2E,$CC,$30,$4C,$43,$40,$20,$20 ; #UDGARRAY1,7,4,1;$9728-$972F-8(exterior-tiles3-198)
 $9730 DEFB $43,$40,$20,$20,$23,$CF,$33,$4C ; #UDGARRAY1,7,4,1;$9730-$9737-8(exterior-tiles3-199)
 $9738 DEFB $53,$5C,$AF,$AF,$2F,$CC,$30,$4C ; #UDGARRAY1,7,4,1;$9738-$973F-8(exterior-tiles3-200)
 $9740 DEFB $0B,$0F,$2F,$CD,$32,$4C,$13,$14 ; #UDGARRAY1,7,4,1;$9740-$9747-8(exterior-tiles3-201)
 $9748 DEFB $7F,$7F,$3E,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9748-$974F-8(exterior-tiles3-202)
 $9750 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9750-$9757-8(exterior-tiles3-203)
 $9758 DEFB $4F,$73,$38,$CB,$F3,$F0,$30,$00 ; #UDGARRAY1,7,4,1;$9758-$975F-8(exterior-tiles3-204)
 $9760 DEFB $3C,$CC,$C0,$00,$C0,$C0,$C0,$00 ; #UDGARRAY1,7,4,1;$9760-$9767-8(exterior-tiles3-205)
; Interior tiles. 194 tiles.
 $9768 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9768-$976F-8(interior-tiles-000)
 $9770 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9770-$9777-8(interior-tiles-001)
 $9778 DEFB $00,$00,$00,$30,$40,$02,$0C,$80 ; #UDGARRAY1,7,4,1;$9778-$977F-8(interior-tiles-002)
 $9780 DEFB $00,$00,$00,$00,$00,$04,$08,$04 ; #UDGARRAY1,7,4,1;$9780-$9787-8(interior-tiles-003)
 $9788 DEFB $30,$FC,$3F,$CF,$C3,$C0,$C8,$C6 ; #UDGARRAY1,7,4,1;$9788-$978F-8(interior-tiles-004)
 $9790 DEFB $10,$60,$00,$C6,$F0,$FC,$3F,$0C ; #UDGARRAY1,7,4,1;$9790-$9797-8(interior-tiles-005)
 $9798 DEFB $00,$98,$62,$08,$20,$80,$04,$00 ; #UDGARRAY1,7,4,1;$9798-$979F-8(interior-tiles-006)
 $97A0 DEFB $24,$81,$00,$08,$01,$40,$20,$01 ; #UDGARRAY1,7,4,1;$97A0-$97A7-8(interior-tiles-007)
 $97A8 DEFB $40,$30,$00,$4C,$30,$00,$86,$08 ; #UDGARRAY1,7,4,1;$97A8-$97AF-8(interior-tiles-008)
 $97B0 DEFB $C8,$C0,$C2,$CC,$F0,$C0,$0C,$01 ; #UDGARRAY1,7,4,1;$97B0-$97B7-8(interior-tiles-009)
 $97B8 DEFB $23,$83,$03,$13,$03,$83,$43,$03 ; #UDGARRAY1,7,4,1;$97B8-$97BF-8(interior-tiles-010)
 $97C0 DEFB $00,$18,$00,$40,$02,$08,$20,$80 ; #UDGARRAY1,7,4,1;$97C0-$97C7-8(interior-tiles-011)
 $97C8 DEFB $03,$13,$03,$03,$43,$0C,$30,$80 ; #UDGARRAY1,7,4,1;$97C8-$97CF-8(interior-tiles-012)
 $97D0 DEFB $02,$08,$20,$80,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$97D0-$97D7-8(interior-tiles-013)
 $97D8 DEFB $08,$40,$00,$20,$00,$04,$40,$00 ; #UDGARRAY1,7,4,1;$97D8-$97DF-8(interior-tiles-014)
 $97E0 DEFB $40,$04,$02,$4C,$30,$00,$C3,$08 ; #UDGARRAY1,7,4,1;$97E0-$97E7-8(interior-tiles-015)
 $97E8 DEFB $00,$00,$03,$44,$8C,$1E,$0C,$40 ; #UDGARRAY1,7,4,1;$97E8-$97EF-8(interior-tiles-016)
 $97F0 DEFB $08,$06,$00,$63,$0F,$3F,$FC,$30 ; #UDGARRAY1,7,4,1;$97F0-$97F7-8(interior-tiles-017)
 $97F8 DEFB $0C,$3F,$FC,$F3,$C3,$0B,$23,$C3 ; #UDGARRAY1,7,4,1;$97F8-$97FF-8(interior-tiles-018)
 $9800 DEFB $40,$10,$04,$01,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9800-$9807-8(interior-tiles-019)
 $9808 DEFB $00,$00,$C0,$22,$31,$78,$30,$02 ; #UDGARRAY1,7,4,1;$9808-$980F-8(interior-tiles-020)
 $9810 DEFB $C4,$C1,$C0,$D0,$C0,$C1,$C2,$C0 ; #UDGARRAY1,7,4,1;$9810-$9817-8(interior-tiles-021)
 $9818 DEFB $13,$0B,$43,$33,$0F,$03,$20,$80 ; #UDGARRAY1,7,4,1;$9818-$981F-8(interior-tiles-022)
 $9820 DEFB $06,$20,$40,$34,$08,$03,$C0,$30 ; #UDGARRAY1,7,4,1;$9820-$9827-8(interior-tiles-023)
 $9828 DEFB $C0,$C8,$C0,$C0,$C2,$30,$0C,$01 ; #UDGARRAY1,7,4,1;$9828-$982F-8(interior-tiles-024)
 $9830 DEFB $00,$19,$46,$10,$04,$01,$20,$00 ; #UDGARRAY1,7,4,1;$9830-$9837-8(interior-tiles-025)
 $9838 DEFB $00,$00,$18,$00,$42,$10,$04,$01 ; #UDGARRAY1,7,4,1;$9838-$983F-8(interior-tiles-026)
 $9840 DEFB $81,$9B,$62,$01,$80,$23,$4F,$0B ; #UDGARRAY1,7,4,1;$9840-$9847-8(interior-tiles-027)
 $9848 DEFB $C3,$13,$03,$C3,$F3,$FC,$3F,$0C ; #UDGARRAY1,7,4,1;$9848-$984F-8(interior-tiles-028)
 $9850 DEFB $C8,$C4,$C0,$C3,$CF,$3F,$FC,$30 ; #UDGARRAY1,7,4,1;$9850-$9857-8(interior-tiles-029)
 $9858 DEFB $30,$FC,$3F,$CF,$C3,$C0,$98,$7E ; #UDGARRAY1,7,4,1;$9858-$985F-8(interior-tiles-030)
 $9860 DEFB $73,$4F,$77,$38,$16,$03,$40,$04 ; #UDGARRAY1,7,4,1;$9860-$9867-8(interior-tiles-031)
 $9868 DEFB $FF,$7E,$9C,$E8,$F2,$00,$20,$80 ; #UDGARRAY1,7,4,1;$9868-$986F-8(interior-tiles-032)
 $9870 DEFB $1B,$5F,$0E,$C5,$1F,$33,$6D,$7D ; #UDGARRAY1,7,4,1;$9870-$9877-8(interior-tiles-033)
 $9878 DEFB $72,$FB,$FF,$DB,$67,$FD,$9F,$6D ; #UDGARRAY1,7,4,1;$9878-$987F-8(interior-tiles-034)
 $9880 DEFB $BB,$7B,$7B,$63,$C3,$CC,$10,$00 ; #UDGARRAY1,7,4,1;$9880-$9887-8(interior-tiles-035)
 $9888 DEFB $C3,$CB,$63,$E3,$D3,$FB,$BB,$CB ; #UDGARRAY1,7,4,1;$9888-$988F-8(interior-tiles-036)
 $9890 DEFB $00,$00,$00,$03,$0F,$3C,$F0,$C0 ; #UDGARRAY1,7,4,1;$9890-$9897-8(interior-tiles-037)
 $9898 DEFB $0F,$3C,$F0,$C0,$00,$80,$80,$80 ; #UDGARRAY1,7,4,1;$9898-$989F-8(interior-tiles-038)
 $98A0 DEFB $C0,$C0,$C0,$C0,$C0,$C0,$C0,$C0 ; #UDGARRAY1,7,4,1;$98A0-$98A7-8(interior-tiles-039)
 $98A8 DEFB $C0,$C0,$C0,$C0,$C0,$C3,$CC,$F0 ; #UDGARRAY1,7,4,1;$98A8-$98AF-8(interior-tiles-040)
 $98B0 DEFB $80,$83,$8C,$B0,$C0,$80,$80,$80 ; #UDGARRAY1,7,4,1;$98B0-$98B7-8(interior-tiles-041)
 $98B8 DEFB $00,$80,$80,$80,$80,$83,$8C,$B0 ; #UDGARRAY1,7,4,1;$98B8-$98BF-8(interior-tiles-042)
 $98C0 DEFB $C0,$81,$82,$82,$80,$80,$80,$80 ; #UDGARRAY1,7,4,1;$98C0-$98C7-8(interior-tiles-043)
 $98C8 DEFB $C0,$A0,$A0,$80,$83,$8F,$BF,$BC ; #UDGARRAY1,7,4,1;$98C8-$98CF-8(interior-tiles-044)
 $98D0 DEFB $C0,$C0,$C0,$C0,$40,$C0,$00,$00 ; #UDGARRAY1,7,4,1;$98D0-$98D7-8(interior-tiles-045)
 $98D8 DEFB $C3,$CF,$DF,$DC,$F0,$C0,$00,$00 ; #UDGARRAY1,7,4,1;$98D8-$98DF-8(interior-tiles-046)
 $98E0 DEFB $70,$C0,$00,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$98E0-$98E7-8(interior-tiles-047)
 $98E8 DEFB $83,$8F,$BF,$BC,$70,$C0,$00,$00 ; #UDGARRAY1,7,4,1;$98E8-$98EF-8(interior-tiles-048)
 $98F0 DEFB $C0,$C1,$C2,$C2,$C0,$C0,$C0,$C0 ; #UDGARRAY1,7,4,1;$98F0-$98F7-8(interior-tiles-049)
 $98F8 DEFB $00,$00,$00,$00,$00,$00,$00,$03 ; #UDGARRAY1,7,4,1;$98F8-$98FF-8(interior-tiles-050)
 $9900 DEFB $43,$13,$07,$03,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9900-$9907-8(interior-tiles-051)
 $9908 DEFB $0F,$3C,$F0,$C0,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9908-$990F-8(interior-tiles-052)
 $9910 DEFB $00,$00,$00,$C0,$F0,$3C,$0F,$03 ; #UDGARRAY1,7,4,1;$9910-$9917-8(interior-tiles-053)
 $9918 DEFB $00,$00,$00,$00,$00,$00,$00,$C0 ; #UDGARRAY1,7,4,1;$9918-$991F-8(interior-tiles-054)
 $9920 DEFB $F0,$3C,$0F,$03,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9920-$9927-8(interior-tiles-055)
 $9928 DEFB $03,$03,$03,$03,$03,$03,$03,$03 ; #UDGARRAY1,7,4,1;$9928-$992F-8(interior-tiles-056)
 $9930 DEFB $00,$00,$00,$00,$02,$08,$20,$80 ; #UDGARRAY1,7,4,1;$9930-$9937-8(interior-tiles-057)
 $9938 DEFB $00,$00,$00,$00,$40,$10,$04,$01 ; #UDGARRAY1,7,4,1;$9938-$993F-8(interior-tiles-058)
 $9940 DEFB $C2,$C8,$E0,$C0,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9940-$9947-8(interior-tiles-059)
 $9948 DEFB $03,$03,$03,$03,$02,$08,$20,$80 ; #UDGARRAY1,7,4,1;$9948-$994F-8(interior-tiles-060)
 $9950 DEFB $C0,$C0,$C0,$C0,$40,$10,$04,$01 ; #UDGARRAY1,7,4,1;$9950-$9957-8(interior-tiles-061)
 $9958 DEFB $00,$00,$00,$00,$01,$03,$06,$05 ; #UDGARRAY1,7,4,1;$9958-$995F-8(interior-tiles-062)
 $9960 DEFB $01,$07,$1C,$73,$CF,$3F,$7F,$BC ; #UDGARRAY1,7,4,1;$9960-$9967-8(interior-tiles-063)
 $9968 DEFB $8F,$1C,$D0,$E0,$E0,$C0,$3C,$FF ; #UDGARRAY1,7,4,1;$9968-$996F-8(interior-tiles-064)
 $9970 DEFB $05,$35,$F4,$C5,$05,$05,$04,$04 ; #UDGARRAY1,7,4,1;$9970-$9977-8(interior-tiles-065)
 $9978 DEFB $D3,$CF,$DF,$3F,$CC,$F3,$FC,$3F ; #UDGARRAY1,7,4,1;$9978-$997F-8(interior-tiles-066)
 $9980 DEFB $FC,$F3,$CF,$3F,$FF,$FF,$FF,$3F ; #UDGARRAY1,7,4,1;$9980-$9987-8(interior-tiles-067)
 $9988 DEFB $C0,$F0,$FC,$FF,$FF,$FF,$FF,$FF ; #UDGARRAY1,7,4,1;$9988-$998F-8(interior-tiles-068)
 $9990 DEFB $00,$00,$00,$00,$C0,$F0,$FC,$F9 ; #UDGARRAY1,7,4,1;$9990-$9997-8(interior-tiles-069)
 $9998 DEFB $0F,$03,$00,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9998-$999F-8(interior-tiles-070)
 $99A0 DEFB $CF,$F3,$FC,$3F,$0F,$03,$00,$00 ; #UDGARRAY1,7,4,1;$99A0-$99A7-8(interior-tiles-071)
 $99A8 DEFB $FF,$FF,$FE,$39,$D7,$EC,$EB,$28 ; #UDGARRAY1,7,4,1;$99A8-$99AF-8(interior-tiles-072)
 $99B0 DEFB $E7,$9D,$71,$CD,$31,$C0,$00,$00 ; #UDGARRAY1,7,4,1;$99B0-$99B7-8(interior-tiles-073)
 $99B8 DEFB $08,$08,$08,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$99B8-$99BF-8(interior-tiles-074)
 $99C0 DEFB $00,$1C,$7F,$1F,$67,$59,$46,$59 ; #UDGARRAY1,7,4,1;$99C0-$99C7-8(interior-tiles-075)
 $99C8 DEFB $00,$00,$00,$C0,$F0,$FC,$70,$8C ; #UDGARRAY1,7,4,1;$99C8-$99CF-8(interior-tiles-076)
 $99D0 DEFB $56,$5E,$46,$58,$56,$5E,$46,$58 ; #UDGARRAY1,7,4,1;$99D0-$99D7-8(interior-tiles-077)
 $99D8 DEFB $BC,$BC,$BC,$BC,$BC,$BC,$BC,$BC ; #UDGARRAY1,7,4,1;$99D8-$99DF-8(interior-tiles-078)
 $99E0 DEFB $56,$5E,$66,$18,$06,$01,$00,$00 ; #UDGARRAY1,7,4,1;$99E0-$99E7-8(interior-tiles-079)
 $99E8 DEFB $BC,$BC,$BD,$BD,$BC,$B8,$00,$00 ; #UDGARRAY1,7,4,1;$99E8-$99EF-8(interior-tiles-080)
 $99F0 DEFB $18,$7E,$1F,$67,$59,$46,$5B,$5B ; #UDGARRAY1,7,4,1;$99F0-$99F7-8(interior-tiles-081)
 $99F8 DEFB $00,$00,$80,$E0,$F8,$7E,$9F,$66 ; #UDGARRAY1,7,4,1;$99F8-$99FF-8(interior-tiles-082)
 $9A00 DEFB $00,$00,$00,$00,$00,$00,$80,$00 ; #UDGARRAY1,7,4,1;$9A00-$9A07-8(interior-tiles-083)
 $9A08 DEFB $5B,$5B,$5B,$5B,$5B,$5B,$5B,$5B ; #UDGARRAY1,7,4,1;$9A08-$9A0F-8(interior-tiles-084)
 $9A10 DEFB $19,$6B,$6B,$6B,$6B,$6B,$6B,$6B ; #UDGARRAY1,7,4,1;$9A10-$9A17-8(interior-tiles-085)
 $9A18 DEFB $80,$80,$80,$80,$80,$80,$80,$80 ; #UDGARRAY1,7,4,1;$9A18-$9A1F-8(interior-tiles-086)
 $9A20 DEFB $6B,$6B,$6B,$6B,$6B,$6B,$6B,$6B ; #UDGARRAY1,7,4,1;$9A20-$9A27-8(interior-tiles-087)
 $9A28 DEFB $63,$1B,$07,$01,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9A28-$9A2F-8(interior-tiles-088)
 $9A30 DEFB $6B,$6B,$6B,$8B,$6B,$1B,$02,$00 ; #UDGARRAY1,7,4,1;$9A30-$9A37-8(interior-tiles-089)
 $9A38 DEFB $80,$80,$80,$80,$B0,$BC,$0F,$03 ; #UDGARRAY1,7,4,1;$9A38-$9A3F-8(interior-tiles-090)
 $9A40 DEFB $03,$03,$03,$C3,$F3,$3F,$0F,$03 ; #UDGARRAY1,7,4,1;$9A40-$9A47-8(interior-tiles-091)
 $9A48 DEFB $00,$00,$00,$00,$00,$00,$03,$0F ; #UDGARRAY1,7,4,1;$9A48-$9A4F-8(interior-tiles-092)
 $9A50 DEFB $00,$00,$03,$0F,$3F,$FF,$FF,$FF ; #UDGARRAY1,7,4,1;$9A50-$9A57-8(interior-tiles-093)
 $9A58 DEFB $30,$FC,$FF,$FF,$FF,$FF,$FF,$FF ; #UDGARRAY1,7,4,1;$9A58-$9A5F-8(interior-tiles-094)
 $9A60 DEFB $00,$00,$00,$C0,$F0,$FC,$FF,$FC ; #UDGARRAY1,7,4,1;$9A60-$9A67-8(interior-tiles-095)
 $9A68 DEFB $3F,$0F,$03,$0C,$0B,$08,$08,$08 ; #UDGARRAY1,7,4,1;$9A68-$9A6F-8(interior-tiles-096)
 $9A70 DEFB $FF,$FF,$FF,$FF,$3F,$CF,$33,$0C ; #UDGARRAY1,7,4,1;$9A70-$9A77-8(interior-tiles-097)
 $9A78 DEFB $FF,$FF,$FF,$FC,$F3,$CC,$30,$C0 ; #UDGARRAY1,7,4,1;$9A78-$9A7F-8(interior-tiles-098)
 $9A80 DEFB $F0,$CC,$34,$C4,$04,$04,$04,$04 ; #UDGARRAY1,7,4,1;$9A80-$9A87-8(interior-tiles-099)
 $9A88 DEFB $3F,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; #UDGARRAY1,7,4,1;$9A88-$9A8F-8(interior-tiles-100)
 $9A90 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC ; #UDGARRAY1,7,4,1;$9A90-$9A97-8(interior-tiles-101)
 $9A98 DEFB $F3,$CC,$30,$C0,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9A98-$9A9F-8(interior-tiles-102)
 $9AA0 DEFB $00,$00,$00,$00,$00,$00,$0C,$34 ; #UDGARRAY1,7,4,1;$9AA0-$9AA7-8(interior-tiles-103)
 $9AA8 DEFB $CC,$B4,$C4,$84,$84,$80,$8F,$3F ; #UDGARRAY1,7,4,1;$9AA8-$9AAF-8(interior-tiles-104)
 $9AB0 DEFB $FF,$3F,$8F,$80,$82,$82,$82,$82 ; #UDGARRAY1,7,4,1;$9AB0-$9AB7-8(interior-tiles-105)
 $9AB8 DEFB $02,$02,$02,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9AB8-$9ABF-8(interior-tiles-106)
 $9AC0 DEFB $F0,$C0,$10,$10,$10,$10,$10,$10 ; #UDGARRAY1,7,4,1;$9AC0-$9AC7-8(interior-tiles-107)
 $9AC8 DEFB $8F,$1C,$E0,$30,$D0,$E0,$D4,$BB ; #UDGARRAY1,7,4,1;$9AC8-$9ACF-8(interior-tiles-108)
 $9AD0 DEFB $7D,$DD,$BB,$FB,$F7,$CF,$FD,$3E ; #UDGARRAY1,7,4,1;$9AD0-$9AD7-8(interior-tiles-109)
 $9AD8 DEFB $C0,$70,$BC,$DF,$DF,$E9,$EE,$FE ; #UDGARRAY1,7,4,1;$9AD8-$9ADF-8(interior-tiles-110)
 $9AE0 DEFB $73,$8D,$FE,$39,$C7,$EC,$EB,$28 ; #UDGARRAY1,7,4,1;$9AE0-$9AE7-8(interior-tiles-111)
 $9AE8 DEFB $01,$07,$1C,$70,$CD,$3B,$7B,$BC ; #UDGARRAY1,7,4,1;$9AE8-$9AEF-8(interior-tiles-112)
 $9AF0 DEFB $43,$5B,$3D,$3D,$5A,$42,$5B,$5B ; #UDGARRAY1,7,4,1;$9AF0-$9AF7-8(interior-tiles-113)
 $9AF8 DEFB $19,$6B,$0B,$6B,$F3,$F3,$6B,$0B ; #UDGARRAY1,7,4,1;$9AF8-$9AFF-8(interior-tiles-114)
 $9B00 DEFB $00,$00,$00,$00,$00,$00,$C0,$B0 ; #UDGARRAY1,7,4,1;$9B00-$9B07-8(interior-tiles-115)
 $9B08 DEFB $CC,$B4,$8C,$84,$84,$04,$C4,$F0 ; #UDGARRAY1,7,4,1;$9B08-$9B0F-8(interior-tiles-116)
 $9B10 DEFB $3F,$0F,$23,$20,$21,$21,$21,$21 ; #UDGARRAY1,7,4,1;$9B10-$9B17-8(interior-tiles-117)
 $9B18 DEFB $FC,$F0,$C4,$04,$04,$04,$04,$04 ; #UDGARRAY1,7,4,1;$9B18-$9B1F-8(interior-tiles-118)
 $9B20 DEFB $01,$01,$01,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9B20-$9B27-8(interior-tiles-119)
 $9B28 DEFB $00,$00,$03,$0F,$3F,$FC,$F3,$CC ; #UDGARRAY1,7,4,1;$9B28-$9B2F-8(interior-tiles-120)
 $9B30 DEFB $00,$C0,$F0,$C0,$30,$D0,$10,$D0 ; #UDGARRAY1,7,4,1;$9B30-$9B37-8(interior-tiles-121)
 $9B38 DEFB $03,$0C,$0E,$0E,$0E,$0E,$0E,$0E ; #UDGARRAY1,7,4,1;$9B38-$9B3F-8(interior-tiles-122)
 $9B40 DEFB $33,$CB,$BB,$BB,$BB,$BB,$BB,$BB ; #UDGARRAY1,7,4,1;$9B40-$9B47-8(interior-tiles-123)
 $9B48 DEFB $D0,$D0,$D0,$50,$50,$D0,$D0,$D0 ; #UDGARRAY1,7,4,1;$9B48-$9B4F-8(interior-tiles-124)
 $9B50 DEFB $0E,$0E,$0E,$0E,$0E,$0E,$02,$00 ; #UDGARRAY1,7,4,1;$9B50-$9B57-8(interior-tiles-125)
 $9B58 DEFB $BB,$B8,$B3,$8C,$B0,$C0,$00,$00 ; #UDGARRAY1,7,4,1;$9B58-$9B5F-8(interior-tiles-126)
 $9B60 DEFB $30,$C0,$00,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9B60-$9B67-8(interior-tiles-127)
 $9B68 DEFB $70,$D8,$66,$3D,$0D,$03,$01,$00 ; #UDGARRAY1,7,4,1;$9B68-$9B6F-8(interior-tiles-128)
 $9B70 DEFB $00,$00,$00,$80,$40,$A0,$E0,$F0 ; #UDGARRAY1,7,4,1;$9B70-$9B77-8(interior-tiles-129)
 $9B78 DEFB $F0,$60,$90,$F0,$B0,$B0,$B0,$B0 ; #UDGARRAY1,7,4,1;$9B78-$9B7F-8(interior-tiles-130)
 $9B80 DEFB $30,$FC,$3F,$0C,$00,$F0,$00,$00 ; #UDGARRAY1,7,4,1;$9B80-$9B87-8(interior-tiles-131)
 $9B88 DEFB $0F,$3C,$F0,$C0,$08,$08,$88,$88 ; #UDGARRAY1,7,4,1;$9B88-$9B8F-8(interior-tiles-132)
 $9B90 DEFB $C8,$C8,$C8,$C8,$C8,$C8,$C8,$C8 ; #UDGARRAY1,7,4,1;$9B90-$9B97-8(interior-tiles-133)
 $9B98 DEFB $88,$88,$88,$88,$88,$88,$88,$88 ; #UDGARRAY1,7,4,1;$9B98-$9B9F-8(interior-tiles-134)
 $9BA0 DEFB $88,$88,$88,$88,$83,$8F,$3F,$FC ; #UDGARRAY1,7,4,1;$9BA0-$9BA7-8(interior-tiles-135)
 $9BA8 DEFB $00,$00,$00,$04,$1E,$3C,$12,$2E ; #UDGARRAY1,7,4,1;$9BA8-$9BAF-8(interior-tiles-136)
 $9BB0 DEFB $00,$00,$00,$00,$00,$00,$30,$FC ; #UDGARRAY1,7,4,1;$9BB0-$9BB7-8(interior-tiles-137)
 $9BB8 DEFB $2E,$2D,$13,$EC,$30,$08,$08,$00 ; #UDGARRAY1,7,4,1;$9BB8-$9BBF-8(interior-tiles-138)
 $9BC0 DEFB $F0,$C0,$20,$20,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9BC0-$9BC7-8(interior-tiles-139)
 $9BC8 DEFB $01,$07,$1F,$7F,$1F,$67,$79,$5E ; #UDGARRAY1,7,4,1;$9BC8-$9BCF-8(interior-tiles-140)
 $9BD0 DEFB $80,$60,$98,$E6,$98,$66,$9E,$7E ; #UDGARRAY1,7,4,1;$9BD0-$9BD7-8(interior-tiles-141)
 $9BD8 DEFB $5F,$5B,$57,$5F,$67,$1B,$07,$01 ; #UDGARRAY1,7,4,1;$9BD8-$9BDF-8(interior-tiles-142)
 $9BE0 DEFB $7E,$7A,$72,$76,$7E,$78,$60,$80 ; #UDGARRAY1,7,4,1;$9BE0-$9BE7-8(interior-tiles-143)
 $9BE8 DEFB $06,$1A,$6E,$7A,$5E,$76,$58,$63 ; #UDGARRAY1,7,4,1;$9BE8-$9BEF-8(interior-tiles-144)
 $9BF0 DEFB $C0,$C0,$C0,$C3,$CF,$FC,$F0,$C0 ; #UDGARRAY1,7,4,1;$9BF0-$9BF7-8(interior-tiles-145)
 $9BF8 DEFB $C0,$B0,$8C,$E4,$9C,$C4,$34,$0C ; #UDGARRAY1,7,4,1;$9BF8-$9BFF-8(interior-tiles-146)
 $9C00 DEFB $F0,$C0,$30,$D0,$10,$10,$00,$00 ; #UDGARRAY1,7,4,1;$9C00-$9C07-8(interior-tiles-147)
 $9C08 DEFB $00,$00,$03,$0F,$3F,$FF,$FF,$FC ; #UDGARRAY1,7,4,1;$9C08-$9C0F-8(interior-tiles-148)
 $9C10 DEFB $00,$00,$00,$C0,$F0,$C0,$20,$E0 ; #UDGARRAY1,7,4,1;$9C10-$9C17-8(interior-tiles-149)
 $9C18 DEFB $20,$20,$00,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9C18-$9C1F-8(interior-tiles-150)
 $9C20 DEFB $3F,$FF,$FF,$FC,$F3,$CD,$31,$C1 ; #UDGARRAY1,7,4,1;$9C20-$9C27-8(interior-tiles-151)
 $9C28 DEFB $3F,$0F,$33,$2C,$23,$22,$02,$02 ; #UDGARRAY1,7,4,1;$9C28-$9C2F-8(interior-tiles-152)
 $9C30 DEFB $F0,$3C,$0F,$C3,$F0,$C0,$20,$E0 ; #UDGARRAY1,7,4,1;$9C30-$9C37-8(interior-tiles-153)
 $9C38 DEFB $00,$00,$00,$0C,$3F,$FC,$F3,$CD ; #UDGARRAY1,7,4,1;$9C38-$9C3F-8(interior-tiles-154)
 $9C40 DEFB $31,$CD,$B5,$B1,$8D,$B5,$B1,$8D ; #UDGARRAY1,7,4,1;$9C40-$9C47-8(interior-tiles-155)
 $9C48 DEFB $B5,$BD,$B3,$8C,$B0,$C0,$00,$00 ; #UDGARRAY1,7,4,1;$9C48-$9C4F-8(interior-tiles-156)
 $9C50 DEFB $0E,$2E,$EE,$CE,$0E,$0E,$02,$00 ; #UDGARRAY1,7,4,1;$9C50-$9C57-8(interior-tiles-157)
 $9C58 DEFB $5E,$52,$5E,$5E,$46,$58,$5E,$52 ; #UDGARRAY1,7,4,1;$9C58-$9C5F-8(interior-tiles-158)
 $9C60 DEFB $5E,$56,$5E,$46,$58,$5E,$52,$5E ; #UDGARRAY1,7,4,1;$9C60-$9C67-8(interior-tiles-159)
 $9C68 DEFB $00,$00,$00,$C0,$F0,$FC,$FF,$F3 ; #UDGARRAY1,7,4,1;$9C68-$9C6F-8(interior-tiles-160)
 $9C70 DEFB $FF,$FF,$FC,$F3,$CF,$3F,$CF,$F3 ; #UDGARRAY1,7,4,1;$9C70-$9C77-8(interior-tiles-161)
 $9C78 DEFB $CC,$3F,$FF,$FF,$FF,$FF,$FC,$F3 ; #UDGARRAY1,7,4,1;$9C78-$9C7F-8(interior-tiles-162)
 $9C80 DEFB $F0,$3C,$CF,$F3,$CF,$3C,$F3,$CB ; #UDGARRAY1,7,4,1;$9C80-$9C87-8(interior-tiles-163)
 $9C88 DEFB $3C,$4F,$73,$7C,$7F,$3E,$0E,$02 ; #UDGARRAY1,7,4,1;$9C88-$9C8F-8(interior-tiles-164)
 $9C90 DEFB $CF,$3C,$F3,$CF,$3F,$DF,$DC,$D0 ; #UDGARRAY1,7,4,1;$9C90-$9C97-8(interior-tiles-165)
 $9C98 DEFB $3B,$FB,$FB,$F3,$C3,$03,$00,$00 ; #UDGARRAY1,7,4,1;$9C98-$9C9F-8(interior-tiles-166)
 $9CA0 DEFB $00,$00,$00,$C0,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9CA0-$9CA7-8(interior-tiles-167)
 $9CA8 DEFB $C0,$F0,$3C,$4F,$43,$60,$1A,$C6 ; #UDGARRAY1,7,4,1;$9CA8-$9CAF-8(interior-tiles-168)
 $9CB0 DEFB $00,$00,$03,$01,$39,$11,$19,$15 ; #UDGARRAY1,7,4,1;$9CB0-$9CB7-8(interior-tiles-169)
 $9CB8 DEFB $00,$00,$80,$00,$80,$40,$00,$00 ; #UDGARRAY1,7,4,1;$9CB8-$9CBF-8(interior-tiles-170)
 $9CC0 DEFB $10,$10,$01,$07,$1F,$27,$39,$3E ; #UDGARRAY1,7,4,1;$9CC0-$9CC7-8(interior-tiles-171)
 $9CC8 DEFB $18,$6E,$EF,$EF,$EF,$96,$F9,$67 ; #UDGARRAY1,7,4,1;$9CC8-$9CCF-8(interior-tiles-172)
 $9CD0 DEFB $00,$00,$80,$E0,$90,$70,$F0,$F0 ; #UDGARRAY1,7,4,1;$9CD0-$9CD7-8(interior-tiles-173)
 $9CD8 DEFB $3F,$3F,$1F,$07,$01,$02,$1B,$06 ; #UDGARRAY1,7,4,1;$9CD8-$9CDF-8(interior-tiles-174)
 $9CE0 DEFB $9F,$FF,$BF,$BE,$B8,$60,$00,$03 ; #UDGARRAY1,7,4,1;$9CE0-$9CE7-8(interior-tiles-175)
 $9CE8 DEFB $F0,$E0,$80,$03,$0F,$3C,$F0,$C0 ; #UDGARRAY1,7,4,1;$9CE8-$9CEF-8(interior-tiles-176)
 $9CF0 DEFB $0C,$3C,$F4,$E8,$68,$88,$88,$94 ; #UDGARRAY1,7,4,1;$9CF0-$9CF7-8(interior-tiles-177)
 $9CF8 DEFB $00,$00,$00,$03,$0F,$3E,$36,$28 ; #UDGARRAY1,7,4,1;$9CF8-$9CFF-8(interior-tiles-178)
 $9D00 DEFB $28,$09,$08,$14,$04,$08,$00,$00 ; #UDGARRAY1,7,4,1;$9D00-$9D07-8(interior-tiles-179)
 $9D08 DEFB $84,$48,$40,$80,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9D08-$9D0F-8(interior-tiles-180)
 $9D10 DEFB $C0,$60,$80,$00,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9D10-$9D17-8(interior-tiles-181)
 $9D18 DEFB $00,$00,$00,$03,$0F,$3C,$FC,$CB ; #UDGARRAY1,7,4,1;$9D18-$9D1F-8(interior-tiles-182)
 $9D20 DEFB $88,$60,$19,$06,$00,$00,$00,$00 ; #UDGARRAY1,7,4,1;$9D20-$9D27-8(interior-tiles-183)
 $9D28 DEFB $FF,$FF,$FF,$FE,$FD,$FB,$FB,$F9 ; #UDGARRAY1,7,4,1;$9D28-$9D2F-8(interior-tiles-184)
 $9D30 DEFB $FF,$FF,$FF,$1C,$E3,$EC,$80,$E0 ; #UDGARRAY1,7,4,1;$9D30-$9D37-8(interior-tiles-185)
 $9D38 DEFB $F2,$C8,$37,$8F,$6F,$7D,$3D,$1B ; #UDGARRAY1,7,4,1;$9D38-$9D3F-8(interior-tiles-186)
 $9D40 DEFB $00,$F0,$F8,$E8,$E8,$D8,$D3,$CF ; #UDGARRAY1,7,4,1;$9D40-$9D47-8(interior-tiles-187)
 $9D48 DEFB $27,$78,$7F,$5F,$0F,$F0,$FF,$FC ; #UDGARRAY1,7,4,1;$9D48-$9D4F-8(interior-tiles-188)
 $9D50 DEFB $2F,$EF,$EF,$DC,$33,$CD,$31,$C1 ; #UDGARRAY1,7,4,1;$9D50-$9D57-8(interior-tiles-189)
 $9D58 DEFB $00,$00,$00,$C0,$F1,$FB,$FB,$F9 ; #UDGARRAY1,7,4,1;$9D58-$9D5F-8(interior-tiles-190)
 $9D60 DEFB $00,$00,$00,$00,$E0,$E0,$80,$E0 ; #UDGARRAY1,7,4,1;$9D60-$9D67-8(interior-tiles-191)
 $9D68 DEFB $00,$F0,$F8,$E8,$E8,$D8,$D0,$C0 ; #UDGARRAY1,7,4,1;$9D68-$9D6F-8(interior-tiles-192)
 $9D70 DEFB $20,$EC,$EF,$DF,$33,$CD,$31,$C1 ; #UDGARRAY1,7,4,1;$9D70-$9D77-8(interior-tiles-193)

; main_loop_setup
;
; Used by the routine at #R$F163.
; .
; There seems to be litle point in this: enter_room terminates with 'goto
; main_loop' so it never returns. In fact, the single caller might just as well
; goto enter_room instead of goto main_loop_setup.
c$9D78 CALL $68F4    ; enter_room(); // returns by goto main_loop
; This entry point is used by the routine at #R$691A.
*$9D7B CALL $9DCF    ; main_loop: for (;;) <% check_morale();
 $9D7E CALL $9DE5    ;   keyscan_break();
 $9D81 CALL $7D48    ;   message_display();
 $9D84 CALL $9E07    ;   process_player_input();
 $9D87 CALL $9F21    ;   in_permitted_area();
 $9D8A CALL $BB98    ;   called_from_main_loop_3(); // [unknown]
 $9D8D CALL $C6A0    ;   move_characters();
 $9D90 CALL $C892    ;   follow_suspicious_character();
 $9D93 CALL $C47E    ;   purge_visible_characters();
 $9D96 CALL $C41C    ;   spawn_characters();
 $9D99 CALL $DB9E    ;   mark_nearby_items();
 $9D9C CALL $A09E    ;   ring_bell();
 $9D9F CALL $B5CE    ;   called_from_main_loop_9(); // [unknown]
 $9DA2 CALL $AAB2    ;   move_map();
 $9DA5 CALL $7D48    ;   message_display();
 $9DA8 CALL $A09E    ;   ring_bell();
 $9DAB CALL $B866    ;   locate_thing_to_plot_then_plot();
 $9DAE CALL $EED3    ;   plot_game_window();
 $9DB1 CALL $A09E    ;   ring_bell();
 $9DB4 LD A,($A146)  ; {  if (day_or_night != 0) nighttime();
 $9DB7 AND A         ;
 $9DB8 CALL NZ,$ADBD ; }
 $9DBB LD A,($68A0)  ; {  if (room_index != 0) indoors_delay_loop();
 $9DBE AND A         ;
 $9DBF CALL NZ,$A095 ; }
 $9DC2 CALL $A035    ;   wave_morale_flag();
 $9DC5 LD A,($A12F)  ; {  if ((game_counter & 63) == 0)
 $9DC8 AND $3F       ; dispatch_timed_event();
 $9DCA CALL Z,$A1A0  ; }
 $9DCD JR $9D7B      ; %>

; check_morale
;
; Used by the routine at #R$9D78.
; .
; (<- main_loop)
c$9DCF LD A,($A13C)  ; {if (morale >= 2) return;
 $9DD2 CP $02        ;
 $9DD4 RET NC        ; }
 $9DD5 LD BC,$0F00   ; {queue_message_for_display(message_MORALE_IS_ZERO);
 $9DD8 CALL $7D15    ; }
 $9DDB LD A,$FF      ; {morale_2 = 0xFF; // inhibit user input
 $9DDD LD ($A13B),A  ; }
 $9DE0 XOR A         ; {automatic_player_counter = 0; // immediately take
 $9DE1 LD ($A139),A  ; automatic control of player}
 $9DE4 RET           ; return;

; keyscan_break
;
; Used by the routine at #R$9D78.
; .
; Check for 'game cancel' keypress.
c$9DE5 LD BC,$FEFE   ; {if (!(shift_pressed && space_pressed)) return;
 $9DE8 IN A,(C)      ;
 $9DEA AND $01       ;
 $9DEC RET NZ        ;
 $9DED LD B,$7F      ;
 $9DEF IN A,(C)      ;
 $9DF1 AND $01       ;
 $9DF3 RET NZ        ; }
 $9DF4 CALL $A50B    ; screen_reset();
 $9DF7 CALL $EFFC    ; user_confirm();
 $9DFA JP Z,$B75A    ; if (Z) reset_game();
 $9DFD LD A,($68A0)  ; {if (room_index == 0) <% reset_outdoors(); return; %> //
 $9E00 AND A         ; exit via
 $9E01 JP Z,$B2FC    ; }
 $9E04 JP $68F4      ; else enter_room(); // doesn't return (jumps to
                     ; main_loop)

; process_player_input
;
; Used by the routine at #R$9D78.
c$9E07 LD HL,($A13A) ; {if (morale_1 || morale_2) return; // inhibits user
 $9E0A XOR A         ; control when morale hits zero // reads morale_1 +
 $9E0B OR H          ; morale_2 together as a word
 $9E0C OR L          ;
 $9E0D RET NZ        ; }
 $9E0E LD A,($8001)  ; {if ($8001 & (vischar_BYTE1_PICKING_LOCK |
 $9E11 AND $03       ; vischar_BYTE1_CUTTING_WIRE)) <%
 $9E13 JR Z,$9E22    ; }
; Picking a lock, or cutting wire fence.
 $9E15 LD HL,$A139   ; {  automatic_player_counter = 31; // 31 turns until
 $9E18 LD (HL),$1F   ; automatic control}
 $9E1A CP $01        ; {  if ($8001 == vischar_BYTE1_PICKING_LOCK) goto
 $9E1C JP Z,$9E98    ; picking_a_lock;}
; Cutting wire fence.
 $9E1F JP $9EB2      ;   snipping_wire(); return; %> // exit via
*$9E22 CALL $F075    ; A = input_routine(); // lives at same address as
                     ; static_tiles_plot_direction
 $9E25 LD HL,$A139   ; {- // subsumed into following code
 $9E28 CP $00        ; }
 $9E2A JP NZ,$9E34   ; if (A == input_NONE) <%
 $9E2D LD A,(HL)     ; {  if (automatic_player_counter == 0) return;
 $9E2E AND A         ;
 $9E2F RET Z         ; }
 $9E30 DEC (HL)      ;   automatic_player_counter--; // no user input: count
                     ; down
 $9E31 XOR A         ;   A = 0; %>
 $9E32 JR $9E8F      ; else <%
*$9E34 LD (HL),$1F   ;   automatic_player_counter = 31; // wait 31 turns until
                     ; automatic control
 $9E36 PUSH AF       ;   ... (push af) ...
 $9E37 LD A,($A13F)  ; {  if (player_in_bed == 0) <%
 $9E3A AND A         ;
 $9E3B JR NZ,$9E5C   ; }
 $9E3D LD A,($A137)  ; {    if (!player_in_breakfast) goto
 $9E40 AND A         ; not_bed_or_breakfast;
 $9E41 JR Z,$9E85    ; }
 $9E43 LD HL,$002B   ; {    (word) $8002 = 0x002B; // set target location?
 $9E46 LD ($8002),HL ; }
 $9E49 LD HL,$800F   ; {    (word) $800F = 0x0034; // set Y pos
 $9E4C LD (HL),$34   ; }
 $9E4E INC L         ; {    (word) $8011 = 0x003E; // set X pos
 $9E4F INC L         ;
 $9E50 LD (HL),$3E   ; }
 $9E52 LD HL,$6F58   ; {    roomdef_25_breakfast.bench_G =
 $9E55 LD (HL),$0D   ; interiorobject_EMPTY_BENCH;}
 $9E57 LD HL,$A137   ;     HL = &player_in_breakfast; %>
 $9E5A JR $9E7D      ;   else <%
; Player was in bed.
*$9E5C LD HL,$012C   ; {    (word) $8002 = 0x012C; // set target location?
 $9E5F LD ($8002),HL ; }
 $9E62 LD HL,$2E2E   ; {    (word) $8004 = 0x2E2E; // another position?
 $9E65 LD ($8004),HL ; }
 $9E68 LD H,$00      ; {    (word) $800F = 0x002E; // set Y pos
 $9E6A LD ($800F),HL ; }
 $9E6D LD ($8011),HL ;     (word) $8011 = 0x002E; // set X pos
 $9E70 LD A,$18      ; {    $8013 = 24; // set vertical offset
 $9E72 LD ($8013),A  ; }
 $9E75 LD HL,$6C61   ; {    player_bed = interiorobject_EMPTY_BED;
 $9E78 LD (HL),$09   ; }
 $9E7A LD HL,$A13F   ;     HL = &player_in_bed; %>
*$9E7D LD (HL),$00   ;   *HL = 0;
 $9E7F CALL $6A35    ;   setup_room();
 $9E82 CALL $6B42    ;   plot_interior_tiles();
*$9E85 POP AF        ; not_bed_or_breakfast: // ... (pop af -- restores user
                     ; input value stored at $9E36)
 $9E86 CP $09        ; {  if (A >= input_FIRE) <%
 $9E88 JR C,$9E8F    ; }
 $9E8A CALL $7AC9    ;     check_for_pick_up_keypress();
 $9E8D LD A,$80      ;     A = 0x80; %> %>
*$9E8F LD HL,$800D   ; {if ($800D == A) return; // tunnel related?
 $9E92 CP (HL)       ;
 $9E93 RET Z         ; }
 $9E94 OR $80        ; {$800D = A | 0x80;
 $9E96 LD (HL),A     ; }
 $9E97 RET           ; return;

; picking_a_lock
;
; Used by the routine at #R$9E07.
; .
; Locks the player out until lock is picked.
c$9E98 LD HL,$A12F   ; {if (player_locked_out_until != game_counter) return;
 $9E9B LD A,($A145)  ;
 $9E9E CP (HL)       ;
 $9E9F RET NZ        ; }
 $9EA0 LD HL,($A143) ; {*ptr_to_door_being_lockpicked &=
 $9EA3 RES 7,(HL)    ; ~gates_and_doors_LOCKED; // unlock}
 $9EA5 LD B,$06      ; {queue_message_for_display(message_IT_IS_OPEN);
 $9EA7 CALL $7D15    ; }
; This entry point is used by the routine at #R$9EB2.
*$9EAA LD HL,$8001   ; {clear_lockpick_wirecut_flags_and_return: $8001 &=
 $9EAD LD A,(HL)     ; ~(vischar_BYTE1_PICKING_LOCK |
 $9EAE AND $FC       ; vischar_BYTE1_CUTTING_WIRE);
 $9EB0 LD (HL),A     ; }
 $9EB1 RET           ; return;

; snipping_wire
;
; Used by the routine at #R$9E07.
; .
; Locks the player out until wire is snipped.
c$9EB2 LD HL,$A12F   ; {A = player_locked_out_until - game_counter;
 $9EB5 LD A,($A145)  ;
 $9EB8 SUB (HL)      ; }
 $9EB9 JR Z,$9ED0    ; if (A) <%
 $9EBB CP $04        ; {  if (A < 4)
 $9EBD RET NC        ; }
 $9EBE LD A,($800E)  ; {    $800D = table_9EE0[$800E & 3]; // change direction
 $9EC1 LD HL,$9EE0   ;
 $9EC4 AND $03       ;
 $9EC6 ADD A,L       ;
 $9EC7 LD L,A        ;
 $9EC8 JR NC,$9ECB   ;
 $9ECA INC H         ;
*$9ECB LD A,(HL)     ;
 $9ECC LD ($800D),A  ; }
 $9ECF RET           ;   return; %>
*$9ED0 LD HL,$800E   ; {else <% $800E = A & 3; // set direction // Bug: But A
 $9ED3 AND $03       ; is always zero here! $800E &= 3;
 $9ED5 LD (HL),A     ; }
 $9ED6 DEC L         ; {  $800D = 0x80;
 $9ED7 LD (HL),$80   ; }
 $9ED9 LD A,$18      ; {  $8013 = 24; // set vertical offset
 $9EDB LD ($8013),A  ; }
 $9EDE JR $9EAA      ;   goto clear_lockpick_wirecut_flags_and_return; %>

; table_9EE0
;
; Indexed by $800E.
b$9EE0 DEFB $84,$87,$88,$85 ; direction_type table_9EE0[] = { 0x84, 0x87, 0x88,
                            ; 0x85 };

; byte_to_pointer
;
; 7 structs, 3 wide. maps bytes to offsets.
b$9EE4 DEFB $2A,$F9,$9E                 ; byte_to_offset { 42, &byte_9EF9[0] }
 $9EE7 DEFB $05,$FC,$9E                 ; byte_to_offset {  5, &byte_9EFC[0] }
 $9EEA DEFB $0E,$01,$9F                 ; byte_to_offset { 14, &byte_9F01[0] }
 $9EED DEFB $10,$08,$9F                 ; byte_to_offset { 16, &byte_9F08[0] }
 $9EF0 DEFB $2C,$0E,$9F                 ; byte_to_offset { 44, &byte_9F0E[0] }
 $9EF3 DEFB $2B,$11,$9F                 ; byte_to_offset { 43, &byte_9F11[0] }
 $9EF6 DEFB $2D,$13,$9F                 ; byte_to_offset { 45, &byte_9F13[0] }
; Data 0xFF terminated.
 $9EF9 DEFB $82,$82,$FF                 ; byte_9EF9 = { 0x82,0x82,0xFF
                                        ; }
 $9EFC DEFB $83,$01,$01,$01,$FF         ; byte_9EFC = {
                                        ; 0x83,0x01,0x01,0x01,0xFF           }
 $9F01 DEFB $01,$01,$01,$00,$02,$02,$FF ; byte_9F01 = {
                                        ; 0x01,0x01,0x01,0x00,0x02,0x02,0xFF }
 $9F08 DEFB $01,$01,$95,$97,$99,$FF     ; byte_9F08 = {
                                        ; 0x01,0x01,0x95,0x97,0x99,0xFF      }
 $9F0E DEFB $83,$82,$FF                 ; byte_9F0E = { 0x83,0x82,0xFF
                                        ; }
 $9F11 DEFB $99,$FF                     ; byte_9F11 = { 0x99,0xFF
                                        ; }
 $9F13 DEFB $01,$FF                     ; byte_9F13 = { 0x01,0xFF
                                        ; }

; byte_9F15
;
; three groups of four (<- in_permitted_area) possibly (un)permitted area
; bounds
b$9F15 DEFB $56,$5E,$3D,$48
 $9F19 DEFB $4E,$84,$47,$74
 $9F1D DEFB $4F,$69,$2F,$3F

; in_permitted_area
;
; Used by the routine at #R$9D78.
; .
; [unsure] -- could be as general as bounds detection
c$9F21 LD HL,$800F   ; HL = $800F; // position on Y axis
 $9F24 LD DE,$81B8   ; DE = &player_map_position.y; // x/y confusion here -
                     ; mislabeling
 $9F27 LD A,($68A0)  ; {if (room_index == 0) <% // outdoors
 $9F2A AND A         ;
 $9F2B JP NZ,$9F49   ; }
 $9F2E CALL $E542    ;   pos_to_tinypos(HL,DE);
 $9F31 LD HL,($8018) ; {  if (($8018) >= 0x06C8 || ($801A) >= 0x0448) goto
 $9F34 LD DE,$06C8   ; escaped; %>
 $9F37 SBC HL,DE     ;
 $9F39 JP NC,$A51C   ;
 $9F3C LD HL,($801A) ;
 $9F3F LD DE,$0448   ;
 $9F42 SBC HL,DE     ;
 $9F44 JP NC,$A51C   ; }
 $9F47 JR $9F51      ; else <%
*$9F49 LDI           ;   *DE++ = *HL++; // indoors
 $9F4B INC L         ;   HL++;
 $9F4C LDI           ;   *DE++ = *HL++;
 $9F4E INC L         ;   HL++;
 $9F4F LDI           ;   *DE++ = *HL++; %>
*$9F51 LD A,($8001)  ; {A = ($8001) & (vischar_BYTE1_PICKING_LOCK |
 $9F54 AND $03       ; vischar_BYTE1_CUTTING_WIRE);}
 $9F56 JP NZ,$9FF8   ; if (A) goto set_flag_red;
 $9F59 LD A,($A13D)  ; {if (clock >= 100) <%
 $9F5C CP $64        ;
 $9F5E JR C,$9F6B    ; }
 $9F60 LD A,($68A0)  ; {  if (room_index == room_2_hut2left) goto
 $9F63 CP $02        ; set_flag_green; else goto set_flag_red; %>
 $9F65 JP Z,$9FDE    ;
 $9F68 JP $9FF8      ; }
*$9F6B LD A,($A13A)  ; {if (morale_1) goto set_flag_green;
 $9F6E AND A         ;
 $9F6F JP NZ,$9FDE   ; }
 $9F72 LD HL,$8002   ; HL = $8002; // target location
 $9F75 LD A,(HL)     ; {A = *HL++;
 $9F76 INC L         ; }
 $9F77 LD C,(HL)     ; C = *HL;
 $9F78 BIT 7,A       ; {if (A & vischar_BYTE2_BIT7) C++;
 $9F7A JR Z,$9F7D    ;
 $9F7C INC C         ; }
*$9F7D CP $FF        ; {if (A == 0xFF) <%
 $9F7F JR NZ,$9F93   ; }
 $9F81 LD A,(HL)     ; {  A = *HL & 0xF8;
 $9F82 AND $F8       ; }
 $9F84 CP $08        ; {  if (A == 8) A = 1; else A = 2;
 $9F86 LD A,$01      ;
 $9F88 JR Z,$9F8C    ;
 $9F8A LD A,$02      ; }
*$9F8C CALL $A007    ;   in_permitted_area_end_bit();
 $9F8F JR Z,$9FDE    ; {  if (Z) goto set_flag_green; else goto set_flag_red;
 $9F91 JR $9FF8      ; %>}
*$9F93 AND $7F       ; else <% A &= 0x7F;
 $9F95 LD HL,$9EE4   ;   HL = &byte_to_pointer[0]; // table mapping bytes to
                     ; offsets
 $9F98 LD B,$07      ;   B = 7; // 7 iterations
*$9F9A CP (HL)       ; {  do <% if (A == *HL++) goto found;
 $9F9B INC HL        ;
 $9F9C JR Z,$9FA4    ; }
 $9F9E INC HL        ; {    HL += 2;
 $9F9F INC HL        ; }
 $9FA0 DJNZ $9F9A    ;   %> while (--B);
 $9FA2 JR $9FDE      ;   goto set_flag_green; %>
*$9FA4 LD E,(HL)     ; {found: E = *HL++; // fetch offset
 $9FA5 INC HL        ; }
 $9FA6 LD D,(HL)     ; D = *HL;
 $9FA7 PUSH DE       ; PUSH DE
 $9FA8 POP HL        ; POP HL   // HL = DE;
 $9FA9 LD B,$00      ; B = 0;
 $9FAB ADD HL,BC     ; HL += BC;
 $9FAC LD A,(HL)     ; A = *HL;
 $9FAD PUSH DE       ; PUSH DE
 $9FAE CALL $A007    ; in_permitted_area_end_bit();
 $9FB1 POP HL        ; POP HL
 $9FB2 JR Z,$9FDE    ; JR Z,set_flag_green;
 $9FB4 LD A,($8002)  ; A = $8002;
 $9FB7 BIT 7,A       ; {if (A & vischar_BYTE2_BIT7) HL++;
 $9FB9 JR Z,$9FBC    ;
 $9FBB INC HL        ; }
*$9FBC LD BC,$0000   ; BC = 0; // counter?
*$9FBF PUSH BC       ; for (;;) <% PUSH BC
 $9FC0 PUSH HL       ;   PUSH HL
 $9FC1 ADD HL,BC     ;   HL += BC;
 $9FC2 LD A,(HL)     ;   A = *HL;
 $9FC3 CP $FF        ; {  if (A == 255) goto pop_and_set_flag_red; // hit end
 $9FC5 JR Z,$9FDA    ; of list}
 $9FC7 CALL $A007    ;   in_permitted_area_end_bit();
 $9FCA POP HL        ;   POP HL
 $9FCB POP BC        ;   POP BC
 $9FCC JR Z,$9FD1    ;   JR Z,set_target_then_set_flag_green;  // if (Z) break;
                     ; equivalent?
 $9FCE INC C         ;   BC++;
 $9FCF JR $9FBF      ; %>
*$9FD1 LD A,($8002)  ; {set_target_then_set_flag_green: B = $8002;
 $9FD4 LD B,A        ; }
 $9FD5 CALL $A33F    ; set_hero_target_location(); // uses B, C
 $9FD8 JR $9FDE      ; goto set_flag_green;
*$9FDA POP BC        ; pop_and_set_flag_red: POP BC
 $9FDB POP HL        ; POP HL
 $9FDC JR $9FF8      ; goto set_flag_red;
; Green flag code path.
*$9FDE XOR A         ; set_flag_green: A = 0; // red_flag
 $9FDF LD C,$44      ; C = attribute_BRIGHT_GREEN_OVER_BLACK;
*$9FE1 LD ($A138),A  ; flag_select: red_flag = A;
 $9FE4 LD A,C        ; A = C;
 $9FE5 LD HL,$5842   ; HL = $5842; // first morale flag attribute byte
 $9FE8 CP (HL)       ; {if (A == *HL) return; // flag already correct colour
 $9FE9 RET Z         ; }
 $9FEA CP $44        ; {if (A == attribute_BRIGHT_GREEN_OVER_BLACK) <%
 $9FEC JP NZ,$A071   ; }
 $9FEF LD A,$FF      ; {  bell = bell_STOP; // silence bell
 $9FF1 LD ($A130),A  ; }
 $9FF4 LD A,C        ;   A = C; %>
 $9FF5 JP $A071      ; goto set_morale_flag_screen_attributes; // exit via
; Red flag code path.
*$9FF8 LD C,$42      ; set_flag_red: C = attribute_BRIGHT_RED_OVER_BLACK;
 $9FFA LD A,($5842)  ; A = ($5842); // first morale flag attribute byte
 $9FFD CP C          ; {if (A == C) return; // flag already red
 $9FFE RET Z         ; }
 $9FFF XOR A         ; {($800D) = 0; // "tunnel related" thing
 $A000 LD ($800D),A  ; }
 $A003 LD A,$FF      ; A = 255; // red_flag
 $A005 JR $9FE1      ; goto flag_select;

; in_permitted_area_end_bit
;
; Used by the routine at #R$9F21.
c$A007 LD HL,$68A0   ; HL = &room_index;
 $A00A BIT 7,A       ; {if (A & (1<<7)) return *HL == A & 0x7F; // return with
 $A00C JR Z,$A012    ; flags
 $A00E AND $7F       ;
 $A010 CP (HL)       ;
 $A011 RET           ; }
*$A012 EX AF,AF'     ; {if (*HL) return; // return with flags NZ
 $A013 LD A,(HL)     ;
 $A014 AND A         ;
 $A015 RET NZ        ; }
 $A016 LD DE,$81B8   ; {DE = &player_map_position.y;
 $A019 EX AF,AF'     ; }
; This entry point is used by the routine at #R$CB98.
*$A01A ADD A,A       ; {HL = &byte_9F15[A * 4];
 $A01B ADD A,A       ;
 $A01C LD C,A        ;
 $A01D LD B,$00      ;
 $A01F LD HL,$9F15   ;
 $A022 ADD HL,BC     ; }
 $A023 LD B,$02      ; B = 2;
*$A025 LD A,(DE)     ; do <% A = *DE++;
 $A026 CP (HL)       ; {  if (A < HL[0]) return; // return with flags NZ
 $A027 RET C         ; }
 $A028 INC HL        ; {  if (A >= HL[1]) <% A |= 1; return; %> // return with
 $A029 CP (HL)       ; flags NZ
 $A02A JR C,$A02F    ;
 $A02C OR $01        ;
 $A02E RET           ;
*$A02F INC DE        ; }
 $A030 INC HL        ;   HL += 2;
 $A031 DJNZ $A025    ; %> while (--B);
 $A033 AND B         ; A &= B;
 $A034 RET           ; return; // return with flags Z

; wave_morale_flag
;
; Used by the routines at #R$9D78 and #R$F4B7.
; .
; Wave the flag every other turn.
c$A035 LD HL,$A12F   ; HL = &game_counter;
 $A038 INC (HL)      ; (*HL)++;
 $A039 LD A,(HL)     ; {if (*HL & 1) return;
 $A03A AND $01       ;
 $A03C RET NZ        ; }
 $A03D PUSH HL       ; PUSH HL
 $A03E LD A,($A13C)  ; A = morale;
 $A041 LD HL,$A140   ; HL = &displayed_morale;
 $A044 CP (HL)       ; {if (A != *HL) <%
 $A045 JR Z,$A05D    ; }
 $A047 JP NC,$A053   ;   if (A < *HL) <%
; Decreasing morale.
 $A04A DEC (HL)      ;     (*HL)--;
 $A04B LD HL,($A141) ;     HL = moraleflag_screen_address;
 $A04E CALL $7CE9    ;     get_next_scanline(); %>
 $A051 JR $A05A      ;   else <%
; Increasing morale.
*$A053 INC (HL)      ;     (*HL)++;
 $A054 LD HL,($A141) ;     HL = moraleflag_screen_address;
 $A057 CALL $A082    ;     get_prev_scanline(); %>
*$A05A LD ($A141),HL ;   moraleflag_screen_address = HL; %>
*$A05D LD DE,$DA6B   ; DE = bitmap_flag_down;
 $A060 POP HL        ; POP HL
 $A061 BIT 1,(HL)    ; {if (*HL & 2) DE = bitmap_flag_up;
 $A063 JR Z,$A068    ;
 $A065 LD DE,$DA29   ; }
*$A068 LD HL,($A141) ; {HL = moraleflag_screen_address;
 $A06B LD BC,$0319   ; }
 $A06E JP $7CBE      ; plot_bitmap(0x0319); return; // dimensions: 24 x 25 //
                     ; args-BC // exit via

; set_morale_flag_screen_attributes
;
; Used by the routines at #R$9F21 and #R$F163.
;
; I:A Attributes to use.
c$A071 LD HL,$5842   ; HL = $5842; // first attribute byte
 $A074 LD DE,$001E   ; DE = $001E; // skip
 $A077 LD B,$13      ; B  = $13;
*$A079 LD (HL),A     ; {do <% *HL++ = A;
 $A07A INC L         ; }
 $A07B LD (HL),A     ; {  *HL = A;
 $A07C INC L         ;
 $A07D LD (HL),A     ; }
 $A07E ADD HL,DE     ;   HL += DE;
 $A07F DJNZ $A079    ; %> while (--B);
 $A081 RET           ; return;

; get_prev_scanline
;
; Used by the routine at #R$A035.
; .
; Given a screen address, returns the same position on the previous scanline.
;
; I:HL Original screen address.
; O:HL Updated screen address.
c$A082 LD A,H        ; {if ((H & 7) != 0) <% // NNN bits
 $A083 AND $07       ;
 $A085 JR Z,$A089    ; }
 $A087 DEC H         ;   HL -= 256; %> // step back one scanline
 $A088 RET           ; else <%
*$A089 LD DE,$06E0   ; {  if (L < 32) HL -= 32; else HL += 0x06E0; %> //
 $A08C LD A,L        ; complicated
 $A08D CP $20        ;
 $A08F JR NC,$A093   ;
 $A091 LD D,$FF      ;
*$A093 ADD HL,DE     ; }
 $A094 RET           ; return;

; indoors_delay_loop
;
; Used by the routine at #R$9D78.
; .
; Delay loop called when the player is indoors.
c$A095 LD BC,$0FFF   ; BC = 0xFFF;
*$A098 DEC BC        ; {while (--BC) ;
 $A099 LD A,C        ;
 $A09A OR B          ;
 $A09B JR NZ,$A098   ; }
 $A09D RET           ; return;

; ring_bell
;
; Used by the routine at #R$9D78.
; .
; Ring the alarm bell.
; .
; Called three times from main_loop.
c$A09E LD HL,$A130   ; HL = &bell;
 $A0A1 LD A,(HL)     ; A = *HL;
 $A0A2 CP $FF        ; {if (A == bell_STOP) return; // not ringing
 $A0A4 RET Z         ; }
 $A0A5 AND A         ; {if (A != bell_RING_PERPETUAL) <%
 $A0A6 JR Z,$A0B0    ; }
; Decrement the ring counter.
 $A0A8 DEC A         ; {  *HL = --A;
 $A0A9 LD (HL),A     ; }
 $A0AA JR NZ,$A0B0   ;   if (A == 0) <%
 $A0AC LD A,$FF      ; {    *HL = bell_STOP; // counter hit zero - stop
 $A0AE LD (HL),A     ; ringing}
 $A0AF RET           ;     return; %> %>
*$A0B0 LD A,($518E)  ; A = screenaddr_bell_ringer; // fetch visible state of
                     ; bell
 $A0B3 CP $3F        ; {if (A != 63) <%
 $A0B5 JP Z,$A0C6    ; }
; Redundant jump.
 $A0B8 JP $A0BB      ; -
; Plot ringer "on".
*$A0BB LD DE,$A153   ;   DE = bell_ringer_bitmap_on;
 $A0BE CALL $A0C9    ;   plot_ringer();
 $A0C1 LD BC,$2530   ; {  play_speaker(sound_BELL_RINGER); return; %> //
 $A0C4 JR $A11D      ; args=BC // exit via}
; Plot ringer "off".
*$A0C6 LD DE,$A147   ; else <% DE = bell_ringer_bitmap_off;
*$A0C9 LD HL,$518E   ;   plot_ringer: HL = screenaddr_bell_ringer;
 $A0CC LD BC,$010C   ; {  plot_bitmap(0x010C); return; %> // dimensions: 8 x 12
 $A0CF JP $7CBE      ; // args=BC // exit via}

; increase_morale
;
; Used by the routines at #R$A0E9 and #R$A0F2.
;
; I:B Amount to increase morale by. (Preserved)
c$A0D2 LD A,($A13C)  ; {A = morale + B;
 $A0D5 ADD A,B       ; }
 $A0D6 CP $70        ; {if (A >= morale_MAX) A = morale_MAX;
 $A0D8 JR C,$A0DC    ;
 $A0DA LD A,$70      ; }
; This entry point is used by the routine at #R$A0E0.
*$A0DC LD ($A13C),A  ; set_morale_from_A: morale = A;
 $A0DF RET           ; return;

; decrease_morale
;
; Used by the routines at #R$A1D3, #R$AE78, #R$CB98 and #R$CD31.
;
; I:B Amount to decrease morale by. (Preserved)
c$A0E0 LD A,($A13C)  ; {A = morale - B;
 $A0E3 SUB B         ; }
 $A0E4 JR NC,$A0DC   ; {if (A < morale_MIN) A = morale_MIN;
 $A0E6 XOR A         ; }
 $A0E7 JR $A0DC      ; goto set_morale_from_A;

; increase_morale_by_10_score_by_50
;
; Used by the routines at #R$B107, #R$B387, #R$B3C4, #R$B3E1, #R$B3F6, #R$B4B8
; and #R$EFCB.
; .
; Increase morale by 10, score by 50.
c$A0E9 LD B,$0A      ; {increase_morale(10);
 $A0EB CALL $A0D2    ; }
 $A0EE LD B,$32      ; {increase_score(50); return; // exit via
 $A0F0 JR $A0F9      ; }

; increase_morale_by_5_score_by_5
;
; Used by the routine at #R$7B36.
; .
; Increase morale by 5, score by 5.
c$A0F2 LD B,$05      ; {increase_morale(5);
 $A0F4 CALL $A0D2    ; }
 $A0F7 JR $A0F9      ; increase_score(5); return; // exit via

; increase_score
;
; Used by the routines at #R$68F4, #R$A0E9 and #R$A0F2.
; .
; Increases the score then plots it.
;
; I:B Amount to increase score by.
c$A0F9 LD A,$0A      ; A = 10;
 $A0FB LD HL,$A136   ; HL = &score_digits + 4;
*$A0FE PUSH HL       ; do <% tmp = HL;
*$A0FF INC (HL)      ;   increment_score: (*HL)++;
 $A100 CP (HL)       ; {  if (*HL == A) <% *HL-- = 0; goto increment_score; %>
 $A101 JR NZ,$A108   ;
 $A103 LD (HL),$00   ;
 $A105 DEC HL        ;
 $A106 JR $A0FF      ; }
*$A108 POP HL        ;   HL = tmp;
 $A109 DJNZ $A0FE    ; %> while (--B);
; FALL THROUGH into plot_score.

; plot_score
;
; Used by the routines at #R$B75A and #R$F163.
; .
; Draws the current score to screen.
c$A10B LD HL,$A132   ; HL = &score_digits;
 $A10E LD DE,$5094   ; DE = &score; // screen address of score
 $A111 LD B,$05      ; B = 5;
*$A113 PUSH BC       ; do <% -
 $A114 CALL $7D2F    ;   plot_glyph(); // HL -> glyph, DE -> destination
 $A117 INC HL        ;   HL++;
 $A118 INC DE        ;   DE++;
 $A119 POP BC        ;   -
 $A11A DJNZ $A113    ; %> while (--B);
 $A11C RET           ; return;

; play_speaker
;
; Used by the routines at #R$7B36, #R$7B8B, #R$A09E, #R$C4E0 and #R$CA81.
; .
; Makes a sound through the speaker.
;
; I:B Number of iterations to play for.
; I:C Delay inbetween each iteration.
c$A11D LD A,C        ; {delay = C; // Self-modify delay loop at $A126.
 $A11E LD ($A126),A  ; }
 $A121 LD A,$10      ; A = 16; // Initial speaker bit.
*$A123 OUT ($FE),A   ; {do <% OUT ($FE),A // Play.
 $A125 LD C,$37      ; }
*$A127 DEC C         ; {  C = delay; while (C--) ;
 $A128 JR NZ,$A127   ; }
 $A12A XOR $10       ;   A ^= 16; // Toggle speaker bit.
 $A12C DJNZ $A123    ; %> while (--B);
 $A12E RET           ; return;

; game_counter
;
; Counts 00..FF then wraps.
b$A12F DEFB $00

; bell
;
; 0 => ring indefinitely; 255 => don't ring; N => ring for N calls
b$A130 DEFB $FF

; unused_A131
;
; Unreferenced byte.
u$A131 DEFB $0A

; score_digits
b$A132 DEFB $00,$00,$00,$00,$00

; player_in_breakfast
b$A137 DEFB $00

; red_flag
;
; 0 => not naughty, 0xFF => naughty
b$A138 DEFB $00

; automatic_player_counter
;
; Countdown until CPU control of the player is assumed. When it becomes zero,
; control is assumed. It's usually set to 31 by input events.
b$A139 DEFB $00

; morale_1
;
; Inhibits user input when non-zero.
; .
; Stops set_hero_target_location working.
; .
; Used to set flag colour.
; .
; morale_1 + morale_2 treated as a word by process_player_input. Everything
; else treats this as a byte.
b$A13A DEFB $00

; morale_2
;
; Inhibits user input when non-zero.
; .
; Set by check_morale.
; .
; Reset by reset_game.
b$A13B DEFB $00

; morale
;
; Morale 'score'. Ranges morale_MIN .. morale_MAX.
b$A13C DEFB $70

; clock
b$A13D DEFB $07

; byte_A13E
;
; Mystery.
; .
; In byte_A13E_is_nonzero etc.: when non-zero, character_index is valid. Else
; IY points to character_struct.
b$A13E DEFB $00

; player_in_bed
b$A13F DEFB $FF

; displayed_morale
;
; Displayed morale, which lags behind actual morale while the flag moves slowly
; to its target.
b$A140 DEFB $00

; moraleflag_screen_address
;
; Pointer to the screen address where the morale flag was last plotted.
w$A141 DEFW $5002

; ptr_to_door_being_lockpicked
;
; Address of door (in gates_and_doors[]) in which bit 7 is cleared when picked.
w$A143 DEFW $0000

; player_locked_out_until
;
; Game time until player control is restored (e.g. when picking a lock or
; cutting wire).
b$A145 DEFB $00

; day_or_night
;
; Day or night time ($00 = daytime, $FF = nighttime).
b$A146 DEFB $00

; bell_ringer_bitmaps
b$A147 DEFB $E7,$E7,$83,$83,$43,$41,$20,$10 ; {bell_ringer_bitmap_off
 $A14F DEFB $08,$04,$02,$02                 ; }
 $A153 DEFB $3F,$3F,$27,$13,$13,$09,$08,$04 ; {bell_ringer_bitmap_on
 $A15B DEFB $04,$02,$02,$01                 ; }

; set_game_window_attributes
;
; Used by the routines at #R$7B36, #R$7B8B, #R$A1D3, #R$A50B, #R$B83B and
; #R$F350.
; .
; Starting at $5847, set 23 columns of 16 rows to A.
;
; I:A Attribute byte.
c$A15F LD HL,$5847   ; {memset($5847, A, 23 * 16); // WRONG! FIXME
 $A162 LD C,$10      ;
 $A164 LD DE,$0009   ;
*$A167 LD B,$17      ;
*$A169 LD (HL),A     ;
 $A16A INC L         ;
 $A16B DJNZ $A169    ;
 $A16D ADD HL,DE     ;
 $A16E DEC C         ;
 $A16F JP NZ,$A167   ;
 $A172 RET           ; }

; timed_events
;
; Array of 15 event structures.
b$A173 DEFB $00,$D3,$A1 ; {   0, event_another_day_dawns },
 $A176 DEFB $08,$E7,$A1 ; {   8, event_wake_up },
 $A179 DEFB $0C,$28,$A2 ; {  12, event_new_red_cross_parcel },
 $A17C DEFB $10,$F0,$A1 ; {  16, event_go_to_roll_call },
 $A17F DEFB $14,$9A,$EF ; {  20, event_roll_call },
 $A182 DEFB $15,$F9,$A1 ; {  21, event_go_to_breakfast_time },
 $A185 DEFB $24,$02,$A2 ; {  36, event_breakfast_time },
 $A188 DEFB $2E,$06,$A2 ; {  46, event_go_to_exercise_time },
 $A18B DEFB $40,$15,$A2 ; {  64, event_exercise_time },
 $A18E DEFB $4A,$F0,$A1 ; {  74, event_go_to_roll_call },
 $A191 DEFB $4E,$9A,$EF ; {  78, event_roll_call },
 $A194 DEFB $4F,$19,$A2 ; {  79, event_go_to_time_for_bed },
 $A197 DEFB $62,$64,$A2 ; {  98, event_time_for_bed },
 $A19A DEFB $64,$C3,$A1 ; { 100, event_night_time },
 $A19D DEFB $82,$6A,$A2 ; { 130, event_search_light },

; dispatch_timed_event
;
; Used by the routine at #R$9D78.
; .
; Dispatches time-based game events like parcels, meals, exercise and roll
; calls.
; .
; Increment the clock, wrapping at 140.
c$A1A0 LD HL,$A13D   ; HL = &clock;
 $A1A3 LD A,(HL)     ; {A = *HL + 1;
 $A1A4 INC A         ; }
 $A1A5 CP $8C        ; {if (A == 140) A = 0;
 $A1A7 JR NZ,$A1AA   ;
 $A1A9 XOR A         ; }
*$A1AA LD (HL),A     ; *HL = A;
; Dispatch the event for that time.
 $A1AB LD HL,$A173   ; HL = &timed_events[0];
 $A1AE LD B,$0F      ; B = 15; // 15 iterations
*$A1B0 CP (HL)       ; {do <% if (A == *HL++) goto found;
 $A1B1 INC HL        ;
 $A1B2 JR Z,$A1B9    ; }
 $A1B4 INC HL        ; {  HL += 2;
 $A1B5 INC HL        ; }
 $A1B6 DJNZ $A1B0    ; %> while (--B);
 $A1B8 RET           ; return;
*$A1B9 LD A,(HL)     ; {found: L = *HL++;
 $A1BA INC HL        ; }
 $A1BB LD H,(HL)     ; {H = *HL;
 $A1BC LD L,A        ; }
 $A1BD LD A,$28      ; A = bell_RING_40_TIMES;
 $A1BF LD BC,$A130   ; BC = &bell;
 $A1C2 JP (HL)       ; goto *HL; // fantasy syntax

; event_night_time
c$A1C3 LD A,($A13F)  ; {if (player_in_bed == 0)
 $A1C6 AND A         ; set_hero_target_location(location_012C);
 $A1C7 JR NZ,$A1CF   ;
 $A1C9 LD BC,$2C01   ;
 $A1CC CALL $A33F    ; }
*$A1CF LD A,$FF      ; A = 0xFF;
 $A1D1 JR $A1DE      ; goto set_attrs;

; event_another_day_dawns
c$A1D3 LD B,$13      ; {queue_message_for_display(message_ANOTHER_DAY_DAWNS);
 $A1D5 CALL $7D15    ; }
 $A1D8 LD B,$19      ; {decrease_morale(25);
 $A1DA CALL $A0E0    ; }
 $A1DD XOR A         ; A = 0;
; This entry point is used by the routine at #R$A1C3.
*$A1DE LD ($A146),A  ; set_attrs: day_or_night = A;
 $A1E1 CALL $AB6B    ; choose_game_window_attributes();
 $A1E4 JP $A15F      ; set_game_window_attributes(); return; // exit via

; event_wake_up
c$A1E7 LD (BC),A     ; *BC = A; // bell = bell_RING_40_TIMES;
 $A1E8 LD B,$01      ; {queue_message_for_display(message_TIME_TO_WAKE_UP);
 $A1EA CALL $7D15    ; }
 $A1ED JP $A289      ; wake_up(); return; // exit via

; event_go_to_roll_call
c$A1F0 LD (BC),A     ; *BC = A; // bell = bell_RING_40_TIMES;
 $A1F1 LD B,$08      ; {queue_message_for_display(message_ROLL_CALL);
 $A1F3 CALL $7D15    ; }
 $A1F6 JP $A4FD      ; go_to_roll_call(); return; // exit via

; event_go_to_breakfast_time
c$A1F9 LD (BC),A     ; *BC = A; // bell = bell_RING_40_TIMES;
 $A1FA LD B,$02      ; {queue_message_for_display(message_BREAKFAST_TIME);
 $A1FC CALL $7D15    ; }
 $A1FF JP $A4C5      ; set_location_0x0010(); return; // exit via

; event_breakfast_time
c$A202 LD (BC),A     ; *BC = A; // bell = bell_RING_40_TIMES;
 $A203 JP $A2E2      ; breakfast_time(); return; // exit via

; event_go_to_exercise_time
c$A206 LD (BC),A     ; *BC = A; // bell = bell_RING_40_TIMES;
 $A207 LD B,$03      ; {queue_message_for_display(message_EXERCISE_TIME);
 $A209 CALL $7D15    ; }
; Unlock the gates.
 $A20C LD HL,$0100   ; {gates_and_doors[0] = 0x00; gates_and_doors[1] = 0x01;
 $A20F LD ($F05D),HL ; }
 $A212 JP $A4A9      ; set_location_0x000E(); return; // exit via

; event_exercise_time
c$A215 LD (BC),A     ; *BC = A; // bell = bell_RING_40_TIMES;
 $A216 JP $A4B7      ; set_location_0x048E(); return; // exit via

; event_go_to_time_for_bed
c$A219 LD (BC),A     ; *BC = A; // bell = bell_RING_40_TIMES;
; Lock the gates.
 $A21A LD HL,$8180   ; {gates_and_doors[0] = 0x80; gates_and_doors[1] = 0x81;
 $A21D LD ($F05D),HL ; }
 $A220 LD B,$04      ; {queue_message_for_display(message_TIME_FOR_BED);
 $A222 CALL $7D15    ; }
 $A225 JP $A351      ; go_to_time_for_bed(); return; // exit via

; event_new_red_cross_parcel
;
; Don't deliver a new red cross parcel while the previous one still exists.
c$A228 LD A,($771D)                 ; {if
 $A22B AND $3F                      ; ((item_structs[item_RED_CROSS_PARCEL].room
 $A22D CP $3F                       ; & itemstruct_ROOM_MASK) !=
 $A22F RET NZ                       ; itemstruct_ROOM_MASK) return;}
; Select the next parcel contents -- the first item from the list which does
; not exist.
 $A230 LD DE,$A25F                  ; DE = &red_cross_parcel_contents_list[0];
 $A233 LD B,$04                     ; B = 4; // length of above
*$A235 LD A,(DE)                    ; do <% A = *DE;
 $A236 CALL $7C26                   ;   HL = item_to_itemstruct(A);
 $A239 INC HL                       ;   HL++;
 $A23A LD A,(HL)                    ; {  if ((*HL & itemstruct_ROOM_MASK) ==
 $A23B AND $3F                      ; itemstruct_ROOM_MASK) goto found;
 $A23D CP $3F                       ;
 $A23F JR Z,$A245                   ; }
 $A241 INC DE                       ;   DE++;
 $A242 DJNZ $A235                   ; %> while (--B);
 $A244 RET                          ; return;
*$A245 LD A,(DE)                    ; {found: red_cross_parcel_current_contents
 $A246 LD ($A263),A                 ; = *DE;}
 $A249 LD DE,$771D                  ; {memcpy(&item_structs[item_RED_CROSS_PARCEL].room,
 $A24C LD HL,$A259                  ; red_cross_parcel_reset_data, 6);
 $A24F LD BC,$0006                  ;
 $A252 LDIR                         ; }
 $A254 LD B,$09                     ; {queue_message_for_display(message_RED_CROSS_PARCEL);
 $A256 JP $7D15                     ; return; // exit via}
; red_cross_parcel_reset_data
; .
; Data to set the parcel object up (room, y, x, ...).
 $A259 DEFB $14,$2C,$2C,$0C,$80,$F4 ; { item_RED_CROSS_PARCEL, 44,44,
                                    ; 0x0C,0x80,0xF4 };
 $A25F DEFB $0E,$00,$05,$0F         ; item_t red_cross_parcel_contents_list[] =
                                    ; { item_PURSE, item_WIRESNIPS, item_BRIBE,
                                    ; item_COMPASS };
 $A263 DEFB $FF                     ; red_cross_parcel_current_contents

; event_time_for_bed
c$A264 LD A,$A6      ; A = 0xA6;
 $A266 LD C,$03      ; C = 3;
 $A268 JR $A26E      ; goto $A26E;

; event_search_light
c$A26A LD A,$26      ; A = 0x26;
 $A26C LD C,$00      ; C = 0;
; This entry point is used by the routine at #R$A264.
; .
; Common end of event_time_for_bed and event_search_light.
*$A26E EX AF,AF'     ; -
 $A26F LD A,$0C      ; Adash = 12;
 $A271 LD B,$04      ; B = 4; // 4 iterations
*$A273 PUSH AF       ; do <% PUSH AF
 $A274 CALL $A38C    ;   set_character_location();
 $A277 POP AF        ;   POP AF
 $A278 INC A         ;   Adash++;
 $A279 EX AF,AF'     ;   -
 $A27A INC A         ;   A++;
 $A27B EX AF,AF'     ;   -
 $A27C DJNZ $A273    ; %> while (--B);
 $A27E RET           ; return;

; prisoners_and_guards
;
; List of non-player characters: six prisoners and four guards.
; .
; [unsure] (<- set_prisoners_and_guards_location,
; set_prisoners_and_guards_location_B)
b$A27F DEFB $0C,$0D,$14,$15,$16,$0E,$0F,$17 ; {character_t
 $A287 DEFB $18,$19                         ; prisoners_and_guards[] = {
                                            ; character_12_GUARD_12,
                                            ; character_13_GUARD_13,
                                            ; character_20_PRISONER_1,
                                            ; character_21_PRISONER_2,
                                            ; character_22_PRISONER_3,
                                            ; character_14_GUARD_14,
                                            ; character_15_GUARD_15,
                                            ; character_23_PRISONER_4,
                                            ; character_24_PRISONER_5,
                                            ; character_25_PRISONER_6 };}

; wake_up
;
; Used by the routine at #R$A1E7.
; .
; Called by event_wake_up.
c$A289 LD A,($A13F)  ; {if (player_in_bed) <% // odd that this jumps into a
 $A28C AND A         ; point which sets player_in_bed to zero when it's already
 $A28D JP Z,$A299    ; zero}
 $A290 LD HL,$800F   ; {  $800F = 46; // player's Y position
 $A293 LD (HL),$2E   ; }
 $A295 INC L         ; {  $8011 = 46; %> // player's X position
 $A296 INC L         ;
 $A297 LD (HL),$2E   ; }
*$A299 XOR A         ; {player_in_bed = 0;
 $A29A LD ($A13F),A  ; }
 $A29D LD BC,$2A00   ; {set_hero_target_location(location_002A);
 $A2A0 CALL $A33F    ; }
 $A2A3 LD HL,$769F   ; HL = &characterstruct_20.room;
 $A2A6 LD DE,$0007   ; -
 $A2A9 LD A,$03      ; -
 $A2AB LD B,$03      ; B = 3; // 3 iterations
*$A2AD LD (HL),A     ; do <% *HL = room_3_hut2right;
 $A2AE ADD HL,DE     ;   HL += 7; // characterstruct stride
 $A2AF DJNZ $A2AD    ; %> while (--B);
 $A2B1 LD A,$05      ; -
 $A2B3 LD B,$03      ; B = 3; // 3 iterations
*$A2B5 LD (HL),A     ; do <% *HL = room_5_hut3right;
 $A2B6 ADD HL,DE     ;   HL += 7; // characterstruct stride
 $A2B7 DJNZ $A2B5    ; %> while (--B);
 $A2B9 LD A,$05      ; A = 5; // incremented by
                     ; set_prisoners_and_guards_location_B
 $A2BB EX AF,AF'     ; EX AF,AF'
 $A2BC LD C,$00      ; C = 0; // BC = 0
 $A2BE CALL $A373    ; set_prisoners_and_guards_location_B();
; Update all the bed objects to be empty.
 $A2C1 LD A,$09      ; -
 $A2C3 LD HL,$6B79   ; HL = &beds[0];
; Bug: 7 iterations BUT only six beds in the data structure resulting in write
; to ROM location $1A42.
 $A2C6 LD B,$07      ; B = 7; // 7 iterations
*$A2C8 LD E,(HL)     ; {do <% E = *HL++;
 $A2C9 INC HL        ; }
 $A2CA LD D,(HL)     ; {  D = *HL++;
 $A2CB INC HL        ; }
 $A2CC LD (DE),A     ;   *DE = interiorobject_EMPTY_BED;
 $A2CD DJNZ $A2C8    ; %> while (--B);
; Update the player's bed object to be empty.
 $A2CF LD HL,$6C61   ; {room_2_hut2_left.bed = interiorobject_EMPTY_BED;
 $A2D2 LD (HL),A     ; }
 $A2D3 LD A,($68A0)  ; {if (room_index == room_0_outdoors || room_index >=
 $A2D6 AND A         ; room_6) return;
 $A2D7 RET Z         ;
 $A2D8 CP $06        ;
 $A2DA RET NC        ; }
 $A2DB CALL $6A35    ; setup_room();
 $A2DE CALL $6B42    ; plot_interior_tiles();
 $A2E1 RET           ; return;

; breakfast_time
;
; Used by the routine at #R$A202.
c$A2E2 LD A,($A137)  ; {if (player_in_breakfast) <%
 $A2E5 AND A         ;
 $A2E6 JP Z,$A2F2    ; }
 $A2E9 LD HL,$800F   ; {  $800F = 52; // player Y position
 $A2EC LD (HL),$34   ; }
 $A2EE INC L         ; {  $8011 = 62; %> // player X position
 $A2EF INC L         ;
 $A2F0 LD (HL),$3E   ; }
*$A2F2 XOR A         ; {player_in_breakfast = 0;
 $A2F3 LD ($A137),A  ; }
 $A2F6 LD BC,$9003   ; {set_hero_target_location(location_0390);
 $A2F9 CALL $A33F    ; }
 $A2FC LD HL,$769F   ; HL = &characterstruct_20.room; //
                     ; character_20_PRISONER_1
 $A2FF LD DE,$0007   ; -
 $A302 LD A,$19      ; -
 $A304 LD B,$03      ; B = 3; // 3 iterations
*$A306 LD (HL),A     ; do <% *HL = room_25_breakfast;
 $A307 ADD HL,DE     ;   HL += 7; // stride
 $A308 DJNZ $A306    ; %> while (--B);
 $A30A LD A,$17      ; -
 $A30C LD B,$03      ; B = 3; // 3 iterations
*$A30E LD (HL),A     ; do <% *HL = room_23_breakfast;
 $A30F ADD HL,DE     ;   HL += 7; // stride
 $A310 DJNZ $A30E    ; %> while (--B);
 $A312 LD A,$90      ; A = 144; // incremented by
                     ; set_prisoners_and_guards_location_B
 $A314 EX AF,AF'     ; EX AF,AF'
 $A315 LD C,$03      ; C = 3;
 $A317 CALL $A373    ; set_prisoners_and_guards_location_B();
 $A31A LD A,$0D      ; -
; Update all the benches to be empty.
 $A31C LD ($6F17),A  ; roomdef_23_breakfast.bench_A =
                     ; interiorobject_EMPTY_BENCH;
 $A31F LD ($6F1A),A  ; roomdef_23_breakfast.bench_B =
                     ; interiorobject_EMPTY_BENCH;
 $A322 LD ($6F1D),A  ; roomdef_23_breakfast.bench_C =
                     ; interiorobject_EMPTY_BENCH;
 $A325 LD ($6F4F),A  ; roomdef_25_breakfast.bench_D =
                     ; interiorobject_EMPTY_BENCH;
 $A328 LD ($6F52),A  ; roomdef_25_breakfast.bench_E =
                     ; interiorobject_EMPTY_BENCH;
 $A32B LD ($6F55),A  ; roomdef_25_breakfast.bench_F =
                     ; interiorobject_EMPTY_BENCH;
 $A32E LD ($6F58),A  ; roomdef_25_breakfast.bench_G =
                     ; interiorobject_EMPTY_BENCH;
 $A331 LD A,($68A0)  ; {if (room_index == room_0_outdoors || room_index >=
 $A334 AND A         ; room_29_secondtunnelstart) return;
 $A335 RET Z         ;
 $A336 CP $1D        ;
 $A338 RET NC        ; }
 $A339 CALL $6A35    ; setup_room();
 $A33C JP $6B42      ; plot_interior_tiles(); return; // exit via // note that
                     ; this differs to wake_up's ending

; set_hero_target_location
;
; Used by the routines at #R$9F21, #R$A1C3, #R$A289, #R$A2E2, #R$A351, #R$A3F8,
; #R$A4A9, #R$A4B7, #R$A4C5, #R$A4D8 and #R$A4FD.
c$A33F LD A,($A13A)  ; {if (morale_1) return;
 $A342 AND A         ;
 $A343 RET NZ        ; }
; This entry point is used by the routine at #R$C7C6.
*$A344 LD HL,$8001   ; {$8001 &= ~vischar_BYTE1_BIT6;
 $A347 RES 6,(HL)    ; }
 $A349 INC L         ; {$8002 = B;
 $A34A LD (HL),B     ; }
 $A34B INC L         ; {$8003 = C;
 $A34C LD (HL),C     ; }
 $A34D CALL $A3BB    ; sub_A3BB();
 $A350 RET           ; return;

; go_to_time_for_bed
;
; Used by the routine at #R$A219.
c$A351 LD BC,$8502   ; {set_hero_target_location(location_0285);
 $A354 CALL $A33F    ; }
 $A357 LD A,$85      ; {Adash = 133;
 $A359 EX AF,AF'     ; }
 $A35A LD C,$02      ; C = 2;
 $A35C JP $A373      ; set_prisoners_and_guards_location_B(); return; // exit
                     ; via

; set_prisoners_and_guards_location
;
; Used by the routine at #R$A4FD.
; .
; Uses prisoners_and_guards structure.
;
; O:Adash Counter incremented.
c$A35F LD HL,$A27F   ; HL = &prisoners_and_guards[0];
 $A362 LD B,$0A      ; B = 10;
*$A364 PUSH HL       ; do <% PUSH HL
 $A365 PUSH BC       ;   PUSH BC
 $A366 LD A,(HL)     ;   A = *HL;
 $A367 CALL $A38C    ;   set_character_location();
 $A36A EX AF,AF'     ; {  Adash++;
 $A36B INC A         ;
 $A36C EX AF,AF'     ; }
 $A36D POP BC        ;   POP BC
 $A36E POP HL        ;   POP HL
 $A36F INC HL        ;   HL++;
 $A370 DJNZ $A364    ; %> while (--B);
 $A372 RET           ; return;

; set_prisoners_and_guards_location_B
;
; Used by the routines at #R$A289, #R$A2E2, #R$A351, #R$A4A9, #R$A4B7 and
; #R$A4C5.
; .
; Uses prisoners_and_guards structure.
;
; O:Adash Counter incremented.
c$A373 LD HL,$A27F   ; HL = &prisoners_and_guards[0];
 $A376 LD B,$0A      ; B = 10;
*$A378 PUSH HL       ; do <% PUSH HL
 $A379 PUSH BC       ;   PUSH BC
 $A37A LD A,(HL)     ;   A = *HL;
 $A37B CALL $A38C    ;   set_character_location();
 $A37E POP BC        ;   POP BC
 $A37F LD A,B        ; {  if (B == 6) Adash++; // array index 6 is character
 $A380 CP $06        ; 22
 $A382 JR NZ,$A387   ;
 $A384 EX AF,AF'     ;
 $A385 INC A         ;
 $A386 EX AF,AF'     ; }
*$A387 POP HL        ;   POP HL
 $A388 INC HL        ;   HL++;
 $A389 DJNZ $A378    ; %> while (--B);
 $A38B RET           ; return;

; set_character_location
;
; Used by the routines at #R$A26A, #R$A35F and #R$A373.
; .
; Walk non-player visible characters, ...
;
; I:A     Character index.
; I:Adash ?
; I:C     ?
c$A38C CALL $C7B9    ; HL = get_character_struct(A);
 $A38F BIT 6,(HL)    ; {if ((*HL & characterstruct_FLAG_DISABLED) == 0) goto
 $A391 JP Z,$A3AA    ; not_set; // disabled?}
 $A394 PUSH BC       ; PUSH BC
 $A395 LD A,(HL)     ; {A = *HL & characterstruct_BYTE0_MASK;
 $A396 AND $1F       ; }
 $A398 LD B,$07      ; B = 7; // 7 iterations
 $A39A LD DE,$0020   ; DE = 32; // stride
 $A39D LD HL,$8020   ; HL = $8020; // iterate over non-player characters
*$A3A0 CP (HL)       ; {do <% if (A == *HL) goto found;
 $A3A1 JR Z,$A3B3    ; }
 $A3A3 ADD HL,DE     ;   HL += DE;
 $A3A4 DJNZ $A3A0    ; %> while (--B);
 $A3A6 POP BC        ; POP BC
 $A3A7 JR $A3B2      ; goto exit;
 $A3A9 DEFB $19      ; Unreferenced byte.
*$A3AA INC HL        ; {not_set: HL += 5; // HL = charstruct->target
 $A3AB INC HL        ;
 $A3AC INC HL        ;
 $A3AD INC HL        ;
 $A3AE INC HL        ; }
 $A3AF CALL $A3ED    ; store_location();
*$A3B2 RET           ; exit: return;
*$A3B3 POP BC        ; found: POP BC
 $A3B4 INC L         ; HL++;
 $A3B5 RES 6,(HL)    ; {*HL++ &= ~vischar_BYTE1_BIT6;
 $A3B7 INC L         ; }
 $A3B8 CALL $A3ED    ; store_location(); // HL = vischar->target

; sub_A3BB
;
; Used by the routine at #R$A33F.
c$A3BB XOR A         ; {byte_A13E = 0;
 $A3BC LD ($A13E),A  ; }
 $A3BF PUSH BC       ; PUSH BC
 $A3C0 PUSH HL       ; PUSH HL
 $A3C1 DEC L         ; HL--;
 $A3C2 CALL $C651    ; sub_C651();
 $A3C5 POP DE        ; POP DE  // DE = the HL stored at $A3C0
 $A3C6 INC E         ; DE++;
 $A3C7 LDI           ; LDI // *DE++ = *HL++; BC--;
 $A3C9 LDI           ; LDI // *DE++ = *HL++; BC--;
 $A3CB CP $FF        ; {if (A == 255) <%
 $A3CD JP NZ,$A3DF   ; }
 $A3D0 LD A,E        ; {  DE -= 6;
 $A3D1 SUB $06       ;
 $A3D3 LD E,A        ; }
 $A3D4 PUSH DE       ; {  IY = DE;
 $A3D5 POP IY        ; }
 $A3D7 EX DE,HL      ;   EX DE,HL
 $A3D8 INC L         ; {  HL += 2;
 $A3D9 INC L         ; }
 $A3DA CALL $CB23    ;   sub_CB23();
 $A3DD POP BC        ;   POP BC // could have just ended the block here
 $A3DE RET           ;   return; %>
*$A3DF CP $80        ; {else if (A == 128) <%
 $A3E1 JP NZ,$A3EB   ; }
 $A3E4 LD A,E        ; {  DE -= 5;
 $A3E5 SUB $05       ;
 $A3E7 LD E,A        ; }
 $A3E8 EX DE,HL      ;   EX DE,HL
 $A3E9 SET 6,(HL)    ;   *HL |= vischar_BYTE1_BIT6; %> // sample = HL = $8001
*$A3EB POP BC        ; POP BC
 $A3EC RET           ; return;

; store_location
;
; Used by the routine at #R$A38C.
c$A3ED EX AF,AF'     ; {*HL++ = Adash;
 $A3EE LD (HL),A     ;
 $A3EF EX AF,AF'     ;
 $A3F0 INC HL        ; }
 $A3F1 LD (HL),C     ; *HL = C;
 $A3F2 RET           ; return;

; byte_A13E_is_nonzero
;
; Used by the routine at #R$C7C6.
; .
; Checks character indexes, sets target locations, ...
;
; I:HL -> characterstruct?
c$A3F3 LD A,($8217)  ; A = character_index;
 $A3F6 JR $A404      ; goto $A404;

; byte_A13E_is_zero
;
; Used by the routine at #R$C7C6.
; .
; Gets hit when player enters hut at end of day.
c$A3F8 LD A,(IY+$00) ; A = IY[0]; // IY=$8000 // must be a character index
 $A3FB AND A         ; {if (A == 0) <% set_hero_target_location(location_002C);
 $A3FC JR NZ,$A404   ; return; %> // exit via
 $A3FE LD BC,$2C00   ;
 $A401 JP $A33F      ; }
; This entry point is used by the routine at #R$A3F3.
*$A404 INC HL        ; {HL[1] = 0; // HL=$766B,$7672 characterstruct + 5
 $A405 LD (HL),$00   ; (characterstruct + 6 when zeroed)}
 $A407 CP $13        ; {if (A > 19) <%
 $A409 JP Z,$A413    ;
 $A40C JP C,$A413    ; }
 $A40F SUB $0D       ;   A -= 13; %> // 20.. => 7..
 $A411 JR $A41D      ; else <%
*$A413 BIT 0,A       ; {  old_A = A; A = 13; if (old_A & (1<<0)) <% // tmp
 $A415 LD A,$0D      ; introduced to avoid interleaving
 $A417 JR Z,$A41D    ; }
 $A419 LD (HL),$01   ;     HL[1] = 1; // HL=$7681,$7673 // characterstruct_N +
                     ; 6
 $A41B OR $80        ;     A |= 0x80; %> %>
*$A41D DEC HL        ; {HL[0] = A; // characterstruct_N + 5
 $A41E LD (HL),A     ; }
 $A41F RET           ; return;

; character_sits
;
; Used by the routine at #R$C7C6.
;
; I:A Character.
; I:HL ?
c$A420 PUSH AF       ; PUSH AF
 $A421 EX DE,HL      ; EX DE,HL
 $A422 SUB $12       ; A -= 18; // first three characters
 $A424 LD HL,$6F4F   ; HL = &roomdef_25_breakfast.bench_D;
 $A427 CP $03        ; {if (A >= 3) <% // second three characters
 $A429 JR C,$A430    ; }
 $A42B LD HL,$6F17   ;   HL = &roomdef_23_breakfast.bench_A;
 $A42E SUB $03       ;   A -= 3; %>
; Poke object.
*$A430 LD C,A        ; {HL += A * 3;
 $A431 ADD A,A       ;
 $A432 ADD A,C       ;
 $A433 LD B,$00      ;
 $A435 LD C,A        ;
 $A436 ADD HL,BC     ; }
 $A437 LD (HL),$05   ; *HL = interiorobject_PRISONER_SAT_DOWN_MID_TABLE;
 $A439 POP AF        ; POP AF
 $A43A LD C,$19      ; C = room_25_breakfast;
 $A43C CP $15        ; {if (A >= character_21_PRISONER_2) C =
 $A43E JR C,$A462    ; room_23_breakfast;
 $A440 LD C,$17      ; }
 $A442 JR $A462      ; goto character_sit_sleep_common;
; This entry point is used by the routine at #R$C7C6.
; .
; character_sleeps
*$A444 PUSH AF       ; PUSH AF
 $A445 SUB $07       ; {A -= 7;
 $A447 ADD A,A       ; }
 $A448 EX DE,HL      ; EX DE,HL
; Poke object.
 $A449 LD C,A        ; {BC = beds[A];
 $A44A LD B,$00      ;
 $A44C LD HL,$6B79   ;
 $A44F ADD HL,BC     ;
 $A450 LD C,(HL)     ;
 $A451 INC HL        ;
 $A452 LD B,(HL)     ; }
 $A453 LD A,$17      ; {*BC = interiorobject_OCCUPIED_BED;
 $A455 LD (BC),A     ; }
 $A456 POP AF        ; POP AF
 $A457 CP $0A        ; {if (A < character_10_GUARD_10)
 $A459 JP NC,$A460   ; }
 $A45C LD C,$03      ;   C = room_3_hut2_right;
 $A45E JR $A462      ; else
*$A460 LD C,$05      ;   C = room_5_hut3_right;
; (common end of above two routines)
; .
; I:C Character?
; .
; I:DE Pointer to ?
*$A462 EX DE,HL      ; character_sit_sleep_common: EX DE,HL
 $A463 LD (HL),$00   ; *HL = 0;  // $8022, $76B8, $76BF, $76A3  (can be vischar
                     ; OR characterstruct - weird)
 $A465 EX AF,AF'     ; EX AF,AF'
 $A466 LD A,($68A0)  ; {if (room_index != C) <%
 $A469 CP C          ;
 $A46A JR Z,$A473    ; }
 $A46C DEC HL        ; {  HL -= 4;
 $A46D DEC HL        ;
 $A46E DEC HL        ;
 $A46F DEC HL        ; }
 $A470 LD (HL),$FF   ;   *HL = 255;
 $A472 RET           ;   return; %>
; Force a refresh.
*$A473 LD A,L        ; {HL += 26;
 $A474 ADD A,$1A     ;
 $A476 LD L,A        ; }
 $A477 LD (HL),$FF   ; *HL = 255;
; This entry point is used by the routine at #R$A489.
*$A479 CALL $6A35    ; select_room_and_plot: setup_room(); // make this into
                     ; its own function
 $A47C JP $6B42      ; plot_interior_tiles(); return;

; hero_sits
;
; Used by the routine at #R$C7C6.
c$A47F LD HL,$6F58   ; {roomdef_25_breakfast.bench_G =
 $A482 LD (HL),$13   ; interiorobject_PRISONER_SAT_DOWN_END_TABLE;}
 $A484 LD HL,$A137   ; HL = &player_in_breakfast;
 $A487 JR $A491      ; goto hero_sit_sleep_common;

; hero_sleeps
;
; Used by the routines at #R$B75A and #R$C7C6.
c$A489 LD HL,$6C61   ; {roomdef_2_hut2_left.bed = interiorobject_OCCUPIED_BED;
 $A48C LD (HL),$17   ; }
 $A48E LD HL,$A13F   ; HL = &player_in_bed;
; This entry point is used by the routine at #R$A47F.
; .
; (common end of the above two routines)
*$A491 LD (HL),$FF   ; hero_sit_sleep_common: *HL = 0xFF; // set in breakfast,
                     ; or in bed
 $A493 XOR A         ; A = 0;
 $A494 LD HL,$8002   ; {$8002 = A; // target location? bottom byte only?
 $A497 LD (HL),A     ; }
; Set player position to zero.
 $A498 LD HL,$800F   ; {memset($800F, 0, 4);
 $A49B LD B,$04      ;
*$A49D LD (HL),A     ;
 $A49E INC L         ;
 $A49F DJNZ $A49D    ; }
 $A4A1 LD HL,$8000   ; HL = $8000;
 $A4A4 CALL $B71B    ; reset_position(); // reset player
 $A4A7 JR $A479      ; goto select_room_and_plot;

; set_location_0x000E
;
; Used by the routine at #R$A206.
c$A4A9 LD BC,$0E00   ; {set_hero_target_location(0x000E);
 $A4AC CALL $A33F    ; }
 $A4AF LD A,$0E      ; A = 0x0E;
 $A4B1 EX AF,AF'     ; EX AF,AF'
 $A4B2 LD C,$00      ; C = 0;
 $A4B4 JP $A373      ; set_prisoners_and_guards_location_B(); return; // exit
                     ; via

; set_location_0x048E
;
; Used by the routine at #R$A215.
c$A4B7 LD BC,$8E04   ; {set_hero_target_location(0x048E);
 $A4BA CALL $A33F    ; }
 $A4BD LD A,$8E      ; A = 0x8E;
 $A4BF EX AF,AF'     ; EX AF,AF'
 $A4C0 LD C,$04      ; C = 4;
 $A4C2 JP $A373      ; set_prisoners_and_guards_location_B(); return; // exit
                     ; via

; set_location_0x0010
;
; Used by the routine at #R$A1F9.
c$A4C5 LD BC,$1000   ; {set_hero_target_location(0x0010);
 $A4C8 CALL $A33F    ; }
 $A4CB LD A,$10      ; A = 0x10;
 $A4CD EX AF,AF'     ; EX AF,AF'
 $A4CE LD C,$00      ; C = 0;
 $A4D0 JP $A373      ; set_prisoners_and_guards_location_B(); return; // exit
                     ; via

; byte_A13E_is_nonzero_anotherone
;
; Used by the routine at #R$C7C6.
; .
; Something character related [very similar to the routine at $A3F3].
c$A4D3 LD A,($8217)  ; A = character_index;
 $A4D6 JR $A4E4      ; goto $A4E4;

; byte_A13E_is_zero_anotherone
;
; Used by the routine at #R$C7C6.
; .
; Sets a target location 0x002B. Seems to get hit around breakfasting time. If
; I nobble this it stops him sitting for breakfast.
c$A4D8 LD A,(IY+$00) ; {A = IY[0]; // must be a character index
 $A4DB AND A         ; }
 $A4DC JR NZ,$A4E4   ; {if (A == 0) <% set_hero_target_location(location_002B);
 $A4DE LD BC,$2B00   ; return; %> // exit via
 $A4E1 JP $A33F      ; }
; This entry point is used by the routine at #R$A4D3.
*$A4E4 INC HL        ; {HL[1] = 0;
 $A4E5 LD (HL),$00   ; }
 $A4E7 CP $13        ; {if (A > 19) <% // change this to 20 and character_21?
 $A4E9 JP Z,$A4F3    ; stands in place of a guard
 $A4EC JP C,$A4F3    ; }
 $A4EF SUB $02       ;   tmp_A = A - 2; %> // seems to affect position at table
                     ; // 20.. => 18..
 $A4F1 JR $A4FA      ; else <%
*$A4F3 BIT 0,A       ;   -
 $A4F5 LD A,$18      ;   tmp_A = 24; // interleaved // guard character?
 $A4F7 JR Z,$A4FA    ; {  if (A & (1<<0)) tmp_A++; %>
 $A4F9 INC A         ; }
*$A4FA DEC HL        ; {HL[0] = tmp_A;
 $A4FB LD (HL),A     ; }
 $A4FC RET           ; return;

; go_to_roll_call
;
; Used by the routine at #R$A1F0.
c$A4FD LD A,$1A      ; A = 26;
 $A4FF EX AF,AF'     ; EX AF,AF'
 $A500 LD C,$00      ; C = 0;
 $A502 CALL $A35F    ; set_prisoners_and_guards_location();
 $A505 LD BC,$2D00   ; {set_hero_target_location(location_002D);
 $A508 JP $A33F      ; }

; screen_reset
;
; Used by the routines at #R$9DE5 and #R$A51C.
c$A50B CALL $6A27    ; wipe_visible_tiles();
 $A50E CALL $6B42    ; plot_interior_tiles();
 $A511 CALL $ABA0    ; zoombox();
 $A514 CALL $EED3    ; plot_game_window();
 $A517 LD A,$07      ; A = attribute_WHITE_OVER_BLACK;
 $A519 JP $A15F      ; set_game_window_attributes(); return; // exit via

; escaped
;
; Used by the routine at #R$9F21.
; .
; Hero has escaped.
; .
; Print 'well done' message then test to see if the correct objects were used
; in the escape attempt.
c$A51C CALL $A50B    ; screen_reset();
 $A51F LD HL,$A5CE   ; HL = &escape_strings[0];
 $A522 CALL $A5BF    ; screenlocstring_plot(); // WELL DONE
 $A525 CALL $A5BF    ; screenlocstring_plot(); // YOU HAVE ESCAPED
 $A528 CALL $A5BF    ; screenlocstring_plot(); // FROM THE CAMP
 $A52B LD C,$00      ; C = 0; // zero flag
 $A52D LD HL,$8215   ; HL = &items_held[0];
 $A530 CALL $A59C    ; join_item_to_escapeitem();
 $A533 INC HL        ; HL++; // &items_held[1];
 $A534 CALL $A59C    ; join_item_to_escapeitem();
 $A537 LD A,C        ; A = C;
 $A538 CP $05        ; {if (A == escapeitem_COMPASS + escapeitem_PURSE) goto
 $A53A JR Z,$A540    ; success;}
 $A53C CP $03        ; {else if (A != escapeitem_COMPASS + escapeitem_PAPERS)
 $A53E JR NZ,$A54E   ; goto captured;}
*$A540 LD HL,$A5FD   ; success: HL = &escape_strings[3];
 $A543 CALL $A5BF    ; screenlocstring_plot(); // AND WILL CROSS THE
 $A546 CALL $A5BF    ; screenlocstring_plot(); // BORDER SUCCESSFULLY
 $A549 LD A,$FF      ; A = 0xFF; // success flag
 $A54B PUSH AF       ; PUSH AF
 $A54C JR $A56E      ; goto press_any_key;
*$A54E PUSH AF       ; captured: PUSH AF
 $A54F LD HL,$A628   ; HL = &escape_strings[5];
 $A552 CALL $A5BF    ; screenlocstring_plot(); // BUT WERE RECAPTURED
 $A555 POP AF        ; POP AF
 $A556 PUSH AF       ; PUSH AF
 $A557 CP $08        ; {if (A >= escapeitem_UNIFORM) goto plot; // at least a
 $A559 JR NC,$A56B   ; uniform => 'but were recaptured' // bug? plotting twice}
 $A55B LD HL,$A652   ; HL = &escape_strings[7];
 $A55E AND A         ; {if (A == 0) goto plot; // no objects => 'totally
 $A55F JR Z,$A56B    ; unprepared'}
 $A561 LD HL,$A667   ; HL = &escape_strings[8];
 $A564 BIT 0,A       ; {if ((A & escapeitem_COMPASS) == 0) goto plot; // no
 $A566 JR Z,$A56B    ; compass => 'totally lost'}
 $A568 LD HL,$A676   ; HL = &escape_strings[9];
*$A56B CALL $A5BF    ; plot: screenlocstring_plot();
*$A56E LD HL,$A68E   ; press_any_key: HL = &escape_strings[10];
 $A571 CALL $A5BF    ; screenlocstring_plot(); // PRESS ANY KEY
; Wait for a keypress.
*$A574 CALL $A58C    ; {do <% keyscan_all(); %> while (!Z);
 $A577 JR NZ,$A574   ; }
*$A579 CALL $A58C    ; {do <% keyscan_all(); %> while (Z);
 $A57C JR Z,$A579    ; }
 $A57E POP AF        ; POP AF
 $A57F CP $FF        ; {if (A == 0xFF || A >= escapeitem_UNIFORM) <%
 $A581 JP Z,$B75A    ; reset_game(); return; %> // exit via
 $A584 CP $08        ;
 $A586 JP NC,$B75A   ; }
 $A589 JP $CB98      ; solitary(); return; // exit via

; keyscan_all
;
; Used by the routine at #R$A51C.
;
; O:A Pressed key.
c$A58C LD BC,$FEFE   ; BC = $FEFE;
*$A58F IN A,(C)      ; do <% IN A,(C)
 $A591 CPL           ; {  A = ~A & 0x1F;
 $A592 AND $1F       ; }
 $A594 RET NZ        ;   if (A) return;
 $A595 RLC B         ;   RLC B
 $A597 JP C,$A58F    ; %> while (carry);
 $A59A XOR A         ; A = 0;
 $A59B RET           ; return;

; join_item_to_escapeitem
;
; Used by the routine at #R$A51C.
; .
; Call item_to_escapeitem then merge result with a previous escapeitem.
;
; I:C  Previous return value.
; I:HL Pointer to (single) item slot.
; O:C  Previous return value + escapeitem_ flag.
c$A59C LD A,(HL)     ; A = *HL;
 $A59D CALL $A5A3    ; item_to_escapeitem();
 $A5A0 ADD A,C       ; {C += A;
 $A5A1 LD C,A        ; }
 $A5A2 RET           ; return;

; item_to_escapeitem
;
; Used by the routine at #R$A59C.
; .
; Return a bitfield indicating the presence of required items.
;
; I:A Item.
; O:A Bitfield.
c$A5A3 CP $0F        ; {if (A == item_COMPASS) <% A = escapeitem_COMPASS;
 $A5A5 JR NZ,$A5AA   ; return; %>
 $A5A7 LD A,$01      ;
 $A5A9 RET           ; }
*$A5AA CP $03        ; {if (A == item_PAPERS)  <% A = escapeitem_PAPERS;
 $A5AC JR NZ,$A5B1   ; return; %>
 $A5AE LD A,$02      ;
 $A5B0 RET           ; }
*$A5B1 CP $0E        ; {if (A == item_PURSE)   <% A = escapeitem_PURSE;
 $A5B3 JR NZ,$A5B8   ; return; %>
 $A5B5 LD A,$04      ;
 $A5B7 RET           ; }
*$A5B8 CP $06        ; {if (A == item_UNIFORM) <% A = escapeitem_UNIFORM;
 $A5BA LD A,$08      ; return; %>
 $A5BC RET Z         ; }
 $A5BD XOR A         ; A = 0; // have no required objects
 $A5BE RET           ; return;

; screenlocstring_plot
;
; Used by the routines at #R$A51C, #R$EFFC and #R$F1E0.
;
; I:HL Pointer to screenlocstring.
; O:HL Pointer to byte after screenlocstring.
c$A5BF LD E,(HL)     ; {E = *HL++; // read screen address into DE
 $A5C0 INC HL        ; }
 $A5C1 LD D,(HL)     ; {D = *HL++;
 $A5C2 INC HL        ; }
 $A5C3 LD B,(HL)     ; {B = *HL++; // iterations / nbytes
 $A5C4 INC HL        ; }
*$A5C5 PUSH BC       ; do <% PUSH BC
 $A5C6 CALL $7D2F    ;   plot_glyph();
 $A5C9 INC HL        ;   HL++;
 $A5CA POP BC        ;   POP BC
 $A5CB DJNZ $A5C5    ; %> while (--B);
 $A5CD RET           ; return;

; escape_strings
;
; "WELL DONE"
t$A5CE DEFM "n@"     ; {#CALL:decode_screenlocstring($A5CE)
 $A5D0 DEFB $09
 $A5D1 DEFB $1F
 $A5D2 DEFB $0E
 $A5D3 DEFB $15
 $A5D4 DEFB $15
 $A5D5 DEFM "#"
 $A5D6 DEFB $0D
 $A5D7 DEFB $00
 $A5D8 DEFB $17
 $A5D9 DEFB $0E      ; }
; "YOU HAVE ESCAPED"
 $A5DA DEFB $AA      ; {#CALL:decode_screenlocstring($A5DA)
 $A5DB DEFM "@"
 $A5DC DEFB $10
 $A5DD DEFM "!"
 $A5DE DEFB $00
 $A5DF DEFB $1D
 $A5E0 DEFM "#"
 $A5E1 DEFB $11
 $A5E2 DEFB $0A
 $A5E3 DEFB $1E
 $A5E4 DEFB $0E
 $A5E5 DEFM "#"
 $A5E6 DEFB $0E
 $A5E7 DEFB $1B
 $A5E8 DEFB $0C
 $A5E9 DEFB $0A
 $A5EA DEFB $18
 $A5EB DEFB $0E
 $A5EC DEFB $0D      ; }
; "FROM THE CAMP"
 $A5ED DEFB $CC      ; {#CALL:decode_screenlocstring($A5ED)
 $A5EE DEFM "@"
 $A5EF DEFB $0D
 $A5F0 DEFB $0F
 $A5F1 DEFB $1A
 $A5F2 DEFB $00
 $A5F3 DEFB $16
 $A5F4 DEFM "#"
 $A5F5 DEFB $1C
 $A5F6 DEFB $11
 $A5F7 DEFB $0E
 $A5F8 DEFM "#"
 $A5F9 DEFB $0C
 $A5FA DEFB $0A
 $A5FB DEFB $16
 $A5FC DEFB $18      ; }
; "AND WILL CROSS THE"
 $A5FD DEFB $09      ; {#CALL:decode_screenlocstring($A5FD)
 $A5FE DEFM "H"
 $A5FF DEFB $12
 $A600 DEFB $0A
 $A601 DEFB $17
 $A602 DEFB $0D
 $A603 DEFM "#"
 $A604 DEFB $1F
 $A605 DEFB $12
 $A606 DEFB $15
 $A607 DEFB $15
 $A608 DEFM "#"
 $A609 DEFB $0C
 $A60A DEFB $1A
 $A60B DEFB $00
 $A60C DEFB $1B
 $A60D DEFB $1B
 $A60E DEFM "#"
 $A60F DEFB $1C
 $A610 DEFB $11
 $A611 DEFB $0E      ; }
; "BORDER SUCCESSFULLY"
 $A612 DEFM ")H"     ; {#CALL:decode_screenlocstring($A612)
 $A614 DEFB $13
 $A615 DEFB $0B
 $A616 DEFB $00
 $A617 DEFB $1A
 $A618 DEFB $0D
 $A619 DEFB $0E
 $A61A DEFB $1A
 $A61B DEFM "#"
 $A61C DEFB $1B
 $A61D DEFB $1D
 $A61E DEFB $0C
 $A61F DEFB $0C
 $A620 DEFB $0E
 $A621 DEFB $1B
 $A622 DEFB $1B
 $A623 DEFB $0F
 $A624 DEFB $1D
 $A625 DEFB $15
 $A626 DEFB $15
 $A627 DEFM "!"      ; }
; "BUT WERE RECAPTURED"
 $A628 DEFB $09      ; {#CALL:decode_screenlocstring($A628)
 $A629 DEFM "H"
 $A62A DEFB $13
 $A62B DEFB $0B
 $A62C DEFB $1D
 $A62D DEFB $1C
 $A62E DEFM "#"
 $A62F DEFB $1F
 $A630 DEFB $0E
 $A631 DEFB $1A
 $A632 DEFB $0E
 $A633 DEFM "#"
 $A634 DEFB $1A
 $A635 DEFB $0E
 $A636 DEFB $0C
 $A637 DEFB $0A
 $A638 DEFB $18
 $A639 DEFB $1C
 $A63A DEFB $1D
 $A63B DEFB $1A
 $A63C DEFB $0E
 $A63D DEFB $0D      ; }
; "AND SHOT AS A SPY"
 $A63E DEFM "*H"     ; {#CALL:decode_screenlocstring($A63E)
 $A640 DEFB $11
 $A641 DEFB $0A
 $A642 DEFB $17
 $A643 DEFB $0D
 $A644 DEFM "#"
 $A645 DEFB $1B
 $A646 DEFB $11
 $A647 DEFB $00
 $A648 DEFB $1C
 $A649 DEFM "#"
 $A64A DEFB $0A
 $A64B DEFB $1B
 $A64C DEFM "#"
 $A64D DEFB $0A
 $A64E DEFM "#"
 $A64F DEFB $1B
 $A650 DEFB $18
 $A651 DEFM "!"      ; }
; "TOTALLY UNPREPARED"
 $A652 DEFM ")H"     ; {#CALL:decode_screenlocstring($A652)
 $A654 DEFB $12
 $A655 DEFB $1C
 $A656 DEFB $00
 $A657 DEFB $1C
 $A658 DEFB $0A
 $A659 DEFB $15
 $A65A DEFB $15
 $A65B DEFM "!#"
 $A65D DEFB $1D
 $A65E DEFB $17
 $A65F DEFB $18
 $A660 DEFB $1A
 $A661 DEFB $0E
 $A662 DEFB $18
 $A663 DEFB $0A
 $A664 DEFB $1A
 $A665 DEFB $0E
 $A666 DEFB $0D      ; }
; "TOTALLY LOST"
 $A667 DEFM ",H"     ; {#CALL:decode_screenlocstring($A667)
 $A669 DEFB $0C
 $A66A DEFB $1C
 $A66B DEFB $00
 $A66C DEFB $1C
 $A66D DEFB $0A
 $A66E DEFB $15
 $A66F DEFB $15
 $A670 DEFM "!#"
 $A672 DEFB $15
 $A673 DEFB $00
 $A674 DEFB $1B
 $A675 DEFB $1C      ; }
; "DUE TO LACK OF PAPERS"
 $A676 DEFM "(H"     ; {#CALL:decode_screenlocstring($A676)
 $A678 DEFB $15
 $A679 DEFB $0D
 $A67A DEFB $1D
 $A67B DEFB $0E
 $A67C DEFM "#"
 $A67D DEFB $1C
 $A67E DEFB $00
 $A67F DEFM "#"
 $A680 DEFB $15
 $A681 DEFB $0A
 $A682 DEFB $0C
 $A683 DEFB $14
 $A684 DEFM "#"
 $A685 DEFB $00
 $A686 DEFB $0F
 $A687 DEFM "#"
 $A688 DEFB $18
 $A689 DEFB $0A
 $A68A DEFB $18
 $A68B DEFB $0E
 $A68C DEFB $1A
 $A68D DEFB $1B      ; }
; "PRESS ANY KEY"
 $A68E DEFB $0D      ; {#CALL:decode_screenlocstring($A68E)
 $A68F DEFM "P"
 $A690 DEFB $0D
 $A691 DEFB $18
 $A692 DEFB $1A
 $A693 DEFB $0E
 $A694 DEFB $1B
 $A695 DEFB $1B
 $A696 DEFM "#"
 $A697 DEFB $0A
 $A698 DEFB $17
 $A699 DEFM "!#"
 $A69B DEFB $14
 $A69C DEFB $0E
 $A69D DEFM "!"      ; }

; bitmap_font
;
; 0..9, A..Z (omitting O), space, full stop
; .
; #FONT$A69E,35,7,2{0,0,560,16}(font)
b$A69E DEFB $00,$7C,$FE,$EE,$EE,$EE,$FE,$7C
 $A6A6 DEFB $00,$1E,$3E,$6E,$0E,$0E,$0E,$0E
 $A6AE DEFB $00,$7C,$FE,$CE,$1C,$70,$FE,$FE
 $A6B6 DEFB $00,$FC,$FE,$0E,$3C,$0E,$FE,$FC
 $A6BE DEFB $00,$0E,$1E,$3E,$6E,$FE,$0E,$0E
 $A6C6 DEFB $00,$FC,$C0,$FC,$7E,$0E,$FE,$FC
 $A6CE DEFB $00,$38,$60,$FC,$FE,$C6,$FE,$7C
 $A6D6 DEFB $00,$FE,$0E,$0E,$1C,$1C,$38,$38
 $A6DE DEFB $00,$7C,$EE,$EE,$7C,$EE,$EE,$7C
 $A6E6 DEFB $00,$7C,$FE,$C6,$FE,$7E,$0C,$38
 $A6EE DEFB $00,$38,$7C,$7C,$EE,$EE,$FE,$EE
 $A6F6 DEFB $00,$FC,$EE,$EE,$FC,$EE,$EE,$FC
 $A6FE DEFB $00,$1E,$7E,$FE,$F0,$FE,$7E,$1E
 $A706 DEFB $00,$F0,$FC,$EE,$EE,$EE,$FC,$F0
 $A70E DEFB $00,$FE,$FE,$E0,$FE,$E0,$FE,$FE
 $A716 DEFB $00,$FE,$FE,$E0,$FC,$E0,$E0,$E0
 $A71E DEFB $00,$1E,$7E,$F0,$EE,$F2,$7E,$1E
 $A726 DEFB $00,$EE,$EE,$EE,$FE,$EE,$EE,$EE
 $A72E DEFB $00,$38,$38,$38,$38,$38,$38,$38
 $A736 DEFB $00,$FE,$38,$38,$38,$38,$F8,$F0
 $A73E DEFB $00,$EE,$EE,$FC,$F8,$FC,$EE,$EE
 $A746 DEFB $00,$E0,$E0,$E0,$E0,$E0,$FE,$FE
 $A74E DEFB $00,$6C,$FE,$FE,$D6,$D6,$C6,$C6
 $A756 DEFB $00,$E6,$F6,$FE,$FE,$EE,$E6,$E6
 $A75E DEFB $00,$FC,$EE,$EE,$EE,$FC,$E0,$E0
 $A766 DEFB $00,$7C,$FE,$EE,$EE,$EE,$FC,$7E
 $A76E DEFB $00,$FC,$EE,$EE,$FC,$F8,$EC,$EE
 $A776 DEFB $00,$7E,$FE,$F0,$7C,$1E,$FE,$FC
 $A77E DEFB $00,$FE,$FE,$38,$38,$38,$38,$38
 $A786 DEFB $00,$EE,$EE,$EE,$EE,$EE,$FE,$7C
 $A78E DEFB $00,$EE,$EE,$EE,$EE,$6C,$7C,$38
 $A796 DEFB $00,$C6,$C6,$C6,$D6,$FE,$EE,$C6
 $A79E DEFB $00,$C6,$EE,$7C,$38,$7C,$EE,$C6
 $A7A6 DEFB $00,$C6,$EE,$7C,$38,$38,$38,$38
 $A7AE DEFB $00,$FE,$FE,$0E,$38,$E0,$FE,$FE
 $A7B6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $A7BE DEFB $00,$00,$00,$00,$00,$00,$30,$30

; used_by_move_map
b$A7C6 DEFB $00

; plot_game_window_x
w$A7C7 DEFW $0000

; get_supertiles
;
; Used by the routines at #R$A9E4, #R$AA05, #R$AA26, #R$AA4B, #R$AA6C, #R$AA8D
; and #R$B2FC.
; .
; Pulls supertiles out of the map.
; .
; Get vertical offset.
c$A7C9 LD A,($81BC)  ; {A = (map_position >> 8) & 0xFC; // A = 0, 4, 8, 12,
 $A7CC AND $FC       ; ...}
; Multiply A by 13.5. (A is a multiple of 4, so this goes 0, 54, 108, 162, ...)
 $A7CE LD L,A        ; {HL = $BCB8 + (A + (A >> 1)) * 9; // $BCB8 is
 $A7CF LD H,$00      ; &map_tiles[0] - 54 so it must be skipping the first
 $A7D1 RRA           ; row.
 $A7D2 AND $7F       ;
 $A7D4 ADD A,L       ;
 $A7D5 LD L,A        ;
 $A7D6 JR NC,$A7D9   ;
 $A7D8 INC H         ;
*$A7D9 LD E,L        ;
 $A7DA LD D,H        ;
 $A7DB ADD HL,HL     ;
 $A7DC ADD HL,HL     ;
 $A7DD ADD HL,HL     ;
 $A7DE ADD HL,DE     ;
 $A7DF LD DE,$BCB8   ;
 $A7E2 ADD HL,DE     ; }
 $A7E3 LD A,($81BB)  ; {HL += (map_position & 0xFF) >> 2;
 $A7E6 RRA           ;
 $A7E7 RRA           ;
 $A7E8 AND $3F       ;
 $A7EA LD E,A        ;
 $A7EB LD D,$00      ;
 $A7ED ADD HL,DE     ; }
; Populate $FF58 with 7x5 array of supertile refs.
 $A7EE LD A,$05      ; A = 5; // 5 iterations
 $A7F0 LD DE,$FF58   ; DE = $FF58;
*$A7F3 LDI           ; {do <% memcpy(DE, HL, 7); DE += 7;
 $A7F5 LDI           ;
 $A7F7 LDI           ;
 $A7F9 LDI           ;
 $A7FB LDI           ;
 $A7FD LDI           ;
 $A7FF LDI           ; }
 $A801 LD BC,$002F   ; {  HL += 54; // stride - width of map
 $A804 ADD HL,BC     ; }
 $A805 DEC A         ; {%> while (--A);
 $A806 JP NZ,$A7F3   ; }
 $A809 RET           ; return;

; supertile_plot_horizontal_1
;
; Used by the routines at #R$AA26 and #R$AA4B.
; .
; Causes some tile plotting.
c$A80A LD DE,$F278   ; DE = $F278;
 $A80D EXX           ; -
 $A80E LD HL,$FF74   ; HLdash = $FF74;
 $A811 LD A,($81BC)  ; A = map_position >> 8; // map_position hi
 $A814 LD DE,$FE90   ; DEdash = $FE90;
 $A817 JR $A826      ; goto supertile_plot_horizontal_common;

; supertile_plot_horizontal_2
;
; Used by the routines at #R$AA6C and #R$AA8D.
; .
; Causes some tile plotting.
c$A819 LD DE,$F0F8   ; DE = $F0F8; // visible tiles array
 $A81C EXX           ; -
 $A81D LD HL,$FF58   ; HLdash = $FF58;
 $A820 LD A,($81BC)  ; A = map_position >> 8; // map_position hi
 $A823 LD DE,$F290   ; DEdash = $F290; // screen buffer start address

; supertile_plot_horizontal_common
;
; Used by the routine at #R$A80A.
; .
; Plotting supertiles.
c$A826 AND $03       ; {A = (A & 3) * 4;
 $A828 ADD A,A       ;
 $A829 ADD A,A       ; }
 $A82A LD ($A86A),A  ; ($A86A) = A; // self modify
 $A82D LD C,A        ; Cdash = A;
 $A82E LD A,($81BB)  ; {A = (map_position[0] & 3) + Cdash;
 $A831 AND $03       ;
 $A833 ADD A,C       ; }
 $A834 EX AF,AF'     ; -
 $A835 LD A,(HL)     ; Adash = *HLdash;
 $A836 EXX           ; -
 $A837 LD L,A        ; {HL = 0x5B00 + Adash * 16; // supertiles
 $A838 LD H,$00      ;
 $A83A ADD HL,HL     ;
 $A83B ADD HL,HL     ;
 $A83C ADD HL,HL     ;
 $A83D ADD HL,HL     ;
 $A83E LD A,$5B      ;
 $A840 ADD A,H       ;
 $A841 LD H,A        ; }
 $A842 EX AF,AF'     ; -
 $A843 ADD A,L       ; A += L;
 $A844 LD L,A        ; L = A;
 $A845 NEG           ; {A = -A & 3;
 $A847 AND $03       ; }
 $A849 JR NZ,$A84D   ; {if (A == 0) A = 4;
 $A84B LD A,$04      ; }
*$A84D LD B,A        ; B = A; // 1..4 iterations
*$A84E LD A,(HL)     ; do <% A = *HL; // A = tile index
 $A84F LD (DE),A     ;   *DE = A;
 $A850 CALL $A9AD    ;   plot_tile();
 $A853 INC L         ;   HL++;
 $A854 INC DE        ;   DE++;
 $A855 DJNZ $A84E    ; %> while (--B);
 $A857 EXX           ; -
 $A858 INC HL        ; HLdash++;
 $A859 LD B,$05      ; Bdash = 5; // 5 iterations
*$A85B PUSH BC       ; do <% PUSH BCdash
 $A85C LD A,(HL)     ;   A = *HLdash;
 $A85D EXX           ;   -
 $A85E LD L,A        ; {  HL = &super_tiles[A];
 $A85F LD H,$00      ;
 $A861 ADD HL,HL     ;
 $A862 ADD HL,HL     ;
 $A863 ADD HL,HL     ;
 $A864 ADD HL,HL     ;
 $A865 LD BC,$5B00   ;
 $A868 ADD HL,BC     ; }
 $A869 LD A,$00      ;   A = 0; // self modified by $A82A
 $A86B ADD A,L       ; {  L += A;
 $A86C LD L,A        ; }
 $A86D LD B,$04      ;   B = 4; // 4 iterations
*$A86F LD A,(HL)     ;   do <% A = *HL;
 $A870 LD (DE),A     ;     *DE = A;
 $A871 CALL $A9AD    ;     plot_tile();
 $A874 INC HL        ;     HL++;
 $A875 INC DE        ;     DE++;
 $A876 DJNZ $A86F    ;   %> while (--B);
 $A878 EXX           ;   -
 $A879 INC HL        ;   HLdash++;
 $A87A POP BC        ;   POP BCdash
 $A87B DJNZ $A85B    ; %> while (--Bdash);
 $A87D LD A,C        ; A = Cdash; // assigned but never used?
 $A87E EX AF,AF'     ; EX AF,AF' // unpaired?
 $A87F LD A,(HL)     ; A = *HLdash;
 $A880 EXX           ; -
 $A881 LD L,A        ; {HL = &super_tiles[A];
 $A882 LD H,$00      ;
 $A884 ADD HL,HL     ;
 $A885 ADD HL,HL     ;
 $A886 ADD HL,HL     ;
 $A887 ADD HL,HL     ;
 $A888 LD BC,$5B00   ;
 $A88B ADD HL,BC     ; }
 $A88C LD A,($A86A)  ; A = ($A86A); // read self modified
 $A88F ADD A,L       ; {L += A;
 $A890 LD L,A        ; }
 $A891 LD A,($81BB)  ; {A = map_position[0] & 3; // map_position lo
 $A894 AND $03       ; }
 $A896 RET Z         ; if (A == 0) return;
 $A897 LD B,A        ; B = A;
*$A898 LD A,(HL)     ; do <% A = *HL;
 $A899 LD (DE),A     ;   *DE = A;
 $A89A CALL $A9AD    ;   plot_tile();
 $A89D INC L         ;   HL++;
 $A89E INC DE        ;   DE++;
 $A89F DJNZ $A898    ; %> while (--B);
 $A8A1 RET           ; return;

; supertile_plot_all
;
; Used by the routines at #R$7B36 and #R$B2FC.
; .
; Plot all tiles.
; .
; Note: Exits with banked registers active.
c$A8A2 LD DE,$F0F8   ; DE = $F0F8; // visible tiles array
 $A8A5 EXX           ; -
 $A8A6 LD HL,$FF58   ; HLdash = $FF58; // 7x5 supertile refs
 $A8A9 LD DE,$F290   ; DEdash = $F290; // screen buffer start address
 $A8AC LD A,($81BB)  ; A = map_position[0];
 $A8AF LD B,$18      ; Bdash = 24; // 24 iterations (screen rows?)
*$A8B1 PUSH BC       ; do <% PUSH BCdash
 $A8B2 PUSH DE       ;   PUSH DEdash
 $A8B3 PUSH HL       ;   PUSH HLdash
 $A8B4 PUSH AF       ;   PUSH AFdash
 $A8B5 EXX           ;   -
 $A8B6 PUSH DE       ;   PUSH DE
 $A8B7 EXX           ;   -
 $A8B8 CALL $A8F4    ;   supertile_plot_vertical_common();
 $A8BB EXX           ;   -
 $A8BC POP DE        ;   POP DE
 $A8BD INC DE        ;   DE++;
 $A8BE EXX           ;   -
 $A8BF POP AF        ;   POP AF
 $A8C0 POP HL        ;   POP HLdash
 $A8C1 INC A         ; {  Cdash = ++A;
 $A8C2 LD C,A        ; }
 $A8C3 AND $03       ; {  if ((A & 3) == 0) HLdash++;
 $A8C5 JR NZ,$A8C8   ;
 $A8C7 INC HL        ; }
*$A8C8 LD A,C        ;   A = Cdash;
 $A8C9 POP DE        ;   POP DEdash
 $A8CA INC DE        ;   DEdash++;
 $A8CB POP BC        ;   POP BCdash
 $A8CC DJNZ $A8B1    ; %> while (--Bdash);
 $A8CE RET           ; return;

; supertile_plot_vertical_1
;
; Used by the routines at #R$A9E4 and #R$AA8D.
c$A8CF LD DE,$F10F   ; DE = $F10F;
 $A8D2 EXX           ; EXX // unpaired
 $A8D3 LD HL,$FF5E   ; HL = $FF5E;
 $A8D6 LD DE,$F2A7   ; DE = $F2A7;
 $A8D9 LD A,($81BB)  ; {A = map_position[0] & 3; // map_position lo
 $A8DC AND $03       ; }
 $A8DE JR NZ,$A8E1   ; {if (A == 0) HL--;
 $A8E0 DEC HL        ; }
*$A8E1 LD A,($81BB)  ; {A = map_position[0] - 1; // map_position lo
 $A8E4 DEC A         ; }
 $A8E5 JR $A8F4      ; goto supertile_plot_vertical_common;

; supertile_plot_vertical_2
;
; Used by the routines at #R$AA05 and #R$AA26.
; .
; Suspect: supertile plotting.
c$A8E7 LD DE,$F0F8   ; DE = $F0F8; // visible tiles array
 $A8EA EXX           ; -
 $A8EB LD HL,$FF58   ; HLdash = $FF58; // 7x5 supertile refs
 $A8EE LD DE,$F290   ; DEdash = $F290; // screen buffer start address
 $A8F1 LD A,($81BB)  ; A = map_position[0]; // map_position lo

; supertile_plot_vertical_common
;
; Used by the routines at #R$A8A2 and #R$A8CF.
; .
; Plotting supertiles.
c$A8F4 AND $03       ; A &= 3;
 $A8F6 LD ($A94D),A  ; ($A94D) = A; // self modify
 $A8F9 LD C,A        ; Cdash = A;
 $A8FA LD A,($81BC)  ; {A = ((map_position >> 8) & 3) * 4 + Cdash;
 $A8FD AND $03       ;
 $A8FF ADD A,A       ;
 $A900 ADD A,A       ;
 $A901 ADD A,C       ; }
 $A902 EX AF,AF'     ; -
 $A903 LD A,(HL)     ; Adash = *HLdash;
 $A904 EXX           ; -
 $A905 LD L,A        ; {HL = 0x5B00 + Adash * 16; // supertiles
 $A906 LD H,$00      ;
 $A908 ADD HL,HL     ;
 $A909 ADD HL,HL     ;
 $A90A ADD HL,HL     ;
 $A90B ADD HL,HL     ;
 $A90C LD A,$5B      ;
 $A90E ADD A,H       ;
 $A90F LD H,A        ; }
 $A910 EX AF,AF'     ; -
 $A911 ADD A,L       ; A += L;
 $A912 LD L,A        ; L = A;
 $A913 RRA           ; RRA
 $A914 RRA           ; RRA
 $A915 AND $03       ; {A = -(A & 3) & 3;
 $A917 NEG           ;
 $A919 AND $03       ; }
 $A91B JR NZ,$A91F   ; {if (A == 0) A = 4;
 $A91D LD A,$04      ; }
*$A91F EX DE,HL      ; EX DE,HL
 $A920 LD BC,$0018   ; BC = 24; // 24 iterations (screen rows?)
*$A923 PUSH AF       ; do <% PUSH AF
 $A924 LD A,(DE)     ;   A = *DE;
 $A925 LD (HL),A     ;   *HL = A;
 $A926 CALL $A9A0    ;   plot_tile_then_advance();
 $A929 LD A,$04      ; {  DE += 4; // stride
 $A92B ADD A,E       ;
 $A92C LD E,A        ; }
 $A92D ADD HL,BC     ;   HL += BC;
 $A92E POP AF        ;   POP AF
 $A92F DEC A         ; {%> while (--A);
 $A930 JP NZ,$A923   ; }
 $A933 EX DE,HL      ; EX DE,HL
 $A934 EXX           ; EXX
 $A935 LD A,L        ; {HL += 7;
 $A936 ADD A,$07     ;
 $A938 LD L,A        ;
 $A939 JR NC,$A93C   ;
 $A93B INC H         ; }
*$A93C LD B,$03      ; B = 3; // 3 iterations
*$A93E PUSH BC       ; do <% PUSH BC
 $A93F LD A,(HL)     ;   A = *HL;
 $A940 EXX           ;   EXX
 $A941 LD L,A        ; {  HL = 0x5B00 + A * 16; // supertiles
 $A942 LD H,$00      ;
 $A944 ADD HL,HL     ;
 $A945 ADD HL,HL     ;
 $A946 ADD HL,HL     ;
 $A947 ADD HL,HL     ;
 $A948 LD BC,$5B00   ;
 $A94B ADD HL,BC     ; }
 $A94C LD A,$00      ;   A = 0; // self modified by $A8F6
 $A94E ADD A,L       ;   A += L;
 $A94F LD L,A        ;   L = A;
 $A950 LD BC,$0018   ;   BC = 24; // stride
 $A953 EX DE,HL      ;   EX DE,HL
 $A954 LD A,$04      ;   A = 4;
*$A956 PUSH AF       ;   do <% PUSH AF
 $A957 LD A,(DE)     ;     A = *DE;
 $A958 LD (HL),A     ;     *HL = A;
 $A959 CALL $A9A0    ;     plot_tile_then_advance();
 $A95C ADD HL,BC     ;     HL += BC;
 $A95D LD A,$04      ; {    DE += 4; // stride
 $A95F ADD A,E       ;
 $A960 LD E,A        ; }
 $A961 POP AF        ;     POP AF
 $A962 DEC A         ; {  %> while (--A);
 $A963 JP NZ,$A956   ; }
 $A966 EX DE,HL      ;   EX DE,HL
 $A967 EXX           ;   EXX
 $A968 LD A,L        ; {  HL += 7;
 $A969 ADD A,$07     ;
 $A96B LD L,A        ;
 $A96C JR NC,$A96F   ;
 $A96E INC H         ; }
*$A96F POP BC        ;   POP BC
 $A970 DJNZ $A93E    ; %> while (--B);
 $A972 LD A,(HL)     ; A = *HL;
 $A973 EXX           ; EXX
 $A974 LD L,A        ; {HL = 0x5B00 + A * 16; // supertiles
 $A975 LD H,$00      ;
 $A977 ADD HL,HL     ;
 $A978 ADD HL,HL     ;
 $A979 ADD HL,HL     ;
 $A97A ADD HL,HL     ;
 $A97B LD BC,$5B00   ;
 $A97E ADD HL,BC     ; }
 $A97F LD A,($A94D)  ; {HL += ($A94D); // read self modified
 $A982 ADD A,L       ;
 $A983 LD L,A        ; }
 $A984 LD A,($81BC)  ; {A = ((map_position >> 8) & 3) + 1;
 $A987 AND $03       ;
 $A989 INC A         ; }
 $A98A LD BC,$0018   ; BC = 24;
 $A98D EX DE,HL      ; EX DE,HL
*$A98E PUSH AF       ; do <% PUSH AF
 $A98F LD A,(DE)     ;   A = *DE;
 $A990 LD (HL),A     ;   *HL = A;
 $A991 CALL $A9A0    ;   plot_tile_then_advance();
 $A994 LD A,$04      ;   A = 4;
 $A996 ADD A,E       ;   A += E;
 $A997 LD E,A        ;   E = A;
 $A998 ADD HL,BC     ;   HL += BC;
 $A999 POP AF        ;   POP AF
 $A99A DEC A         ; {%> while (--A);
 $A99B JP NZ,$A98E   ; }
 $A99E EX DE,HL      ; EX DE,HL
 $A99F RET           ; return;

; plot_tile_then_advance
;
; Used by the routine at #R$A8F4.
c$A9A0 CALL $A9AD    ; plot_tile();
 $A9A3 EXX           ; -
 $A9A4 LD A,E        ; {DEdash += 0xBF;
 $A9A5 ADD A,$BF     ;
 $A9A7 LD E,A        ;
 $A9A8 JR NC,$A9AB   ;
 $A9AA INC D         ; }
*$A9AB EXX           ; -
 $A9AC RET           ; return;

; plot_tile
;
; Used by the routines at #R$A826 and #R$A9A0.
; .
; Plots a tile to the buffer.
;
; I:A      Tile index
; I:DEdash Output buffer start address.
; I:HLdash Pointer to supertile index (used to select the correct tile group).
c$A9AD EXX           ; -
 $A9AE EX AF,AF'     ; -
 $A9AF LD A,(HL)     ; Adash = *HLdash; // get supertile index
 $A9B0 LD BC,$8590   ; BCdash = &exterior_tiles_1[0];
 $A9B3 CP $2D        ; {if (Adash < 45) goto chosen;
 $A9B5 JR C,$A9C5    ; }
 $A9B7 LD BC,$8A18   ; BCdash = &exterior_tiles_2[0];
 $A9BA CP $8B        ; {if (Adash < 139 || Adash >= 204) goto chosen;
 $A9BC JR C,$A9C5    ;
 $A9BE CP $CC        ;
 $A9C0 JR NC,$A9C5   ; }
 $A9C2 LD BC,$90F8   ; BCdash = &exterior_tiles_3[0];
*$A9C5 PUSH HL       ; chosen: PUSH HLdash;
 $A9C6 EX AF,AF'     ; -
 $A9C7 LD L,A        ; {HLdash = A * 8 + BCdash;
 $A9C8 LD H,$00      ;
 $A9CA ADD HL,HL     ;
 $A9CB ADD HL,HL     ;
 $A9CC ADD HL,HL     ;
 $A9CD ADD HL,BC     ; }
 $A9CE PUSH DE       ; PUSH DEdash;
 $A9CF EX DE,HL      ; EX DEdash,HLdash;
 $A9D0 LD BC,$0018   ; BCdash = 24;
 $A9D3 LD A,$08      ; A = 8; // 8 iterations
*$A9D5 EX AF,AF'     ; do <% -
 $A9D6 LD A,(DE)     ;   Adash = *DEdash;
 $A9D7 LD (HL),A     ;   *HLdash = Adash;
 $A9D8 ADD HL,BC     ;   HLdash += BCdash; // stride
 $A9D9 INC E         ;   E++;
 $A9DA EX AF,AF'     ;   -
 $A9DB DEC A         ;   A--;
 $A9DC JP NZ,$A9D5   ; %> while (A);
 $A9DF POP DE        ; POP DEdash;
 $A9E0 INC DE        ; DEdash++;
 $A9E1 POP HL        ; POP HLdash;
 $A9E2 EXX           ; -
 $A9E3 RET           ; return;

; map_shunt_horizontal_1
;
; Used by the routine at #R$AAB2.
c$A9E4 LD HL,$81BB   ; HL = &map_position;
 $A9E7 INC (HL)      ; (*HL)++;
 $A9E8 CALL $A7C9    ; get_supertiles();
 $A9EB LD HL,$F0F9   ; HL = visible_tiles_start_address + 1;
 $A9EE LD DE,$F0F8   ; DE = visible_tiles_start_address;
 $A9F1 LD BC,$0197   ; BC = visible_tiles_length - 1;
 $A9F4 LDIR          ; LDIR
 $A9F6 LD HL,$F291   ; HL = screen_buffer_start_address + 1;
 $A9F9 LD DE,$F290   ; DE = screen_buffer_start_address;
 $A9FC LD BC,$0CBF   ; BC = screen_buffer_length - 1;
 $A9FF LDIR          ; LDIR
 $AA01 CALL $A8CF    ; supertile_plot_vertical_1();
 $AA04 RET           ; return;

; map_shunt_horizontal_2
;
; Used by the routine at #R$AAB2.
c$AA05 LD HL,$81BB   ; HL = &map_position;
 $AA08 DEC (HL)      ; (*HL)--;
 $AA09 CALL $A7C9    ; get_supertiles();
 $AA0C LD HL,$F28E   ; HL = visible_tiles_end_address - 1;
 $AA0F LD DE,$F28F   ; DE = visible_tiles_end_address;
 $AA12 LD BC,$0197   ; BC = visible_tiles_length - 1;
 $AA15 LDDR          ; LDDR
 $AA17 LD HL,$FF4F   ; HL = screen_buffer_end_address;
 $AA1A LD DE,$FF50   ; DE = screen_buffer_end_address + 1;
 $AA1D LD BC,$0CC0   ; BC = screen_buffer_length;
 $AA20 LDDR          ; LDDR
 $AA22 CALL $A8E7    ; supertile_plot_vertical_2();
 $AA25 RET           ; return;

; map_shunt_diagonal_1_2
;
; Used by the routine at #R$AAB2.
c$AA26 DEC L         ; L--;
 $AA27 INC H         ; H++;
 $AA28 LD ($81BB),HL ; map_position = HL;
 $AA2B CALL $A7C9    ; get_supertiles();
 $AA2E LD HL,$F110   ; HL = visible_tiles_start_address + 24;
 $AA31 LD DE,$F0F9   ; DE = visible_tiles_start_address + 1;
 $AA34 LD BC,$0180   ; BC = visible_tiles_length - 24;
 $AA37 LDIR          ; LDIR
 $AA39 LD HL,$F350   ; HL = screen_buffer_start_address + 24 * 8;
 $AA3C LD DE,$F291   ; DE = screen_buffer_start_address + 1;
 $AA3F LD BC,$0C00   ; BC = screen_buffer_length - 24 * 8;
 $AA42 LDIR          ; LDIR
 $AA44 CALL $A80A    ; supertile_plot_horizontal_1();
 $AA47 CALL $A8E7    ; supertile_plot_vertical_2();
 $AA4A RET           ; return;

; map_shunt_vertical_1
;
; Used by the routine at #R$AAB2.
c$AA4B LD HL,$81BC   ; HL = &map_position[1];
 $AA4E INC (HL)      ; (*HL)++;
 $AA4F CALL $A7C9    ; get_supertiles();
 $AA52 LD HL,$F110   ; HL = visible_tiles_start_address + 24;
 $AA55 LD DE,$F0F8   ; DE = visible_tiles_start_address;
 $AA58 LD BC,$0180   ; BC = visible_tiles_length - 24;
 $AA5B LDIR          ; LDIR
 $AA5D LD HL,$F350   ; HL = screen_buffer_start_address + 24 * 8;
 $AA60 LD DE,$F290   ; DE = screen_buffer_start_address;
 $AA63 LD BC,$0C00   ; BC = screen_buffer_length - 24 * 8;
 $AA66 LDIR          ; LDIR
 $AA68 CALL $A80A    ; supertile_plot_horizontal_1();
 $AA6B RET           ; return;

; map_shunt_vertical_2
;
; Used by the routine at #R$AAB2.
c$AA6C LD HL,$81BC   ; HL = &map_position[1];
 $AA6F DEC (HL)      ; (*HL)--;
 $AA70 CALL $A7C9    ; get_supertiles();
 $AA73 LD HL,$F277   ; HL = visible_tiles_end_address - 24;
 $AA76 LD DE,$F28F   ; DE = visible_tiles_end_address;
 $AA79 LD BC,$0180   ; BC = visible_tiles_length - 24;
 $AA7C LDDR          ; LDDR
 $AA7E LD HL,$FE8F   ; HL = screen_buffer_end_address - 24 * 8;
 $AA81 LD DE,$FF4F   ; DE = screen_buffer_end_address;
 $AA84 LD BC,$0C00   ; BC = screen_buffer_length - 24 * 8;
 $AA87 LDDR          ; LDDR
 $AA89 CALL $A819    ; supertile_plot_horizontal_2();
 $AA8C RET           ; return;

; map_shunt_diagonal_2_1
;
; Used by the routine at #R$AAB2.
c$AA8D INC L         ; L++;
 $AA8E DEC H         ; H--;
 $AA8F LD ($81BB),HL ; map_position = HL;
 $AA92 CALL $A7C9    ; get_supertiles();
 $AA95 LD HL,$F277   ; HL = visible_tiles_end_address - 24;
 $AA98 LD DE,$F28E   ; DE = visible_tiles_end_address - 1;
 $AA9B LD BC,$017F   ; BC = visible_tiles_length - 24 - 1;
 $AA9E LDDR          ; LDDR
 $AAA0 LD HL,$FE8F   ; HL = screen_buffer_end_address - 24 * 8;
 $AAA3 LD DE,$FF4E   ; DE = screen_buffer_end_address - 1;
 $AAA6 LD BC,$0BFF   ; BC = screen_buffer_length - 24 * 8 - 1;
 $AAA9 LDDR          ; LDDR
 $AAAB CALL $A819    ; supertile_plot_horizontal_2();
 $AAAE CALL $A8CF    ; supertile_plot_vertical_1();
 $AAB1 RET           ; return;

; move_map
;
; Used by the routines at #R$6939 and #R$9D78.
; .
; Moves the map when the character walks.
;
; O:HL == map_position
c$AAB2 LD A,($68A0)  ; {if (room_index) return; // outdoors only
 $AAB5 AND A         ;
 $AAB6 RET NZ        ; }
 $AAB7 LD HL,$8007   ; {if ($8007 & vischar_BYTE7_BIT6) return;
 $AABA BIT 6,(HL)    ;
 $AABC RET NZ        ; }
 $AABD LD HL,$800A   ; HL = $800A;
 $AAC0 LD E,(HL)     ; {E = *HL++;
 $AAC1 INC L         ; }
 $AAC2 LD D,(HL)     ; {D = *HL++;
 $AAC3 INC L         ; }
 $AAC4 LD C,(HL)     ; C = *HL; // $800C
 $AAC5 INC DE        ; {DE += 3;
 $AAC6 INC DE        ;
 $AAC7 INC DE        ; }
 $AAC8 LD A,(DE)     ; A = *DE;
 $AAC9 CP $FF        ; {if (A == 255) return;
 $AACB RET Z         ; }
 $AACC BIT 7,C       ; {if (C & (1<<7)) A ^= 2;
 $AACE JR Z,$AAD2    ;
 $AAD0 XOR $02       ; }
*$AAD2 PUSH AF       ; PUSH AF
 $AAD3 ADD A,A       ; {HL = &map_move_jump_table[A];
 $AAD4 LD C,A        ;
 $AAD5 LD B,$00      ;
 $AAD7 LD HL,$AB31   ;
 $AADA ADD HL,BC     ; }
 $AADB LD A,(HL)     ; {A = *HL++; // ie. HL = (word at HL); HL += 2;
 $AADC INC HL        ; }
 $AADD LD H,(HL)     ; H = *HL;
 $AADE LD L,A        ; L = A;
 $AADF POP AF        ; POP AF
 $AAE0 PUSH HL       ; PUSH HL
 $AAE1 PUSH AF       ; PUSH AF
 $AAE2 LD BC,$7C00   ; BC = 0x7C00;
 $AAE5 CP $02        ; {if (A >= 2) B = 0x00;
 $AAE7 JR C,$AAEB    ;
 $AAE9 LD B,$00      ; }
*$AAEB CP $01        ; {if (A != 1 && A != 2) C = 0xC0;
 $AAED JR Z,$AAF5    ;
 $AAEF CP $02        ;
 $AAF1 JR Z,$AAF5    ;
 $AAF3 LD C,$C0      ; }
*$AAF5 LD HL,($81BB) ; HL = map_position;
 $AAF8 LD A,L        ; {if (L == C || H == B) <%
 $AAF9 CP C          ;
 $AAFA JR NZ,$AAFF   ; }
*$AAFC POP AF        ;   popret: POP AF
 $AAFD POP HL        ;   POP HL
 $AAFE RET           ; {  return; %>
*$AAFF LD A,H        ;
 $AB00 CP B          ;
 $AB01 JR Z,$AAFC    ; }
 $AB03 POP AF        ; POP AF
 $AB04 LD HL,$A7C6   ; HL = &used_by_move_map; // screen offset of some sort?
 $AB07 CP $02        ; {if (A >= 2) <%
 $AB09 JR NC,$AB0F   ; }
 $AB0B LD A,(HL)     ; {  A = *HL + 1; %>
 $AB0C INC A         ; }
 $AB0D JR $AB11      ; else <%
*$AB0F LD A,(HL)     ; {  A = *HL - 1; %>
 $AB10 DEC A         ; }
*$AB11 AND $03       ; A &= 3;
 $AB13 LD (HL),A     ; *HL = A;
 $AB14 EX DE,HL      ; EX DE,HL
 $AB15 LD HL,$0000   ; HL = 0x0000;
 $AB18 AND A         ; {if (A == 0) goto $AB2A;
 $AB19 JR Z,$AB2A    ; }
 $AB1B LD L,$60      ; L = 0x60;
 $AB1D CP $02        ; {if (A == 2) goto $AB2A;
 $AB1F JR Z,$AB2A    ; }
 $AB21 LD HL,$FF30   ; HL = 0xFF30;
 $AB24 CP $01        ; {if (A == 1) goto $AB2A;
 $AB26 JR Z,$AB2A    ; }
 $AB28 LD L,$90      ; L = 0x90;
*$AB2A LD ($A7C7),HL ; plot_game_window_x = HL;
 $AB2D LD HL,($81BB) ; HL = map_position;
 $AB30 RET           ; return; // pops and calls map_move_* routine pushed at
                     ; $AAE0
 $AB31 ADD HL,SP     ; {{ map_move_1,
 $AB32 XOR E         ; }
 $AB33 LD B,H        ; {map_move_2,
 $AB34 XOR E         ; }
 $AB35 LD C,A        ; {map_move_3,
 $AB36 XOR E         ; }
 $AB37 LD E,D        ; {map_move_4 };
 $AB38 XOR E         ; }
 $AB39 LD A,(DE)     ; A = *DE;
 $AB3A AND A         ; {if (A == 0) goto map_shunt_vertical_1;
 $AB3B JP Z,$AA4B    ; }
 $AB3E BIT 0,A       ; {if ((A & 1) == 0) return;
 $AB40 RET Z         ; }
 $AB41 JP $A9E4      ; goto map_shunt_horizontal_1;
 $AB44 LD A,(DE)     ; A = *DE;
 $AB45 AND A         ; {if (A == 0) goto map_shunt_diagonal_1_2;
 $AB46 JP Z,$AA26    ; }
 $AB49 CP $02        ; {if (A != 2) return;
 $AB4B RET NZ        ; }
 $AB4C JP $AA05      ; goto map_shunt_horizontal_2;
 $AB4F LD A,(DE)     ; A = *DE;
 $AB50 CP $03        ; {if (A == 3) goto map_shunt_vertical_2;
 $AB52 JP Z,$AA6C    ; }
 $AB55 RRA           ; RRA // rotate right?
 $AB56 JP NC,$AA05   ; JP NC,map_shunt_horizontal_2;
 $AB59 RET           ; return;
 $AB5A LD A,(DE)     ; A = *DE;
 $AB5B CP $01        ; {if (A == 1) goto map_shunt_horizontal_1;
 $AB5D JP Z,$A9E4    ; }
 $AB60 CP $03        ; {if (A == 3) goto map_shunt_diagonal_2_1;
 $AB62 JP Z,$AA8D    ; }
 $AB65 RET           ; return;

; zoombox_stuff
;
; Zoombox stuff.
b$AB66 DEFB $0C      ; zoombox_x
 $AB67 DEFB $01      ; zoombox_horizontal_count
 $AB68 DEFB $08      ; zoombox_y
 $AB69 DEFB $01      ; zoombox_vertical_count

; game_window_attribute
b$AB6A DEFB $07

; choose_game_window_attributes
;
; Used by the routines at #R$7B36, #R$7B8B, #R$A1D3, #R$ABA0, #R$B3F6 and
; #R$B83B.
;
; O:A Chosen attribute.
c$AB6B LD A,($68A0)  ; {if (room_index < room_29_secondtunnelstart) <%
 $AB6E CP $1D        ;
 $AB70 JR NC,$AB89   ; }
 $AB72 LD A,($A146)  ;   A = day_or_night;
 $AB75 LD C,$07      ;   C = attribute_WHITE_OVER_BLACK;
 $AB77 AND A         ; {  if (A == 0) goto set_attribute_from_C;
 $AB78 JR Z,$AB84    ; }
 $AB7A LD A,($68A0)  ;   A = room_index;
 $AB7D LD C,$41      ;   C = attribute_BRIGHT_BLUE_OVER_BLACK;
 $AB7F AND A         ; {  if (A == 0) goto set_attribute_from_C;
 $AB80 JR Z,$AB84    ; }
 $AB82 LD C,$05      ;   C = attribute_CYAN_OVER_BLACK;
*$AB84 LD A,C        ;   set_attribute_from_C: A = C;
*$AB85 LD ($AB6A),A  ;   set_attribute_from_A: game_window_attribute = A;
 $AB88 RET           ;   return; %>
; Choose attribute for tunnel.
*$AB89 LD C,$02      ; else <% C = attribute_RED_OVER_BLACK;
 $AB8B LD HL,($8215) ;   HL = items_held;
 $AB8E LD A,$04      ; {  if (L == item_TORCH || H == item_TORCH) goto
 $AB90 CP L          ; set_attribute_from_C;
 $AB91 JR Z,$AB84    ;
 $AB93 CP H          ;
 $AB94 JR Z,$AB84    ; }
 $AB96 CALL $6A27    ;   wipe_visible_tiles();
 $AB99 CALL $6B42    ;   plot_interior_tiles();
 $AB9C LD A,$01      ;   A = attribute_BLUE_OVER_BLACK;
 $AB9E JR $AB85      ;   goto set_attribute_from_A; %>

; zoombox
;
; Used by the routines at #R$68F4, #R$A50B and #R$B2FC.
c$ABA0 LD A,$0C      ; {zoombox_x = 12;
 $ABA2 LD ($AB66),A  ; }
 $ABA5 LD A,$08      ; {zoombox_y = 8;
 $ABA7 LD ($AB68),A  ; }
 $ABAA CALL $AB6B    ; choose_game_window_attributes();
 $ABAD LD H,A        ; H = A;
 $ABAE LD L,A        ; L = A;
 $ABAF LD ($5932),HL ; ($5932) = HL; // set 2 attrs
 $ABB2 LD ($5952),HL ; ($5952) = HL; // set 2 attrs
 $ABB5 XOR A         ; {zoombox_horizontal_count = 0;
 $ABB6 LD ($AB67),A  ; }
 $ABB9 LD ($AB69),A  ; zoombox_vertical_count = 0;
*$ABBC LD HL,$AB66   ; do <% HL = &zoombox_x;
 $ABBF LD A,(HL)     ;   A = *HL;
 $ABC0 CP $01        ; {  if (A != 1) <%
 $ABC2 JP Z,$ABCA    ; }
 $ABC5 DEC (HL)      ;     (*HL)--;
 $ABC6 DEC A         ;     A--;
 $ABC7 INC HL        ;     HL++;
 $ABC8 INC (HL)      ;     (*HL)++;
 $ABC9 DEC HL        ;     HL--; %>
*$ABCA INC HL        ;   HL++;
 $ABCB ADD A,(HL)    ;   A += *HL;
 $ABCC CP $16        ; {  if (A < 22) (*HL)++;
 $ABCE JP NC,$ABD2   ;
 $ABD1 INC (HL)      ; }
*$ABD2 INC HL        ;   HL++;
 $ABD3 LD A,(HL)     ;   A = *HL;
 $ABD4 CP $01        ; {  if (A != 1) <%
 $ABD6 JP Z,$ABDE    ; }
 $ABD9 DEC (HL)      ;     (*HL)--;
 $ABDA DEC A         ;     A--;
 $ABDB INC HL        ;     HL++;
 $ABDC INC (HL)      ;     (*HL)++;
 $ABDD DEC HL        ;     HL--; %>
*$ABDE INC HL        ;   HL++;
 $ABDF ADD A,(HL)    ;   A += *HL;
 $ABE0 CP $0F        ; {  if (A < 15) (*HL)++;
 $ABE2 JP NC,$ABE6   ;
 $ABE5 INC (HL)      ; }
*$ABE6 CALL $ABF9    ;   zoombox_1();
 $ABE9 CALL $AC6F    ;   zoombox_draw();
 $ABEC LD HL,$AB67   ; {  A = zoombox_vertical_count +
 $ABEF LD A,($AB69)  ; zoombox_horizontal_count;
 $ABF2 ADD A,(HL)    ; }
 $ABF3 CP $23        ; {%> while (A < 35);
 $ABF5 JP C,$ABBC    ; }
 $ABF8 RET           ; return;

; zoombox_1
;
; Used by the routine at #R$ABA0.
c$ABF9 LD A,($AB68)  ; A = zoombox_y;
 $ABFC LD H,A        ; H = A;
 $ABFD XOR A         ; A = 0;
 $ABFE SRL H         ; SRL H
 $AC00 RRA           ; RRA
 $AC01 LD E,A        ; E = A;
 $AC02 LD D,H        ; D = H;
 $AC03 SRL H         ; SRL H
 $AC05 RRA           ; RRA
 $AC06 LD L,A        ; L = A;
 $AC07 ADD HL,DE     ; {HL += DE + zoombox_x;
 $AC08 LD A,($AB66)  ;
 $AC0B ADD A,L       ;
 $AC0C LD L,A        ;
 $AC0D JR NC,$AC10   ;
 $AC0F INC H         ; }
*$AC10 LD DE,$F291   ; DE = screen_buffer_start_address + 1;
 $AC13 ADD HL,DE     ; HL += DE;
 $AC14 EX DE,HL      ; EX DE,HL
 $AC15 LD A,($AB68)  ; {HL = game_window_start_addresses[zoombox_y * 8]; // ie.
 $AC18 ADD A,A       ; * 16
 $AC19 ADD A,A       ;
 $AC1A ADD A,A       ;
 $AC1B ADD A,A       ;
 $AC1C LD HL,$EDD3   ;
 $AC1F ADD A,L       ;
 $AC20 LD L,A        ;
 $AC21 JR NC,$AC24   ;
 $AC23 INC H         ;
*$AC24 LD A,(HL)     ;
 $AC25 INC HL        ;
 $AC26 LD H,(HL)     ;
 $AC27 LD L,A        ; }
 $AC28 LD A,($AB66)  ; {HL += zoombox_x;
 $AC2B ADD A,L       ;
 $AC2C LD L,A        ; }
 $AC2D EX DE,HL      ; EX DE,HL
 $AC2E LD A,($AB67)  ; A = zoombox_horizontal_count;
 $AC31 LD ($AC55),A  ; ($AC55) = A; // self modify
 $AC34 NEG           ; {A = -A + 24;
 $AC36 ADD A,$18     ; }
 $AC38 LD ($AC4D),A  ; ($AC4D) = A; // self modify
 $AC3B LD A,($AB69)  ; A = zoombox_vertical_count;
 $AC3E LD B,A        ; B = A; // iterations
*$AC3F PUSH BC       ; do <% PUSH BC
 $AC40 PUSH DE       ;   PUSH DE
 $AC41 LD A,$08      ;   A = 8; // 8 iterations
*$AC43 EX AF,AF'     ;   do <% -
 $AC44 LD A,($AB67)  ; {    BC = zoombox_horizontal_count;
 $AC47 LD C,A        ;
 $AC48 LD B,$00      ; }
 $AC4A LDIR          ;     LDIR
 $AC4C LD A,$00      ;     Adash = 0; // self modified
 $AC4E ADD A,L       ; {    HL += Adash;
 $AC4F LD L,A        ;
 $AC50 JR NC,$AC53   ;
 $AC52 INC H         ; }
*$AC53 LD A,E        ;     Adash = E;
 $AC54 SUB $00       ;     Adash -= 0; // self modified
 $AC56 LD E,A        ;     E = Adash;
 $AC57 INC D         ;     D++;
 $AC58 EX AF,AF'     ;     -
 $AC59 DEC A         ; {  %> while (--A);
 $AC5A JP NZ,$AC43   ; }
 $AC5D POP DE        ;   POP DE
 $AC5E EX DE,HL      ;   EX DE,HL
 $AC5F LD BC,$0020   ;   BC = 0x0020;
 $AC62 LD A,L        ; {  if (L >= 224) B = 0x07;
 $AC63 CP $E0        ;
 $AC65 JR C,$AC69    ;
 $AC67 LD B,$07      ; }
*$AC69 ADD HL,BC     ;   HL += BC;
 $AC6A EX DE,HL      ;   EX DE,HL
 $AC6B POP BC        ;   POP BC
 $AC6C DJNZ $AC3F    ; %> while (--B);
 $AC6E RET           ; return;

; zoombox_draw
;
; Used by the routine at #R$ABA0.
c$AC6F LD A,($AB68)  ; {HL = game_window_start_addresses[(zoombox_y - 1) * 8];
 $AC72 DEC A         ; // ie. * 16
 $AC73 ADD A,A       ;
 $AC74 ADD A,A       ;
 $AC75 ADD A,A       ;
 $AC76 ADD A,A       ;
 $AC77 LD HL,$EDD3   ;
 $AC7A ADD A,L       ;
 $AC7B LD L,A        ;
 $AC7C JR NC,$AC7F   ;
 $AC7E INC H         ;
*$AC7F LD A,(HL)     ;
 $AC80 INC HL        ;
 $AC81 LD H,(HL)     ;
 $AC82 LD L,A        ; }
; Top left.
 $AC83 LD A,($AB66)  ; {HL += zoombox_x - 1;
 $AC86 DEC A         ;
 $AC87 ADD A,L       ;
 $AC88 LD L,A        ; }
 $AC89 LD A,$00      ; {zoombox_draw_tile(zoombox_tile_TL);
 $AC8B CALL $ACFC    ; }
 $AC8E INC L         ; HL++;
; Horizontal.
 $AC8F LD A,($AB67)  ; {B = zoombox_horizontal_count; // iterations
 $AC92 LD B,A        ; }
*$AC93 LD A,$01      ; {do <% zoombox_draw_tile(zoombox_tile_HZ);
 $AC95 CALL $ACFC    ; }
 $AC98 INC L         ;   HL++;
 $AC99 DJNZ $AC93    ; %> while (--B);
; Top right.
 $AC9B LD A,$02      ; {zoombox_draw_tile(zoombox_tile_TR);
 $AC9D CALL $ACFC    ; }
 $ACA0 LD DE,$0020   ; DE = 32;
 $ACA3 LD A,L        ; {if (L >= 224) D = 0x07;
 $ACA4 CP $E0        ;
 $ACA6 JR C,$ACAA    ;
 $ACA8 LD D,$07      ; }
*$ACAA ADD HL,DE     ; HL += DE;
; Vertical.
 $ACAB LD A,($AB69)  ; {B = zoombox_vertical_count; // iterations
 $ACAE LD B,A        ; }
*$ACAF LD A,$03      ; {do <% zoombox_draw_tile(zoombox_tile_VT);
 $ACB1 CALL $ACFC    ; }
 $ACB4 LD DE,$0020   ;   DE = 32;
 $ACB7 LD A,L        ; {  if (L >= 224) D = 0x07;
 $ACB8 CP $E0        ;
 $ACBA JR C,$ACBE    ;
 $ACBC LD D,$07      ; }
*$ACBE ADD HL,DE     ;   HL += DE;
 $ACBF DJNZ $ACAF    ; %> while (--B);
; Bottom right.
 $ACC1 LD A,$04      ; {zoombox_draw_tile(zoombox_tile_BR);
 $ACC3 CALL $ACFC    ; }
 $ACC6 DEC L         ; HL--;
; Horizontal.
 $ACC7 LD A,($AB67)  ; {B = zoombox_horizontal_count; // iterations
 $ACCA LD B,A        ; }
*$ACCB LD A,$01      ; {do <% zoombox_draw_tile(zoombox_tile_HZ);
 $ACCD CALL $ACFC    ; }
 $ACD0 DEC L         ;   HL--;
 $ACD1 DJNZ $ACCB    ; %> while (--B);
; Bottom left.
 $ACD3 LD A,$05      ; {zoombox_draw_tile(zoombox_tile_BL);
 $ACD5 CALL $ACFC    ; }
 $ACD8 LD DE,$FFE0   ; DE = 0xFFE0;
 $ACDB LD A,L        ; {if (L < 32) DE = 0xF8E0;
 $ACDC CP $20        ;
 $ACDE JR NC,$ACE3   ;
 $ACE0 LD DE,$F8E0   ; }
*$ACE3 ADD HL,DE     ; HL += DE;
; Vertical.
 $ACE4 LD A,($AB69)  ; {B = zoombox_vertical_count; // iterations
 $ACE7 LD B,A        ; }
*$ACE8 LD A,$03      ; {do <% zoombox_draw_tile(zoombox_tile_VT);
 $ACEA CALL $ACFC    ; }
 $ACED LD DE,$FFE0   ;   DE = 0xFFE0;
 $ACF0 LD A,L        ; {  if (L < 32) DE = 0xF8E0;
 $ACF1 CP $20        ;
 $ACF3 JR NC,$ACF8   ;
 $ACF5 LD DE,$F8E0   ; }
*$ACF8 ADD HL,DE     ;   HL += DE;
 $ACF9 DJNZ $ACE8    ; %> while (--B);
 $ACFB RET           ; return;

; zoombox_draw_tile
;
; Used by the routine at #R$AC6F.
;
; I:A Index of tile to draw.
; I:BC (preserved)
; I:HL Destination address.
c$ACFC PUSH BC       ; PUSH BC
 $ACFD PUSH AF       ; PUSH AF
 $ACFE PUSH HL       ; PUSH HL
 $ACFF EX DE,HL      ; EX DE,HL
 $AD00 LD L,A        ; {HL = &zoombox_tiles[A];
 $AD01 LD H,$00      ;
 $AD03 ADD HL,HL     ;
 $AD04 ADD HL,HL     ;
 $AD05 ADD HL,HL     ;
 $AD06 LD BC,$AF5E   ;
 $AD09 ADD HL,BC     ; }
 $AD0A LD B,$08      ; B = 8; // 8 iterations
*$AD0C LD A,(HL)     ; {do <% *DE = *HL++;
 $AD0D LD (DE),A     ; }
 $AD0E INC D         ; {  DE += 256;
 $AD0F INC HL        ; }
 $AD10 DJNZ $AD0C    ; %> while (--B);
 $AD12 LD A,D        ; {A = D - 1; // ie. (DE - 256) >> 8
 $AD13 DEC A         ; }
 $AD14 LD H,$58      ; H = 0x58; // attributes
 $AD16 LD L,E        ; L = E;
 $AD17 CP $48        ; {if (A >= 0x48) <% H++;
 $AD19 JR C,$AD21    ;
 $AD1B INC H         ; }
 $AD1C CP $50        ; {  if (A >= 0x50) H++; %>
 $AD1E JR C,$AD21    ;
 $AD20 INC H         ; }
*$AD21 LD A,($AB6A)  ; {*HL = game_window_attribute;
 $AD24 LD (HL),A     ; }
 $AD25 POP HL        ; POP HL
 $AD26 POP AF        ; POP AF
 $AD27 POP BC        ; POP BC
 $AD28 RET           ; return;

; spotlight_movement_data_maybe
;
; Likely: spotlight movement data. Groups of seven?
w$AD29 DEFW $5224
 $AD2B DEFW $022C
 $AD2D DEFW $5400
 $AD2F DEFW $78AD
 $AD31 DEFW $1852
 $AD33 DEFW $0001
 $AD35 DEFW $AD43
 $AD37 DEFW $4C3C
 $AD39 DEFW $0220
 $AD3B DEFW $3E00
 $AD3D DEFW $20AD
 $AD3F DEFW $2002
 $AD41 DEFW $FF01
 $AD43 DEFW $0118
 $AD45 DEFW $000C
 $AD47 DEFW $0318
 $AD49 DEFW $000C
 $AD4B DEFW $0120
 $AD4D DEFW $0014
 $AD4F DEFW $0320
 $AD51 DEFW $022C
 $AD53 DEFW $2CFF
 $AD55 DEFW $2A02
 $AD57 DEFW $FF01

; searchlight_AD59
;
; Used by the routine at #R$ADBD.
; .
; Used by nighttime.
;
; I:HL Pointer to spotlight_movement_data_maybe
c$AD59 LD E,(HL)     ; {E = *HL++;
 $AD5A INC HL        ; }
 $AD5B LD D,(HL)     ; {D = *HL++;
 $AD5C INC HL        ; }
 $AD5D DEC (HL)      ; (*HL)--;
 $AD5E JP NZ,$AD99   ; if (Z) <%
 $AD61 INC HL        ; {  HL += 2;
 $AD62 INC HL        ; }
 $AD63 LD A,(HL)     ;   A = *HL; // sampled HL = $AD3B, $AD34, $AD2D
 $AD64 BIT 7,A       ; {  if (A & (1<<7)) <%
 $AD66 JP Z,$AD76    ; }
 $AD69 AND $7F       ;     A &= 0x7F;
 $AD6B JP NZ,$AD72   ;     if (A == 0) <%
 $AD6E RES 7,(HL)    ;       *HL &= ~(1<<7); %>
 $AD70 JR $AD74      ;     else <%
*$AD72 DEC (HL)      ;       (*HL)--;
 $AD73 DEC A         ;       A--; %> %>
*$AD74 JR $AD78      ;   else <%
*$AD76 INC A         ;     A++;
 $AD77 LD (HL),A     ;     *HL = A; %>
*$AD78 INC HL        ;   HL++;
 $AD79 LD C,(HL)     ; {  C = *HL++;
 $AD7A INC HL        ; }
 $AD7B LD B,(HL)     ;   B = *HL;
 $AD7C DEC HL        ; {  HL -= 2;
 $AD7D DEC HL        ; }
 $AD7E ADD A,A       ; {  BC += A * 2;
 $AD7F ADD A,C       ;
 $AD80 LD C,A        ;
 $AD81 JR NC,$AD84   ;
 $AD83 INC B         ; }
*$AD84 LD A,(BC)     ;   A = *BC;
 $AD85 CP $FF        ; {  if (A == 0xFF) <%
 $AD87 JP NZ,$AD90   ; }
 $AD8A DEC (HL)      ;     (*HL)--;
 $AD8B SET 7,(HL)    ;     *HL |= 1<<7;
 $AD8D DEC BC        ; {    BC -= 2;
 $AD8E DEC BC        ; }
 $AD8F LD A,(BC)     ;     A = *BC; %>
*$AD90 DEC HL        ; {  HL -= 2;
 $AD91 DEC HL        ; }
 $AD92 LD A,(BC)     ; {  *HL++ = *BC++;
 $AD93 LD (HL),A     ;
 $AD94 INC HL        ;
 $AD95 INC BC        ; }
 $AD96 LD A,(BC)     ; {  *HL = *BC;
 $AD97 LD (HL),A     ; }
 $AD98 RET           ;   return; %>
*$AD99 INC HL        ; else <% HL++;
 $AD9A LD A,(HL)     ; {  A = *HL++;
 $AD9B INC HL        ; }
 $AD9C BIT 7,(HL)    ; {  if (*HL & (1<<7)) A ^= 2;
 $AD9E JR Z,$ADA2    ;
 $ADA0 XOR $02       ; }
*$ADA2 CP $02        ; {  if (A < 2) D -= 2;
 $ADA4 JR NC,$ADA8   ;
 $ADA6 DEC D         ;
 $ADA7 DEC D         ; }
*$ADA8 INC D         ;   D++;
 $ADA9 AND A         ; {  if (A != 0 && A != 3) <% E += 2; %> else <% E -= 2
 $ADAA JR Z,$ADB4    ; %>;
 $ADAC CP $03        ;
 $ADAE JR Z,$ADB4    ;
 $ADB0 INC E         ;
 $ADB1 INC E         ;
 $ADB2 JR $ADB6      ;
*$ADB4 DEC E         ;
 $ADB5 DEC E         ; }
*$ADB6 DEC HL        ; {  HL -= 3;
 $ADB7 DEC HL        ;
 $ADB8 DEC HL        ; }
 $ADB9 LD (HL),D     ; {  *HL-- = D;
 $ADBA DEC HL        ; }
 $ADBB LD (HL),E     ;   *HL = E;
 $ADBC RET           ;   return; %>

; nighttime
;
; Used by the routine at #R$9D78.
; .
; Turns white screen elements light blue and tracks the player with a
; searchlight.
c$ADBD LD HL,$81BD   ; HL = &searchlight_state;
 $ADC0 LD A,(HL)     ; {if (*HL == searchlight_STATE_OFF) goto not_tracking;
 $ADC1 CP $FF        ;
 $ADC3 JP Z,$AE0D    ; }
 $ADC6 LD A,($68A0)  ; {if (room_index) <% // player is indoors
 $ADC9 AND A         ;
 $ADCA JR Z,$ADCF    ; }
; If the player goes indoors the searchlight loses track.
 $ADCC LD (HL),$FF   ;   *HL = searchlight_STATE_OFF;
 $ADCE RET           ;   return; %>
; Player is outdoors.
*$ADCF LD A,(HL)     ; {if (*HL == searchlight_STATE_1F) <%
 $ADD0 CP $1F        ;
 $ADD2 JP NZ,$AE00   ; }
 $ADD5 LD HL,($81BB) ;   HL = map_position;
 $ADD8 LD A,L        ; {  E = L + 4;
 $ADD9 ADD A,$04     ;
 $ADDB LD E,A        ; }
 $ADDC LD D,H        ;   D = H;
 $ADDD LD HL,($AE76) ;   HL = searchlight_coords;
 $ADE0 LD A,L        ; {  if (L == E) <%
 $ADE1 CP E          ;
 $ADE2 JR NZ,$ADE9   ; }
 $ADE4 LD A,H        ; {    if (H == D) return; %> // highlight doesn't need to
 $ADE5 CP D          ; move, so quit
 $ADE6 RET Z         ; }
 $ADE7 JR $ADF1      ;   else <%
; Move searchlight left/right to focus on player.
*$ADE9 JP NC,$ADEF   ;     if (L < E) <%
 $ADEC INC A         ;       L++; %>
 $ADED JR $ADF0      ;     else <%
*$ADEF DEC A         ;       L--; %>
*$ADF0 LD L,A        ;   %>
; Move searchlight up/down to focus on player.
*$ADF1 LD A,H        ; {  if (H != D) <%
 $ADF2 CP D          ;
 $ADF3 JR Z,$ADFD    ; }
 $ADF5 JP NC,$ADFB   ;     if (H < D) <%
 $ADF8 INC A         ;       H++; %>
 $ADF9 JR $ADFC      ;     else <%
*$ADFB DEC A         ;       H--; %>
*$ADFC LD H,A        ;   %>
*$ADFD LD ($AE76),HL ;   searchlight_coords = HL; %>
*$AE00 LD DE,($81BB) ; DE = map_position;
 $AE04 LD HL,$AE77   ; HL = $AE77; // &searchlight_coords + 1 byte; //
                     ; compensating for HL--; jumped into
 $AE07 LD B,$01      ; B = 1; // 1 iteration
 $AE09 PUSH BC       ; PUSH BC
 $AE0A PUSH HL       ; PUSH HL
 $AE0B JR $AE3F      ; goto $AE3F;
*$AE0D LD HL,$AD29   ; not_tracking: HL = &spotlight_movement_data_maybe[0];
 $AE10 LD B,$03      ; B = 3; // 3 iterations
*$AE12 PUSH BC       ; do <% PUSH BC
 $AE13 PUSH HL       ;   PUSH HL
 $AE14 CALL $AD59    ;   searchlight_AD59();
 $AE17 POP HL        ;   POP HL
 $AE18 PUSH HL       ;   PUSH HL
 $AE19 CALL $AE78    ;   searchlight_caught();
 $AE1C POP HL        ;   POP HL
 $AE1D PUSH HL       ;   PUSH HL
 $AE1E LD DE,($81BB) ;   DE = map_position;
 $AE22 LD A,E        ; {  if (E + 23 < *HL) goto next; // out of bounds maybe
 $AE23 ADD A,$17     ;
 $AE25 CP (HL)       ;
 $AE26 JP C,$AE6C    ; }
 $AE29 LD A,(HL)     ; {  if (*HL + 16 < E) goto next;
 $AE2A ADD A,$10     ;
 $AE2C CP E          ;
 $AE2D JP C,$AE6C    ; }
 $AE30 INC HL        ;   HL++;
 $AE31 LD A,D        ; {  if (D + 16 < *HL) goto next;
 $AE32 ADD A,$10     ;
 $AE34 CP (HL)       ;
 $AE35 JP C,$AE6C    ; }
 $AE38 LD A,(HL)     ; {  if (*HL + 16 < D) goto next;
 $AE39 ADD A,$10     ;
 $AE3B CP D          ;
 $AE3C JP C,$AE6C    ; }
*$AE3F XOR A         ;   A = 0;
 $AE40 EX AF,AF'     ;   -
 $AE41 DEC HL        ;   HL--;
 $AE42 LD B,$00      ;   B = 0x00;
 $AE44 LD A,(HL)     ; {  if (*HL - E < 0) <%
 $AE45 SUB E         ;
 $AE46 JP NC,$AE4E   ; }
 $AE49 LD B,$FF      ;     B = 0xFF;
 $AE4B EX AF,AF'     ;     -
 $AE4C CPL           ;     A = ~A;
 $AE4D EX AF,AF'     ;     - %>
*$AE4E LD C,A        ;   C = Adash;
 $AE4F INC HL        ; {  Adash = *++HL;
 $AE50 LD A,(HL)     ; }
 $AE51 LD H,$00      ;   H = 0x00;
 $AE53 SUB D         ;   Adash -= D;
 $AE54 JP NC,$AE59   ; {  if (Adash < 0) H = 0xFF;
 $AE57 LD H,$FF      ; }
*$AE59 LD L,A        ;   L = Adash;
 $AE5A ADD HL,HL     ; {  HL *= 32;
 $AE5B ADD HL,HL     ;
 $AE5C ADD HL,HL     ;
 $AE5D ADD HL,HL     ;
 $AE5E ADD HL,HL     ; }
 $AE5F ADD HL,BC     ;   HL += BC;
 $AE60 LD BC,$5846   ; {  HL += 0x5846; // screen attribute address of top-left
 $AE63 ADD HL,BC     ; game window attribute}
 $AE64 EX DE,HL      ;   EX DE,HL
 $AE65 EX AF,AF'     ;   -
 $AE66 LD ($AE75),A  ;   searchlight_related = A;
 $AE69 CALL $AEB8    ;   searchlight_plot();
*$AE6C POP HL        ;   next: POP HL
 $AE6D POP BC        ;   POP BC
 $AE6E LD DE,$0007   ; {  HL += 7;
 $AE71 ADD HL,DE     ; }
 $AE72 DJNZ $AE12    ; %> while (--B);
 $AE74 RET           ; return;

; searchlight_related
;
; (<- nighttime, searchlight_plot)
b$AE75 DEFB $00

; searchlight_coords
;
; (<- nighttime)
w$AE76 DEFW $0000

; searchlight_caught
;
; Used by the routine at #R$ADBD.
; .
; Suspect this is when the player is caught in the spotlight.
;
; I:HL Pointer to spotlight_movement_data_maybe
c$AE78 LD DE,($81BB) ; DE = map_position;
 $AE7C LD A,E        ; {if (HL[0] + 5 >= E + 12 || HL[0] + 10 < E + 10)
 $AE7D ADD A,$0C     ; return;
 $AE7F LD B,A        ;
 $AE80 LD A,(HL)     ;
 $AE81 ADD A,$05     ;
 $AE83 CP B          ;
 $AE84 RET NC        ;
 $AE85 ADD A,$05     ;
 $AE87 DEC B         ;
 $AE88 DEC B         ;
 $AE89 CP B          ;
 $AE8A RET C         ; }
 $AE8B INC HL        ; {if (HL[1] + 5 >= D + 10 || D + 6 >= HL[1] + 12)
 $AE8C LD A,D        ; return;
 $AE8D ADD A,$0A     ;
 $AE8F LD B,A        ;
 $AE90 LD A,(HL)     ;
 $AE91 ADD A,$05     ;
 $AE93 CP B          ;
 $AE94 RET NC        ;
 $AE95 ADD A,$07     ;
 $AE97 LD C,A        ;
 $AE98 LD A,B        ;
 $AE99 SUB $04       ;
 $AE9B CP C          ;
 $AE9C RET NC        ; }
 $AE9D LD A,($81BD)  ; {if (searchlight_state == searchlight_STATE_1F) return;
 $AEA0 CP $1F        ;
 $AEA2 RET Z         ; }
 $AEA3 LD A,$1F      ; {searchlight_state = searchlight_STATE_1F;
 $AEA5 LD ($81BD),A  ; }
 $AEA8 LD D,(HL)     ; {D = HL[0];
 $AEA9 DEC HL        ; }
 $AEAA LD E,(HL)     ; E = HL[1];
 $AEAB LD ($AE76),DE ; searchlight_coords = DE;
 $AEAF XOR A         ; {bell = bell_RING_PERPETUAL;
 $AEB0 LD ($A130),A  ; }
 $AEB3 LD B,$0A      ; {decrease_morale(10); // exit via
 $AEB5 JP $A0E0      ; }

; searchlight_plot
;
; Used by the routine at #R$ADBD.
; .
; Searchlight plotter.
c$AEB8 EXX                                  ; -
 $AEB9 LD DE,$AF3E                          ; DEdash = &searchlight_shape[0];
 $AEBC LD C,$10                             ; Cdash = 16; // iterations  /
                                            ; width?
*$AEBE EXX                                  ; do <% -
 $AEBF LD A,($AE75)                         ;   A = searchlight_related;
 $AEC2 LD HL,$5A40                          ;   HL = 0x5A40; // screen
                                            ; attribute address (column 0 +
                                            ; bottom of game window)
 $AEC5 AND A                                ; {  if (A != 0 && (E & 31) >= 22)
 $AEC6 JP Z,$AED2                           ; L = 32;
 $AEC9 LD A,E                               ;
 $AECA AND $1F                              ;
 $AECC CP $16                               ;
 $AECE JR C,$AED2                           ;
 $AED0 LD L,$20                             ; }
*$AED2 SBC HL,DE                            ;   SBC HL,DE
 $AED4 RET C                                ;   RET C  // if (HL < DE) return;
                                            ; // what about carry?
 $AED5 PUSH DE                              ;   PUSH DE
 $AED6 LD HL,$5840                          ;   HL = 0x5840; // screen
                                            ; attribute address (column 0 + top
                                            ; of game window)
 $AED9 AND A                                ; {  if (A != 0 && (E & 31) >= 7) L
 $AEDA JP Z,$AEE6                           ; = 32;
 $AEDD LD A,E                               ;
 $AEDE AND $1F                              ;
 $AEE0 CP $07                               ;
 $AEE2 JR C,$AEE6                           ;
 $AEE4 LD L,$20                             ; }
*$AEE6 SBC HL,DE                            ;   SBC HL,DE
 $AEE8 JR C,$AEF0                           ;   JR C,$AEF0  // if (HL < DE)
                                            ; goto $AEF0;
 $AEEA EXX                                  ;   -
 $AEEB INC DE                               ; {  DEdash += 2;
 $AEEC INC DE                               ; }
 $AEED EXX                                  ;   -
 $AEEE JR $AF32                             ;   goto nextrow;
*$AEF0 EX DE,HL                             ;   EX DE,HL
 $AEF1 EXX                                  ;   -
 $AEF2 LD B,$02                             ;   Bdash = 2;
*$AEF4 LD A,(DE)                            ;   do <% A = *DEdash;
 $AEF5 EXX                                  ;     -
 $AEF6 LD DE,$071E                          ;     DE = 0x071E;
 $AEF9 LD C,A                               ;     C = A;
 $AEFA LD B,$08                             ;     B = 8;
*$AEFC LD A,($AE75)                         ;     do <% A =
                                            ; searchlight_related;
 $AEFF AND A                                ;       if (A != 0) ...
 $AF00 LD A,L                               ;       A = L; // interleaved
 $AF01 JP Z,$AF0C                           ;         ... goto $AF0C;
 $AF04 AND $1F                              ; {      if ((A & 31) >= 22) goto
 $AF06 CP $16                               ; $AF1B;
 $AF08 JR NC,$AF1B                          ; }
 $AF0A JR $AF18                             ;       goto $AF18;
*$AF0C AND $1F                              ; {      if ((A & 31) < E) goto
 $AF0E CP E                                 ; $AF18;
 $AF0F JR C,$AF18                           ; }
 $AF11 EXX                                  ;       -
*$AF12 INC DE                               ; {      do <% DEdash++; %> while
 $AF13 DJNZ $AF12                           ; (--Bdash);}
 $AF15 EXX                                  ;       -
 $AF16 JR $AF32                             ;       goto nextrow;
*$AF18 CP D                                 ; {      if (A < D) <%
 $AF19 JR NC,$AF1F                          ; }
*$AF1B RL C                                 ;         RL C %> // looks like bit
                                            ; extraction ...
 $AF1D JR $AF2A                             ;       else <%
*$AF1F RL C                                 ;         RL C
 $AF21 JP NC,$AF28                          ;         if (carry) <%
 $AF24 LD (HL),$06                          ;           *HL =
                                            ; attribute_YELLOW_OVER_BLACK; %>
 $AF26 JR $AF2A                             ;         else <%
*$AF28 LD (HL),$41                          ;           *HL =
                                            ; attribute_BRIGHT_BLUE_OVER_BLACK;
                                            ; %> %>
*$AF2A INC HL                               ;       HL++;
 $AF2B DJNZ $AEFC                           ;     %> while (--B);
 $AF2D EXX                                  ;     -
 $AF2E INC DE                               ;     DEdash++;
 $AF2F DJNZ $AEF4                           ;   %> while (--Bdash);
 $AF31 EXX                                  ;   -
*$AF32 POP HL                               ;   nextrow: POP HL
 $AF33 LD DE,$0020                          ; {  HL += 32;
 $AF36 ADD HL,DE                            ; }
 $AF37 EX DE,HL                             ;   EX DE,HL
 $AF38 EXX                                  ;   -
 $AF39 DEC C                                ; {%> while (--Cdash);
 $AF3A JP NZ,$AEBE                          ; }
 $AF3D RET                                  ; return;
; Bitmap circle.
 $AF3E DEFB $00,$00,$00,$00,$00,$00,$01,$80 ; {searchlight_shape
 $AF46 DEFB $07,$E0,$0F,$F0,$0F,$F0,$1F,$F8 ;
 $AF4E DEFB $1F,$F8,$0F,$F0,$0F,$F0,$07,$E0 ;
 $AF56 DEFB $01,$80,$00,$00,$00,$00,$00,$00 ; }

; zoombox_tiles
b$AF5E DEFB $00,$00,$00,$03,$04,$08,$08,$08 ; zoombox_tile_wire_tl
 $AF66 DEFB $00,$20,$18,$F4,$2F,$18,$04,$00 ; zoombox_tile_wire_hz
 $AF6E DEFB $00,$00,$00,$00,$E0,$10,$08,$08 ; zoombox_tile_wire_tr
 $AF76 DEFB $08,$08,$1A,$2C,$34,$58,$10,$10 ; zoombox_tile_wire_vt
 $AF7E DEFB $10,$10,$10,$20,$C0,$00,$00,$00 ; zoombox_tile_wire_br
 $AF86 DEFB $10,$10,$08,$07,$00,$00,$00,$00 ; zoombox_tile_wire_bl

; bribed_character
b$AF8E DEFB $FF

; sub_AF8F
;
; Used by the routine at #R$B5CE.
; .
; Door handling, bounds checking,
;
; I:IY Pointer to visible character block.
c$AF8F EX AF,AF'      ; EX AF,AF'
 $AF90 LD ($81AA),A   ; stashed_A = A;
 $AF93 SET 6,(IY+$07) ; {IY[7] |= vischar_BYTE7_BIT6 | vischar_BYTE7_BIT7;  //
 $AF97 SET 7,(IY+$07) ; wild guess: clamp character in position?}
 $AF9B PUSH IY        ; {HL = IY;
 $AF9D POP HL         ; }
 $AF9E LD A,L         ; -
 $AF9F AND A          ; {if (L == 0 && automatic_player_counter > 0)
 $AFA0 PUSH AF        ; door_handling(); // L == 0 => HL == 0x8000
 $AFA1 JR NZ,$AFAA    ;
 $AFA3 LD A,($A139)   ;
 $AFA6 AND A          ;
 $AFA7 CALL NZ,$B1F5  ;
*$AFAA POP AF         ; }
 $AFAB AND A          ; {if (L || (($8001 & (vischar_BYTE1_PICKING_LOCK |
 $AFAC JR NZ,$AFB5    ; vischar_BYTE1_CUTTING_WIRE)) !=
 $AFAE LD A,($8001)   ; vischar_BYTE1_CUTTING_WIRE)) <% if (bounds_check())
 $AFB1 AND $03        ; return 1; %>
 $AFB3 CP $02         ;
*$AFB5 CALL NZ,$B14C  ;
 $AFB8 RET NZ         ; }
; Cutting wire only from here onwards?
 $AFB9 LD A,(IY+$00)  ; A = IY[0]; // $8000,$8020,$8040,$8060
 $AFBC CP $1A         ; {if (A <= character_25_PRISONER_6) <% // a character
 $AFBE JR NC,$AFC4    ; index}
 $AFC0 CALL $AFDF     ;   collision();
 $AFC3 RET NZ         ;   if (!Z) return; %>
*$AFC4 RES 6,(IY+$07) ; IY[7] &= ~vischar_BYTE7_BIT6;
 $AFC8 LD HL,$81A4    ; {memcpy(IY + 15, &saved_Y, 6); // $800F // copy Y,X and
 $AFCB PUSH IY        ; vertical offset
 $AFCD POP DE         ;
 $AFCE LD A,$0F       ;
 $AFD0 ADD A,E        ;
 $AFD1 LD E,A         ;
 $AFD2 LD BC,$0006    ;
 $AFD5 LDIR           ; }
 $AFD7 LD A,($81AA)   ; {IY[0x17] = stashed_A;
 $AFDA LD (IY+$17),A  ; }
 $AFDD XOR A          ; A = 0;
 $AFDE RET            ; return 0;

; collision
;
; Used by the routines at #R$AF8F and #R$C4E0.
c$AFDF LD HL,$8001          ; HL = $8001; // &vischar[0].byte1;
 $AFE2 LD B,$08             ; B = 8; // 8 iterations
*$AFE4 BIT 7,(HL)           ; {do <% if (*HL & vischar_BYTE1_BIT7) goto next;
 $AFE6 JP NZ,$B0FE          ; // $8001, $8021, ...}
 $AFE9 PUSH BC              ;   PUSH BC
 $AFEA PUSH HL              ;   PUSH HL
 $AFEB LD A,$0E             ; {  HL += 0x0E; // $800F etc. - y axis position
 $AFED ADD A,L              ;
 $AFEE LD L,A               ; }
; --------
 $AFEF LD C,(HL)            ; {  C = *HL++;
 $AFF0 INC L                ; }
 $AFF1 LD B,(HL)            ;   B = *HL;
 $AFF2 EX DE,HL             ;   EX DE,HL
 $AFF3 LD HL,($81A4)        ;   HL = saved_Y;
 $AFF6 LD A,$04             ; {  BC += 4;
 $AFF8 ADD A,C              ;
 $AFF9 LD C,A               ;
 $AFFA JR NC,$AFFE          ;
 $AFFC INC B                ;
 $AFFD AND A                ; }
*$AFFE SBC HL,BC            ; {  if (HL != BC) <%
 $B000 JR Z,$B014           ; }
 $B002 JP NC,$B0FC          ;     if (HL > BC) goto pop_next;
 $B005 SUB $08              ; {    BC -= 8; // ie -4 over original
 $B007 LD C,A               ;
 $B008 JR NC,$B00C          ;
 $B00A DEC B                ;
 $B00B AND A                ; }
*$B00C LD HL,($81A4)        ; {    HL = saved_Y;
 $B00F SBC HL,BC            ; }
 $B011 JP C,$B0FC           ;     if (HL < BC) goto pop_next; %>
*$B014 EX DE,HL             ;   EX DE,HL
 $B015 INC L                ;   HL++;
; --------
 $B016 LD C,(HL)            ; {  C = *HL++;
 $B017 INC L                ; }
 $B018 LD B,(HL)            ;   B = *HL;
 $B019 EX DE,HL             ;   EX DE,HL
 $B01A LD HL,($81A6)        ;   HL = saved_X;
 $B01D LD A,$04             ; {  BC += 4;
 $B01F ADD A,C              ;
 $B020 LD C,A               ;
 $B021 JR NC,$B025          ;
 $B023 INC B                ;
 $B024 AND A                ; }
*$B025 SBC HL,BC            ; {  if (HL != BC) <%
 $B027 JR Z,$B03B           ; }
 $B029 JP NC,$B0FC          ;     if (HL > BC) goto pop_next;
 $B02C SUB $08              ; {    BC -= 8;
 $B02E LD C,A               ;
 $B02F JR NC,$B033          ;
 $B031 DEC B                ;
 $B032 AND A                ; }
*$B033 LD HL,($81A6)        ; {    HL = saved_X;
 $B036 SBC HL,BC            ; }
 $B038 JP C,$B0FC           ;     if (HL < BC) goto pop_next; %>
*$B03B EX DE,HL             ;   EX DE,HL
 $B03C INC L                ;   HL++;
; --------
 $B03D LD C,(HL)            ;   C = *HL;
 $B03E LD A,($81A8)         ; {  A = saved_VO - C;
 $B041 SUB C                ; }
 $B042 JR NC,$B046          ;   if (A < 0) <%
 $B044 NEG                  ;     A = -A; %>
*$B046 CP $18               ; {  if (A >= 24) goto pop_next;
 $B048 JP NC,$B0FC          ; }
 $B04B LD A,(IY+$01)        ; {  A = IY[1] & 0x0F; // sampled IY=$8020, $8040,
 $B04E AND $0F              ; $8060, $8000 // but this is *not*
                            ; vischar_BYTE1_MASK, which is 0x1F}
 $B050 CP $01               ; {  if (A == 1) <%
 $B052 JR NZ,$B071          ; }
 $B054 POP HL               ;     POP HL
 $B055 PUSH HL              ;     PUSH HL // sampled HL=$8021, $8041, $8061,
                            ; $80A1
 $B056 DEC L                ;     HL--;
 $B057 LD A,L               ; {    if ((HL & 0xFF) == 0) <% // ie. $8000
 $B058 AND A                ;
 $B059 JR NZ,$B071          ; }
 $B05B LD A,($AF8E)         ; {      if (bribed_character == IY[0]) <%
 $B05E CP (IY+$00)          ;
 $B061 JR NZ,$B068          ; }
 $B063 CALL $B107           ;         accept_bribe(); %>
 $B066 JR $B071             ;       else <%
*$B068 POP HL               ;         POP HL
 $B069 POP BC               ;         POP BC
 $B06A PUSH IY              ; {        HL = IY + 1;
 $B06C POP HL               ;
 $B06D INC L                ; }
 $B06E JP $CB98             ;         solitary(); return; // exit via %> %> %>
*$B071 POP HL               ;   POP HL
 $B072 DEC L                ;   HL--;
 $B073 LD A,(HL)            ;   A = *HL; // sampled HL = $80C0, $8040, $8000,
                            ; $8020, $8060 // vischar_BYTE0
 $B074 CP $1A               ; {  if (A >= 26) <%
 $B076 JR C,$B0B9           ; }
 $B078 PUSH HL              ;     PUSH HL
 $B079 EX AF,AF'            ;     -
 $B07A LD A,$11             ; {    HL += 17;
 $B07C ADD A,L              ;
 $B07D LD L,A               ; }
 $B07E EX AF,AF'            ;     -
 $B07F LD BC,$0723          ;     B = 7; C = 35;
 $B082 CP $1C               ;     tmpA = A;
 $B084 LD A,(IY+$0E)        ;     A = IY[14]; // interleaved
 $B087 JR NZ,$B08F          ;     if (tmpA == 28) <%
 $B089 DEC L                ; {      L -= 2;
 $B08A DEC L                ; }
 $B08B LD C,$36             ;       C = 54;
 $B08D XOR $01              ;       A ^= 1; %>
*$B08F AND A                ; {    if (A == 0) <%
 $B090 JR NZ,$B09D          ; }
 $B092 LD A,(HL)            ;       A = *HL;
 $B093 CP C                 ; {      if (A != C) <%
 $B094 JR Z,$B0B8           ; }
 $B096 JR C,$B09A           ; {        if (A >= C) (*HL) -= 2; // decrement by
 $B098 DEC (HL)             ; -2 then execute +1 anyway to avoid branch
 $B099 DEC (HL)             ; }
*$B09A INC (HL)             ;         (*HL)++; %> %>
 $B09B JR $B0B8             ; {    else if (A == 1) <%
*$B09D CP $01               ;
 $B09F JR NZ,$B0A9          ; }
 $B0A1 LD A,C               ; {      A = C + B;
 $B0A2 ADD A,B              ; }
 $B0A3 CP (HL)              ; {      if (A != *HL) (*HL)++; %>
 $B0A4 JR Z,$B0B8           ;
 $B0A6 INC (HL)             ; }
 $B0A7 JR $B0B8             ; {    else if (A == 2) <%
*$B0A9 CP $02               ;
 $B0AB JR NZ,$B0B2          ; }
 $B0AD LD A,C               ; {      A = C - B;
 $B0AE SUB B                ; }
 $B0AF LD (HL),A            ;       *HL = A; %>
 $B0B0 JR $B0B8             ;     else <%
*$B0B2 LD A,C               ; {      A = C - B;
 $B0B3 SUB B                ; }
 $B0B4 CP (HL)              ; {      if (A != *HL) (*HL)--; %>
 $B0B5 JR Z,$B0B8           ;
 $B0B7 DEC (HL)             ; }
*$B0B8 POP HL               ;     POP HL
*$B0B9 POP BC               ;     POP BC %>
 $B0BA LD A,L               ; {  HL += 13;
 $B0BB ADD A,$0D            ;
 $B0BD LD L,A               ; }
 $B0BE LD A,(HL)            ; {  A = *HL & vischar_BYTE13_MASK; // sampled HL =
 $B0BF AND $7F              ; $806D, $804D, $802D, $808D, $800D}
 $B0C1 JR Z,$B0DB           ;   if (A) <%
 $B0C3 INC L                ;     HL++;
 $B0C4 LD A,(HL)            ; {    A = *HL ^ 2;
 $B0C5 XOR $02              ; }
 $B0C7 CP (IY+$0E)          ; {    if (A != IY[14]) <%
 $B0CA JR Z,$B0DB           ; }
 $B0CC LD (IY+$0D),$80      ;       IY[13] = 0x80;
*$B0D0 LD A,(IY+$07)        ; {      IY[7] = (IY[7] & vischar_BYTE7_MASK_HI) |
 $B0D3 AND $F0              ; 5; // preserve flags and set 5? // sampled IY =
 $B0D5 OR $05               ; $8000, $80E0
 $B0D7 LD (IY+$07),A        ; }
 $B0DA RET NZ               ;       if (!Z) return; /* odd */ %> %>
*$B0DB LD C,(IY+$0E)        ; {  BC = IY[14]; // sampled IY = $8000, $8040,
 $B0DE LD B,$00             ; $80E0}
 $B0E0 LD HL,$B0F8          ; {  IY[13]  = four_bytes_B0F8[BC];
 $B0E3 ADD HL,BC            ;
 $B0E4 LD A,(HL)            ;
 $B0E5 LD (IY+$0D),A        ; }
 $B0E8 BIT 0,C              ; {  if ((C & 1) == 0) <%
 $B0EA JR NZ,$B0F2          ; }
 $B0EC RES 5,(IY+$07)       ;     IY[7] &= ~vischar_BYTE7_BIT5;
 $B0F0 JR $B0D0             ;     goto $B0D0; %>
*$B0F2 SET 5,(IY+$07)       ;   else <% IY[7] |= vischar_BYTE7_BIT5;
 $B0F6 JR $B0D0             ;     goto $B0D0; %>
; (<- collision)
 $B0F8 DEFB $85,$84,$87,$88 ; four_bytes_B0F8
*$B0FC POP HL               ;   pop_next: POP HL
 $B0FD POP BC               ;   POP BC
*$B0FE LD A,L               ; {  next: HL += 32;
 $B0FF ADD A,$20            ;
 $B101 LD L,A               ; }
 $B102 DEC B                ; {%> while (--B);
 $B103 JP NZ,$AFE4          ; }
 $B106 RET                  ; return;

; accept_bribe
;
; Used by the routines at #R$AFDF and #R$CA81.
; .
; Character accepts the bribe.
;
; I:IY Pointer to visible character.
c$B107 CALL $A0E9      ; increase_morale_by_10_score_by_50();
 $B10A LD (IY+$01),$00 ; IY[1] = 0;
 $B10E PUSH IY         ; {HL = IY + 2;
 $B110 POP HL          ;
 $B111 INC L           ;
 $B112 INC L           ; }
 $B113 CALL $CB23      ; sub_CB23();
 $B116 LD DE,$8215     ; DE = &items_held[0];
 $B119 LD A,(DE)       ; {if (*DE != item_BRIBE && *++DE != item_BRIBE) return;
 $B11A CP $05          ; // have no bribes
 $B11C JR Z,$B123      ;
 $B11E INC DE          ;
 $B11F LD A,(DE)       ;
 $B120 CP $05          ;
 $B122 RET NZ          ; }
; We have a bribe.
*$B123 LD A,$FF        ; {*DE = item_NONE;
 $B125 LD (DE),A       ; }
 $B126 AND $3F         ; {item_structs[item_BRIBE].room =
 $B128 LD ($76EC),A    ; itemstruct_ROOM_MASK;}
 $B12B CALL $7C33      ; draw_all_items();
 $B12E LD B,$07        ; B = 7; // 7 iterations
 $B130 LD HL,$8020     ; HL = $8020; // iterate over non-player characters
*$B133 LD A,(HL)       ; {do <% if (HL[0] <= character_19_GUARD_DOG_4) <% //
 $B134 CP $14          ; Hostile characters only.
 $B136 JR NC,$B13C     ; }
 $B138 INC L           ; {    HL[1] = vischar_BYTE1_BIT2; %> // character has
 $B139 LD (HL),$04     ; taken bribe?
 $B13B DEC L           ; }
*$B13C LD A,L          ; {  HL += 32;
 $B13D ADD A,$20       ;
 $B13F LD L,A          ; }
 $B140 DJNZ $B133      ; %> while (--B);
 $B142 LD B,$11        ; {queue_message_for_display(message_HE_TAKES_THE_BRIBE);
 $B144 CALL $7D15      ; }
 $B147 LD B,$12        ; queue_message_for_display(message_AND_ACTS_AS_DECOY);
 $B149 JP $7D15        ; return;

; bounds_check
;
; Used by the routines at #R$AF8F and #R$C4E0.
; .
; Outdoor bounds detection?
;
; I:IY Pointer to visible character block.
c$B14C LD A,($68A0)  ; {if (room_index) <% interior_bounds_check(); return; %>
 $B14F AND A         ;
 $B150 JP NZ,$B29F   ; }
 $B153 LD B,$18      ; B = 24; // 24 iterations (includes walls and fences)
 $B155 LD DE,$B53E   ; DE = &walls[0];
*$B158 PUSH BC       ; do <% -
 $B159 PUSH DE       ;   -
 $B15A LD A,(DE)     ; {  -
 $B15B CALL $B1C7    ; }
 $B15E INC BC        ; {  if ((saved_Y >= DE[0] * 8 + 2) &&
 $B15F INC BC        ;
 $B160 LD HL,($81A4) ;
 $B163 SBC HL,BC     ;
 $B165 JR C,$B1BA    ; }
 $B167 INC DE        ; {    -
 $B168 LD A,(DE)     ;
 $B169 CALL $B1C7    ; }
 $B16C INC BC        ; {      (saved_Y <  DE[1] * 8 + 4) &&
 $B16D INC BC        ;
 $B16E INC BC        ;
 $B16F INC BC        ;
 $B170 LD HL,($81A4) ;
 $B173 SBC HL,BC     ;
 $B175 JR NC,$B1BA   ; }
 $B177 INC DE        ; {    -
 $B178 LD A,(DE)     ;
 $B179 CALL $B1C7    ; }
 $B17C LD HL,($81A6) ; {      (saved_X >= DE[2] * 8)     &&
 $B17F SBC HL,BC     ;
 $B181 JR C,$B1BA    ; }
 $B183 INC DE        ; {    -
 $B184 LD A,(DE)     ;
 $B185 CALL $B1C7    ; }
 $B188 INC BC        ; {      (saved_X <  DE[3] * 8 + 4) &&
 $B189 INC BC        ;
 $B18A INC BC        ;
 $B18B INC BC        ;
 $B18C LD HL,($81A6) ;
 $B18F SBC HL,BC     ;
 $B191 JR NC,$B1BA   ; }
 $B193 INC DE        ; {    -
 $B194 LD A,(DE)     ;
 $B195 CALL $B1C7    ; }
 $B198 LD HL,($81A8) ; {      (saved_VO >= DE[4] * 8)     &&
 $B19B SBC HL,BC     ;
 $B19D JR C,$B1BA    ; }
 $B19F INC DE        ; {    -
 $B1A0 LD A,(DE)     ;
 $B1A1 CALL $B1C7    ; }
 $B1A4 INC BC        ; {      (saved_VO <  DE[5] * 8 + 2)) <%
 $B1A5 INC BC        ;
 $B1A6 LD HL,($81A8) ;
 $B1A9 SBC HL,BC     ;
 $B1AB JR NC,$B1BA   ; }
; Found it.
 $B1AD POP DE        ;     -
 $B1AE POP BC        ;     -
 $B1AF LD A,(IY+$07) ; {    IY[7] ^= vischar_BYTE7_BIT5; // sampled IY = $80A0,
 $B1B2 XOR $20       ; $8080, $8060
 $B1B4 LD (IY+$07),A ; }
 $B1B7 OR $01        ;     A |= 1; // return NZ
 $B1B9 RET           ;     return; %>
*$B1BA POP DE        ;   -
 $B1BB POP BC        ;   -
 $B1BC LD HL,$0006   ; {  DE += 6;
 $B1BF ADD HL,DE     ;
 $B1C0 EX DE,HL      ; }
 $B1C1 DEC B         ; {%> while (--B);
 $B1C2 JP NZ,$B158   ; }
 $B1C5 AND B         ; A &= B; // return Z
 $B1C6 RET           ; return;

; multiply_by_8
;
; Used by the routines at #R$B14C, #R$C4E0, #R$CA11, #R$CA49 and #R$DBEB.
;
; A  Argument.
; BC Result of (A << 3).
c$B1C7 LD B,$00      ; B = 0;
 $B1C9 ADD A,A       ; A <<= 1;
 $B1CA RL B          ; B = (B << 1) + carry;
 $B1CC ADD A,A       ; A <<= 1;
 $B1CD RL B          ; B = (B << 1) + carry;
 $B1CF ADD A,A       ; A <<= 1;
 $B1D0 RL B          ; B = (B << 1) + carry;
 $B1D2 LD C,A        ; C = A;
 $B1D3 RET           ; return;

; is_door_open
;
; Used by the routines at #R$B1F5 and #R$B32D.
;
; O:F Z set if door open.
c$B1D4 LD E,$7F      ; {C = current_door & gates_and_doors_MASK;
 $B1D6 LD A,($68A1)  ;
 $B1D9 AND E         ;
 $B1DA LD C,A        ; }
 $B1DB LD HL,$F05D   ; HL = &gates_and_doors[0];
 $B1DE LD B,$09      ; B = 9; // 9 iterations
*$B1E0 LD A,(HL)     ; {do <% if (*HL & gates_and_doors_MASK == C) <%
 $B1E1 AND E         ;
 $B1E2 CP C          ;
 $B1E3 JR NZ,$B1F0   ; }
 $B1E5 BIT 7,(HL)    ; {    if ((*HL & gates_and_doors_LOCKED) == 0) return; //
 $B1E7 RET Z         ; unlocked
 $B1E8 LD B,$05      ; }
 $B1EA CALL $7D15    ; queue_message_for_display(message_THE_DOOR_IS_LOCKED);
 $B1ED OR $01        ;     A |= 1; // set NZ
 $B1EF RET           ;     return; %>
*$B1F0 INC HL        ;   HL++;
 $B1F1 DJNZ $B1E0    ; %> while (--B);
 $B1F3 AND B         ; A &= B; // set Z (B is zero)
 $B1F4 RET           ; return;

; door_handling
;
; Used by the routine at #R$AF8F.
c$B1F5 LD A,($68A0)  ; A = room_index;
 $B1F8 AND A         ; {if (A) goto door_handling_interior; // exit via?
 $B1F9 JP NZ,$B32D   ; }
 $B1FC LD HL,$78D6   ; HL = &door_positions[0];
 $B1FF LD E,(IY+$0E) ; E = IY[14];
 $B202 LD A,E        ; {if (E >= 2) HL = &door_position[1];
 $B203 CP $02        ;
 $B205 JR C,$B20A    ;
 $B207 LD HL,$78DA   ; }
*$B20A LD D,$03      ; D = 3;  // mask
 $B20C LD B,$10      ; B = 16;
*$B20E LD A,(HL)     ; {do <% A = *HL & D;
 $B20F AND D         ; }
 $B210 CP E          ; {  if (A == E) <%
 $B211 JR NZ,$B21E   ; }
 $B213 PUSH BC       ;     PUSH BC
 $B214 PUSH HL       ;     PUSH HL
 $B215 PUSH DE       ;     PUSH DE
 $B216 CALL $B252    ;     door_in_range();
 $B219 POP DE        ;     POP DE
 $B21A POP HL        ;     POP HL
 $B21B POP BC        ;     POP BC
 $B21C JR NC,$B229   ;     if (!C) goto found; %>
*$B21E LD A,$08      ; {  HL += 8;
 $B220 ADD A,L       ;
 $B221 LD L,A        ;
 $B222 JR NC,$B225   ;
 $B224 INC H         ; }
*$B225 DJNZ $B20E    ; %> while (--B);
 $B227 AND B         ; A &= B; // set Z (B is zero)
 $B228 RET           ; return;
*$B229 LD A,$10      ; {found: A = 16 - B;
 $B22B SUB B         ; }
 $B22C LD ($68A1),A  ; current_door = A;
 $B22F EXX           ; EXX
 $B230 CALL $B1D4    ; is_door_open();
 $B233 RET NZ        ; if (!Z) return; // door was locked
 $B234 EXX           ; EXX
 $B235 LD A,(HL)     ; {IY[28] = (*HL >> 2) & 0x3F; // sampled HL = $792E (in
 $B236 RRA           ; door_positions[])
 $B237 RRA           ;
 $B238 AND $3F       ;
 $B23A LD (IY+$1C),A ; }
 $B23D LD A,(HL)     ; {if ((*HL & 3) >= 2) <%
 $B23E AND $03       ;
 $B240 CP $02        ;
 $B242 JR NC,$B24C   ; }
 $B244 INC HL        ; {  HL += 5;
 $B245 INC HL        ;
 $B246 INC HL        ;
 $B247 INC HL        ;
 $B248 INC HL        ; }
 $B249 JP $68A2      ;   transition(); return; %> // seems to goto reset then
                     ; jump back to main (icky)
*$B24C DEC HL        ; {else <% HL -= 3;
 $B24D DEC HL        ;
 $B24E DEC HL        ; }
 $B24F JP $68A2      ;   transition(); return; %>

; door_in_range
;
; Used by the routines at #R$B1F5 and #R$B4D0.
; .
; (saved_Y,saved_X) within (-3,+3) of HL[1..] scaled << 2
;
; I:HL Pointer to (byte before) coord byte pair.
; O:HL Corrupted.
; O:F  C/NC if nomatch/match.
c$B252 INC HL        ; {A = HL[1];
 $B253 LD A,(HL)     ; }
 $B254 EX DE,HL      ; -
 $B255 CALL $B295    ; multiply_by_4();
 $B258 LD A,C        ; {if (saved_Y < BC - 3 || saved_Y >= BC + 3) return; //
 $B259 SUB $03       ; with C set
 $B25B LD C,A        ;
 $B25C JR NC,$B25F   ;
 $B25E DEC B         ;
*$B25F LD HL,($81A4) ;
 $B262 SBC HL,BC     ;
 $B264 RET C         ;
 $B265 LD A,$06      ;
 $B267 ADD A,C       ;
 $B268 LD C,A        ;
 $B269 JR NC,$B26C   ;
 $B26B INC B         ;
*$B26C LD HL,($81A4) ;
 $B26F SBC HL,BC     ;
 $B271 CCF           ;
 $B272 RET C         ; }
 $B273 EX DE,HL      ; -
 $B274 INC HL        ; {A = HL[2];
 $B275 LD A,(HL)     ; }
 $B276 CALL $B295    ; multiply_by_4();
 $B279 EX DE,HL      ; -
 $B27A LD A,C        ; {if (saved_X < BC - 3 || saved_X >= BC + 3) return; //
 $B27B SUB $03       ; with C set
 $B27D LD C,A        ;
 $B27E JR NC,$B281   ;
 $B280 DEC B         ;
*$B281 LD HL,($81A6) ;
 $B284 SBC HL,BC     ;
 $B286 RET C         ;
 $B287 LD A,$06      ;
 $B289 ADD A,C       ;
 $B28A LD C,A        ;
 $B28B JR NC,$B28E   ;
 $B28D INC B         ;
*$B28E LD HL,($81A6) ;
 $B291 SBC HL,BC     ;
 $B293 CCF           ; }
 $B294 RET           ; return; // C not set

; multiply_by_4
;
; Used by the routines at #R$68A2 and #R$B252.
; .
; Multiplies A by 4, returning the result in BC.
; .
; Used by the routines at #R$68A2, #R$B252 and #R$C918.
;
; I:A  Argument.
; O:BC Result of (A << 2).
c$B295 LD B,$00      ; B = 0;
 $B297 ADD A,A       ; A <<= 1;
 $B298 RL B          ; B = (B << 1) + carry;
 $B29A ADD A,A       ; A <<= 1;
 $B29B RL B          ; B = (B << 1) + carry;
 $B29D LD C,A        ; C = A;
 $B29E RET           ; return;

; interior_bounds_check
;
; Used by the routine at #R$B14C.
; .
; Check the character is inside of bounds, when indoors.
;
; I:IY Pointer to visible character.
; O:A  Corrupted.
; O:BC Corrupted.
; O:F  Z clear if boundary hit, set otherwise.
; O:HL Corrupted.
c$B29F LD A,($81BE)  ; {BC = &roomdef_bounds[roomdef_bounds_index];
 $B2A2 ADD A,A       ;
 $B2A3 ADD A,A       ;
 $B2A4 LD BC,$6B85   ;
 $B2A7 ADD A,C       ;
 $B2A8 LD C,A        ;
 $B2A9 JR NC,$B2AC   ;
 $B2AB INC B         ; }
*$B2AC LD HL,$81A4   ; HL = &saved_Y;
 $B2AF LD A,(BC)     ; A = *BC;
 $B2B0 CP (HL)       ; {if (A < *HL) goto stop;
 $B2B1 JR C,$B2E7    ; }
 $B2B3 INC BC        ; {A = *++BC + 4;
 $B2B4 LD A,(BC)     ;
 $B2B5 ADD A,$04     ; }
 $B2B7 CP (HL)       ; {if (A >= *HL) goto stop;
 $B2B8 JR NC,$B2E7   ; }
 $B2BA INC HL        ; {HL += 2;
 $B2BB INC HL        ; }
; Bug: This instruction is stray code. It's incremented but never used.
 $B2BC INC DE        ; DE++;
 $B2BD INC BC        ; {A = *++BC - 4;
 $B2BE LD A,(BC)     ;
 $B2BF SUB $04       ; }
 $B2C1 CP (HL)       ; {if (A < *HL) goto stop;
 $B2C2 JR C,$B2E7    ; }
 $B2C4 INC BC        ; {A = *++BC;
 $B2C5 LD A,(BC)     ; }
 $B2C6 CP (HL)       ; {if (A >= *HL) goto stop;
 $B2C7 JR NC,$B2E7   ; }
 $B2C9 LD HL,$81BF   ; HL = &roomdef_object_bounds[0];
 $B2CC LD B,(HL)     ; {B = *HL; // iterations
 $B2CD LD A,B        ; }
 $B2CE AND A         ; {if (B == 0) return;
 $B2CF RET Z         ; }
 $B2D0 INC HL        ; HL++;
*$B2D1 PUSH BC       ; do <% PUSH BC
 $B2D2 PUSH HL       ;     PUSH HL
 $B2D3 LD DE,$81A4   ;     DE = &saved_Y;
 $B2D6 LD B,$02      ;     B = 2; // 2 iterations
*$B2D8 LD A,(DE)     ;     do <% A = *DE;
 $B2D9 CP (HL)       ; {    if (A < HL[0] || A >= HL[1]) goto next; // next
 $B2DA JR C,$B2F2    ; outer loop iteration
 $B2DC INC HL        ;
 $B2DD CP (HL)       ;
 $B2DE JR NC,$B2F2   ; }
 $B2E0 INC DE        ; {    DE += 2;
 $B2E1 INC DE        ; }
 $B2E2 INC HL        ;     HL += 2; // increment moved - hope it's still
                     ; correct
 $B2E3 DJNZ $B2D8    ;   %> while (--B);
; Found.
 $B2E5 POP HL        ;   POP HL
 $B2E6 POP BC        ;   POP BC
*$B2E7 LD A,(IY+$07) ; {stop: IY[7] ^= vischar_BYTE7_BIT5; // stop character?
 $B2EA XOR $20       ;
 $B2EC LD (IY+$07),A ; }
 $B2EF OR $01        ;   A |= 1;
 $B2F1 RET           ;   return; // return NZ
; Next iteration.
*$B2F2 POP HL        ; next:  POP HL
 $B2F3 LD DE,$0004   ; {  HL += 4;
 $B2F6 ADD HL,DE     ; }
 $B2F7 POP BC        ;   POP BC
 $B2F8 DJNZ $B2D1    ; %> while (--B);
; Not found.
 $B2FA AND B         ; A &= B; // B is zero here
 $B2FB RET           ; return; // return Z

; reset_outdoors
;
; Used by the routines at #R$68A2 and #R$9DE5.
; .
; Reset the hero's position, redraw the scene, then zoombox it onto the screen.
c$B2FC LD HL,$8000   ; HL = $8000;
 $B2FF CALL $B71B    ; reset_position(); // reset player
 $B302 LD HL,$8018   ; HL = $8018;
 $B305 LD A,(HL)     ; {A = *HL++;
 $B306 INC L         ; }
 $B307 LD C,(HL)     ; C = *HL;
 $B308 CALL $E555    ; divide_by_8(C,A);
 $B30B SUB $0B       ; {map_position[0] = A - 11;
 $B30D LD ($81BB),A  ; }
 $B310 INC L         ; HL++;
 $B311 LD A,(HL)     ; {A = *HL++;
 $B312 INC L         ; }
 $B313 LD C,(HL)     ; C = *HL;
 $B314 CALL $E555    ; divide_by_8(C,A);
 $B317 SUB $06       ; {map_position[1] = A - 6;
 $B319 LD ($81BC),A  ; }
 $B31C XOR A         ; {room_index = room_NONE;
 $B31D LD ($68A0),A  ; }
 $B320 CALL $A7C9    ; get_supertiles();
 $B323 CALL $A8A2    ; supertile_plot_all();
 $B326 CALL $6939    ; setup_movable_items();
 $B329 CALL $ABA0    ; zoombox();
 $B32C RET           ; return;

; door_handling_interior
;
; Used by the routine at #R$B1F5.
; .
; Door related stuff.
;
; I:IY Pointer to visible character.
c$B32D LD HL,$81D6   ; HL = &door_related;
*$B330 LD A,(HL)     ; for (;;) <% A = *HL;
 $B331 CP $FF        ; {  if (A == 255) return;
 $B333 RET Z         ; }
 $B334 EXX           ;   // EXX
 $B335 LD ($68A1),A  ;   current_door = A;
 $B338 CALL $6A12    ;   get_door_position();
 $B33B LD A,(HL)     ;   A = *HLdash;
 $B33C LD C,A        ;   Cdash = A;
 $B33D AND $03       ; {  Bdash = A & 3;
 $B33F LD B,A        ; }
 $B340 LD A,(IY+$0E) ; {  if (IY[14] & 3 != Bdash) goto next;
 $B343 AND $03       ;
 $B345 CP B          ;
 $B346 JR NZ,$B383   ; }
 $B348 INC HL        ;   HLdash++;
 $B349 EX DE,HL      ;   -
 $B34A LD HL,$81A4   ;   DEdash = &saved_Y;
 $B34D LD B,$02      ;   Bdash = 2; // 2 iterations
*$B34F LD A,(DE)     ; {  do <% A = *HLdash - 3;
 $B350 SUB $03       ; }
 $B352 CP (HL)       ; {    if (A >= *DEdash || A + 6 < *DEdash) goto next; //
 $B353 JR NC,$B383   ; -3 .. +3
 $B355 ADD A,$06     ;
 $B357 CP (HL)       ;
 $B358 JR C,$B383    ; }
 $B35A INC HL        ; {    DEdash += 2;
 $B35B INC HL        ; }
 $B35C INC DE        ;     HLdash++;
 $B35D DJNZ $B34F    ;   %> while (--Bdash);
 $B35F INC DE        ;   HLdash++;
 $B360 EX DE,HL      ;   -
 $B361 PUSH HL       ;   PUSH HLdash
 $B362 PUSH BC       ;   PUSH BCdash
 $B363 CALL $B1D4    ;   is_door_open();
 $B366 POP BC        ;   POP BCdash
 $B367 POP HL        ;   POP HLdash
 $B368 RET NZ        ;   if (!Z) return; // door was closed
 $B369 LD A,C        ; {  IY[28] = (Cdash >> 2) & 0x3F;
 $B36A RRA           ;
 $B36B RRA           ;
 $B36C AND $3F       ;
 $B36E LD (IY+$1C),A ; }
 $B371 INC HL        ;   HLdash++;
 $B372 LD A,($68A1)  ; {  if (current_door & (1<<7)) <% HLdash -= 8; %> //
 $B375 BIT 7,A       ; unsure if this flag is gates_and_doors_LOCKED
 $B377 JR Z,$B380    ;
 $B379 LD A,L        ;
 $B37A SUB $08       ;
 $B37C LD L,A        ;
 $B37D JR NC,$B380   ;
 $B37F DEC H         ; }
*$B380 JP $68A2      ;   transition(); return; // exit via // with banked
                     ; registers...
*$B383 EXX           ;   next: -
 $B384 INC HL        ;   HL++;
 $B385 JR $B330      ; %>

; action_red_cross_parcel
;
; Player has tried to open the red cross parcel.
c$B387 LD A,$3F      ; {item_structs[item_RED_CROSS_PARCEL].room =
 $B389 LD ($771D),A  ; itemstruct_ROOM_MASK; // room_NONE & 0x3F;}
 $B38C LD HL,$8215   ; HL = &items_held;
 $B38F LD A,$0C      ; {if (*HL != item_RED_CROSS_PARCEL) HL++; // one or the
 $B391 CP (HL)       ; other must be a red cross parcel item
 $B392 JR Z,$B395    ;
 $B394 INC HL        ; }
*$B395 LD (HL),$FF   ; *HL = item_NONE; // no longer have parcel (we assume one
                     ; slot or the other has it)
 $B397 CALL $7C33    ; draw_all_items();
 $B39A LD A,($A263)  ; A = red_cross_parcel_current_contents;
 $B39D CALL $7BB5    ; drop_item_A();
 $B3A0 LD B,$0C      ; {queue_message_for_display(message_YOU_OPEN_THE_BOX);
 $B3A2 CALL $7D15    ; }
 $B3A5 JP $A0E9      ; increase_morale_by_10_score_by_50(); return; // exit via

; action_bribe
;
; Player has tried to bribe a prisoner.
; .
; This searches visible characters only.
c$B3A8 LD HL,$8020   ; HL = $8020; // iterate over non-player characters
 $B3AB LD B,$07      ; B = 7; // 7 iterations
*$B3AD LD A,(HL)     ; do <% A = *HL;
 $B3AE CP $FF        ; {  if ((A != character_NONE) && (A >=
 $B3B0 JR Z,$B3B6    ; character_20_PRISONER_1)) goto found;
 $B3B2 CP $14        ;
 $B3B4 JR NC,$B3BD   ; }
*$B3B6 LD A,$20      ; {  HL += 32; // sizeof a character struct
 $B3B8 ADD A,L       ;
 $B3B9 LD L,A        ; }
 $B3BA DJNZ $B3AD    ; %> while (--B);
 $B3BC RET           ; return;
*$B3BD LD ($AF8E),A  ; found: bribed_character = A;
 $B3C0 INC L         ; {HL[1] = vischar_BYTE1_PERSUE; // $8021 etc. // flag
 $B3C1 LD (HL),$01   ; }
 $B3C3 RET           ; return;

; action_poison
c$B3C4 LD HL,($8215) ; Load items_held.
 $B3C7 LD A,$07      ; Load item_FOOD.
 $B3C9 CP L          ; Is 'low' slot item_FOOD?
 $B3CA JR Z,$B3CE    ; Yes - goto have_food.
 $B3CC CP H          ; Is 'high' slot item_FOOD?
 $B3CD RET NZ        ; No - return.
*$B3CE LD HL,$76F9   ; have_food: (test a character flag?)
 $B3D1 BIT 5,(HL)    ; Bit 5 set?
 $B3D3 RET NZ        ; Yes - return.
 $B3D4 SET 5,(HL)    ; Set bit 5.
 $B3D6 LD A,$43      ; {Set item_attribute: FOOD to bright-purple/black.
 $B3D8 LD ($DD70),A  ; }
 $B3DB CALL $7C33    ; draw_all_items()
 $B3DE JP $A0E9      ; goto increase_morale_by_10_score_by_50

; action_uniform
c$B3E1 LD HL,$8015   ; HL = $8015; // current character sprite set
 $B3E4 LD DE,$CEA6   ; DE = &sprite_guard_tl_4;
 $B3E7 LD A,(HL)     ; {if (*HL == E) return; // cheap equality test // already
 $B3E8 CP E          ; in uniform
 $B3E9 RET Z         ; }
 $B3EA LD A,($68A0)  ; {if (room_index >= room_29_secondtunnelstart) return; //
 $B3ED CP $1D        ; can't don uniform when in a tunnel
 $B3EF RET NC        ; }
 $B3F0 LD (HL),E     ; *HL++ = E;
 $B3F1 INC L         ; {*HL = D;
 $B3F2 LD (HL),D     ; }
 $B3F3 JP $A0E9      ; increase_morale_by_10_score_by_50(); return;

; action_shovel
;
; Player has tried to use the shovel item.
c$B3F6 LD A,($68A0)  ; {if (room_index != room_50_blocked_tunnel) return;
 $B3F9 CP $32        ;
 $B3FB RET NZ        ; }
 $B3FC LD A,($7077)  ; {if (roomdefn_50_blockage == 255) return; // blockage
 $B3FF CP $FF        ; already cleared
 $B401 RET Z         ; }
 $B402 LD A,$FF      ; {roomdefn_50_blockage = 255;
 $B404 LD ($7077),A  ; }
 $B407 INC A         ; {roomdefn_50_collapsed_tunnel_obj = 0; // remove
 $B408 LD ($708C),A  ; blockage graphic}
 $B40B CALL $6A35    ; setup_room();
 $B40E CALL $AB6B    ; choose_game_window_attributes();
 $B411 CALL $6B42    ; plot_interior_tiles();
 $B414 JP $A0E9      ; increase_morale_by_10_score_by_50(); return; // exit via

; action_wiresnips
c$B417 LD HL,$B589   ; HL = &fences[0] + 3;
 $B41A LD DE,$81B9   ; DE = &player_map_position.x;
 $B41D LD B,$04      ; B = 4; // iterations
*$B41F PUSH HL       ; do <% ...
 $B420 LD A,(DE)     ;   A = *DE;
 $B421 CP (HL)       ; {  if (A >= *HL) goto next;
 $B422 JR NC,$B433   ; }
 $B424 DEC HL        ;   HL--;
 $B425 CP (HL)       ; {  if (A < *HL) goto next;
 $B426 JR C,$B433    ; }
 $B428 DEC DE        ;   DE--; // &player_map_position.y;
 $B429 LD A,(DE)     ;   A = *DE;
 $B42A DEC HL        ;   HL--;
 $B42B CP (HL)       ; {  if (A == *HL) goto set_to_4;
 $B42C JR Z,$B462    ; }
 $B42E DEC A         ;   A--;
 $B42F CP (HL)       ; {  if (A == *HL) goto set_to_6;
 $B430 JR Z,$B46A    ; }
 $B432 INC DE        ;   DE++; // reset to Y
*$B433 POP HL        ; next: ...
 $B434 LD A,L        ; {  HL += 6; // array stride
 $B435 ADD A,$06     ;
 $B437 LD L,A        ;
 $B438 JR NC,$B43B   ;
 $B43A INC H         ; }
*$B43B DJNZ $B41F    ; %> while (--B);
 $B43D DEC DE        ; DE--; // &player_map_position.y;
 $B43E DEC HL        ; {HL -= 3; // pointing to $B59E
 $B43F DEC HL        ;
 $B440 DEC HL        ; }
 $B441 LD B,$03      ; B = 3; // iterations
*$B443 PUSH HL       ; do <% ...
 $B444 LD A,(DE)     ;   A = *DE;
 $B445 CP (HL)       ; {  if (A < *HL) goto next2;
 $B446 JR C,$B457    ; }
 $B448 INC HL        ;   HL++;
 $B449 CP (HL)       ; {  if (A >= *HL) goto next2;
 $B44A JR NC,$B457   ; }
 $B44C INC DE        ;   DE++;
 $B44D LD A,(DE)     ;   A = *DE;
 $B44E INC HL        ;   HL++;
 $B44F CP (HL)       ; {  if (A == *HL) goto set_to_5;
 $B450 JR Z,$B466    ; }
 $B452 DEC A         ;   A--;
 $B453 CP (HL)       ; {  if (A == *HL) goto set_to_7;
 $B454 JR Z,$B46E    ; }
 $B456 DEC DE        ;   DE--;
*$B457 POP HL        ; next2: ...
 $B458 LD A,L        ; {  HL += 6; // array stride
 $B459 ADD A,$06     ;
 $B45B LD L,A        ;
 $B45C JR NC,$B45F   ;
 $B45E INC H         ; }
*$B45F DJNZ $B443    ; %> while (--B);
 $B461 RET           ; {return;
*$B462 LD A,$04      ;
 $B464 JR $B470      ; }
*$B466 LD A,$05      ; {set_to_5: A = 5; goto action_wiresnips_tail; // crawl
 $B468 JR $B470      ; TR}
*$B46A LD A,$06      ; {set_to_6: A = 6; goto action_wiresnips_tail; // crawl
 $B46C JR $B470      ; BR}
*$B46E LD A,$07      ; set_to_7: A = 7;                             // crawl BL
*$B470 POP HL        ; action_wiresnips_tail: ...
 $B471 LD HL,$800E   ; {$800E = A;
 $B474 LD (HL),A     ; }
 $B475 DEC L         ; {$800D = 0x80;
 $B476 LD (HL),$80   ; }
 $B478 LD HL,$8001   ; {$8001 = vischar_BYTE1_CUTTING_WIRE;
 $B47B LD (HL),$02   ; }
 $B47D LD A,$0C      ; {$8013 = 12; // set vertical offset
 $B47F LD ($8013),A  ; }
 $B482 LD HL,$CE2E   ; {$8015 = sprite_prisoner_tl_4;
 $B485 LD ($8015),HL ; }
 $B488 LD A,($A12F)  ; {player_locked_out_until = game_counter + 96;
 $B48B ADD A,$60     ;
 $B48D LD ($A145),A  ; }
 $B490 LD B,$0B      ; {queue_message_for_display(message_CUTTING_THE_WIRE);
 $B492 JP $7D15      ; }

; action_lockpick
c$B495 CALL $B4D0    ; open_door();
 $B498 RET NZ        ; if (!Z) return; // wrong door?
 $B499 LD ($A143),HL ; ptr_to_door_being_lockpicked = HL;
 $B49C LD A,($A12F)  ; {player_locked_out_until = game_counter + 255;
 $B49F ADD A,$FF     ;
 $B4A1 LD ($A145),A  ; }
 $B4A4 LD HL,$8001   ; {($8001) = vischar_BYTE1_PICKING_LOCK;
 $B4A7 LD (HL),$01   ; }
 $B4A9 LD B,$0A      ; {queue_message_for_display(message_PICKING_THE_LOCK);
 $B4AB JP $7D15      ; }

; action_red_key
c$B4AE LD A,$16      ; A = room_22_redkey;
 $B4B0 JR $B4B8      ; goto action_key;

; action_yellow_key
c$B4B2 LD A,$0D      ; A = room_13_corridor;
 $B4B4 JR $B4B8      ; goto action_key;

; action_green_key
c$B4B6 LD A,$0E      ; A = room_14_torch;

; action_key
;
; Used by the routines at #R$B4AE and #R$B4B2.
; .
; Common end of action_*_key routines.
;
; I:A Room number the key is for.
c$B4B8 PUSH AF       ; PUSH AF
 $B4B9 CALL $B4D0    ; open_door();
 $B4BC POP BC        ; POP BC
 $B4BD RET NZ        ; if (!Z) return; // wrong door?
 $B4BE LD A,(HL)     ; {A = *HL & ~gates_and_doors_LOCKED; // mask off locked
 $B4BF AND $7F       ; flag}
 $B4C1 CP B          ; if (A != B) <%
 $B4C2 LD B,$07      ;   B = message_INCORRECT_KEY; %>
 $B4C4 JR NZ,$B4CD   ; else <%
 $B4C6 RES 7,(HL)    ;   *HL &= ~gates_and_doors_LOCKED; // clear the locked
                     ; flag
 $B4C8 CALL $A0E9    ;   increase_morale_by_10_score_by_50();
 $B4CB LD B,$06      ;   B = message_IT_IS_OPEN; %>
*$B4CD JP $7D15      ; queue_message_for_display(B);

; open_door
;
; Used by the routines at #R$B495 and #R$B4B8.
;
; O:HL Likely a pointer to ?
c$B4D0 LD A,($68A0)  ; {if (room_index == 0) goto outdoors; else goto indoors;
 $B4D3 AND A         ;
 $B4D4 JR Z,$B4D9    ;
 $B4D6 JP $B4FD      ; }
*$B4D9 LD B,$05      ; outdoors: B = 5; // 5 iterations (they must overlap)
 $B4DB LD HL,$F05D   ; HL = &gates_flags;
*$B4DE LD A,(HL)     ; {do <% A = *HL & ~gates_and_doors_LOCKED;
 $B4DF AND $7F       ; }
 $B4E1 EXX           ;   EXX
 $B4E2 CALL $6A12    ;   get_door_position();
 $B4E5 PUSH HL       ;   PUSH HL
 $B4E6 CALL $B252    ;   door_in_range();
 $B4E9 POP HL        ;   POP HL
 $B4EA JR NC,$B4FA   ;   if (!C) goto not_in_range;
 $B4EC INC HL        ; {  HL += 4;
 $B4ED INC HL        ;
 $B4EE INC HL        ;
 $B4EF INC HL        ; }
 $B4F0 CALL $B252    ;   door_in_range();
 $B4F3 JR NC,$B4FA   ;   if (!C) goto not_in_range;
 $B4F5 EXX           ;   EXX
 $B4F6 INC HL        ;   HL++;
 $B4F7 DJNZ $B4DE    ; %> while (--B);
 $B4F9 RET           ; return;
*$B4FA EXX           ; not_in_range: EXX
 $B4FB XOR A         ; A = 0;
 $B4FC RET           ; return;
*$B4FD LD HL,$F05F   ; indoors: HL = &door_flags;
 $B500 LD B,$08      ; B = 8; // 8 iterations
*$B502 LD A,(HL)     ; {do <% C = *HL & ~gates_and_doors_LOCKED;
 $B503 AND $7F       ;
 $B505 LD C,A        ; }
; Search door_related for C.
 $B506 LD DE,$81D6   ;   DE = &door_related;
*$B509 LD A,(DE)     ;   for (;;) <% A = *DE;
 $B50A CP $FF        ; {    if (A != 0xFF) <%
 $B50C JR Z,$B516    ; }
 $B50E AND $7F       ; {      if ((A & gates_and_doors_MASK) == C) goto found;
 $B510 CP C          ;
 $B511 JR Z,$B51C    ; }
 $B513 INC DE        ; {      DE++; %> %>
 $B514 JR $B509      ; }
*$B516 INC HL        ; next: HL++;
 $B517 DJNZ $B502    ; %> while (--B);
 $B519 OR $01        ; A |= 1;
 $B51B RET           ; return;
*$B51C LD A,(DE)     ; found: A = *DE;
 $B51D EXX           ; EXX
 $B51E CALL $6A12    ; get_door_position();
 $B521 INC HL        ; HL++;
 $B522 EX DE,HL      ; EX DE,HL
; Range check pattern (-3..+3).
 $B523 LD HL,$81A4   ; HL = &saved_Y;
 $B526 LD B,$02      ; B = 2; // 2 iterations
*$B528 LD A,(DE)     ; {do <% if (*HL <= *DE - 3 || *HL > *DE + 3) goto
 $B529 SUB $03       ; exx_next;
 $B52B CP (HL)       ;
 $B52C JR NC,$B53B   ;
 $B52E ADD A,$06     ;
 $B530 CP (HL)       ;
 $B531 JR C,$B53B    ; }
 $B533 INC HL        ; {  HL += 2;
 $B534 INC HL        ; }
 $B535 INC DE        ;   DE++;
 $B536 DJNZ $B528    ; %> while (--B);
 $B538 EXX           ; EXX
 $B539 XOR A         ; A = 0; // ok
 $B53A RET           ; return;
*$B53B EXX           ; exx_next: EXX
 $B53C JR $B516      ; goto next;

; walls
;
; Boundaries.
b$B53E DEFB $6A,$6E,$52,$62,$00,$0B
 $B544 DEFB $5E,$62,$52,$62,$00,$0B
 $B54A DEFB $52,$56,$52,$62,$00,$0B
 $B550 DEFB $3E,$5A,$6A,$80,$00,$30
 $B556 DEFB $34,$80,$72,$80,$00,$30
 $B55C DEFB $7E,$98,$5E,$80,$00,$30
 $B562 DEFB $82,$98,$5A,$80,$00,$30
 $B568 DEFB $86,$8C,$46,$80,$00,$0A
 $B56E DEFB $82,$86,$46,$4A,$00,$12
 $B574 DEFB $6E,$82,$46,$47,$00,$0A
 $B57A DEFB $6D,$6F,$45,$49,$00,$12
 $B580 DEFB $67,$69,$45,$49,$00,$12

; fences
;
; Boundaries.
b$B586 DEFB $46,$46,$46,$6A,$00,$08
 $B58C DEFB $3E,$3E,$3E,$6A,$00,$08
 $B592 DEFB $4E,$4E,$2E,$3E,$00,$08
 $B598 DEFB $68,$68,$2E,$45,$00,$08
 $B59E DEFB $3E,$68,$3E,$3E,$00,$08
 $B5A4 DEFB $4E,$68,$2E,$2E,$00,$08
 $B5AA DEFB $46,$67,$46,$46,$00,$08
 $B5B0 DEFB $68,$6A,$38,$3A,$00,$08
 $B5B6 DEFB $4E,$50,$2E,$30,$00,$08
 $B5BC DEFB $46,$48,$46,$48,$00,$08
 $B5C2 DEFB $46,$48,$5E,$60,$00,$08
 $B5C8 DEFB $69,$6D,$46,$49,$00,$08

; called_from_main_loop_9
;
; Used by the routines at #R$6939 and #R$9D78.
c$B5CE LD B,$08        ; B = 8;
 $B5D0 LD IY,$8000     ; IY = $8000;
*$B5D4 LD A,(IY+$01)   ; {do <% if (IY[1] == vischar_BYTE1_EMPTY_SLOT) goto
 $B5D7 CP $FF          ; next; // $8001 flags
 $B5D9 JP Z,$B6B4      ; }
 $B5DC PUSH BC         ;   PUSH BC
 $B5DD SET 7,(IY+$01)  ;   IY[1] |= vischar_BYTE1_BIT7;
 $B5E1 BIT 7,(IY+$0D)  ; {  if (IY[0x0D] & vischar_BYTE13_BIT7) goto
 $B5E5 JP NZ,$B6BE     ; byte13bit7set; // $800D}
 $B5E8 LD H,(IY+$0B)   ;   H = IY[0x0B];
 $B5EB LD L,(IY+$0A)   ;   L = IY[0x0A];
 $B5EE LD A,(IY+$0C)   ;   A = IY[0x0C];
 $B5F1 AND A           ; {  if (A >= 128) <%
 $B5F2 JP P,$B64F      ; }
 $B5F5 AND $7F         ;     A &= vischar_BYTE12_MASK;
 $B5F7 JP Z,$B6C2      ;     if (A == 0) goto snozzle;
 $B5FA INC A           ; {    HL += (A + 1) * 4 - 1;
 $B5FB ADD A,A         ;
 $B5FC ADD A,A         ;
 $B5FD LD C,A          ;
 $B5FE LD B,$00        ;
 $B600 ADD HL,BC       ;
 $B601 DEC HL          ; }
 $B602 LD A,(HL)       ;     A = *HL++;
 $B603 EX AF,AF'       ; {    EX AF,AF'
 $B604 INC HL          ; }
*$B605 EX DE,HL        ;     resume1: EX DE,HL
 $B606 LD L,(IY+$0F)   ;     L = IY[0x0F]; // Y axis
 $B609 LD H,(IY+$10)   ;     H = IY[0x10];
 $B60C LD A,(DE)       ;     A = *DE; // sampled DE = $CF9A, $CF9E, $CFBE,
                       ; $CFC2, $CFB2, $CFB6, $CFA6, $CFAA
                       ; (character_related_data)
 $B60D LD C,A          ;     C = A;
 $B60E AND $80         ;     A &= 0x80;
 $B610 JR Z,$B614      ; {    if (A) A = 0xFF;
 $B612 LD A,$FF        ; }
*$B614 LD B,A          ;     B = A;
 $B615 SBC HL,BC       ;     HL -= BC;
 $B617 LD ($81A4),HL   ;     saved_Y = HL;
 $B61A INC DE          ;     DE++;
 $B61B LD L,(IY+$11)   ;     L = IY[0x11]; // X axis
 $B61E LD H,(IY+$12)   ;     H = IY[0x12];
 $B621 LD A,(DE)       ;     A = *DE;
 $B622 LD C,A          ;     C = A;
 $B623 AND $80         ;     A &= 0x80;
 $B625 JR Z,$B629      ; {    if (A) A = 0xFF;
 $B627 LD A,$FF        ; }
*$B629 LD B,A          ;     B = A;
 $B62A SBC HL,BC       ;     HL -= BC;
 $B62C LD ($81A6),HL   ;     saved_X = HL;
 $B62F INC DE          ;     DE++;
 $B630 LD L,(IY+$13)   ;     L = IY[0x13]; // vertical offset
 $B633 LD H,(IY+$14)   ;     H = IY[0x14];
 $B636 LD A,(DE)       ;     A = *DE;
 $B637 LD C,A          ;     C = A;
 $B638 AND $80         ;     A &= 0x80;
 $B63A JR Z,$B63E      ; {    if (A) A = 0xFF;
 $B63C LD A,$FF        ; }
*$B63E LD B,A          ;     B = A;
 $B63F SBC HL,BC       ;     HL -= BC;
 $B641 LD ($81A8),HL   ;     saved_VO = HL;
 $B644 CALL $AF8F      ;     sub_AF8F();
 $B647 JP NZ,$B6A8     ;     if (!Z) goto pop_next;
 $B64A DEC (IY+$0C)    ;     IY[0x0C]--;
 $B64D JR $B6A2        ;   %>
*$B64F CP (HL)         ; {  else <% if (A == *HL) goto snozzle;
 $B650 JP Z,$B6C2      ; }
 $B653 INC A           ; {    HL += (A + 1) * 4;
 $B654 ADD A,A         ;
 $B655 ADD A,A         ;
 $B656 LD C,A          ;
 $B657 LD B,$00        ;
 $B659 ADD HL,BC       ; }
*$B65A EX DE,HL        ;     resume2: EX DE,HL
 $B65B LD A,(DE)       ;     A = *DE;
 $B65C LD L,A          ;     L = A;
 $B65D AND $80         ;     A &= 0x80;
 $B65F JR Z,$B663      ; {    if (A) A = 0xFF;
 $B661 LD A,$FF        ; }
*$B663 LD H,A          ;     H = A;
 $B664 LD C,(IY+$0F)   ;     C = IY[0x0F]; // Y axis
 $B667 LD B,(IY+$10)   ;     B = IY[0x10];
 $B66A ADD HL,BC       ;     HL += BC;
 $B66B LD ($81A4),HL   ;     saved_Y = HL;
 $B66E INC DE          ;     DE++;
 $B66F LD A,(DE)       ;     A = *DE;
 $B670 LD L,A          ;     L = A;
 $B671 AND $80         ;     A &= 0x80;
 $B673 JR Z,$B677      ; {    if (A) A = 0xFF;
 $B675 LD A,$FF        ; }
*$B677 LD H,A          ;     H = A;
 $B678 LD C,(IY+$11)   ;     C = IY[0x11]; // X axis
 $B67B LD B,(IY+$12)   ;     B = IY[0x12];
 $B67E ADD HL,BC       ;     HL += BC;
 $B67F LD ($81A6),HL   ;     saved_X = HL;
 $B682 INC DE          ;     DE++;
 $B683 LD A,(DE)       ;     A = *DE;
 $B684 LD L,A          ;     L = A;
 $B685 AND $80         ;     A &= 0x80;
 $B687 JR Z,$B68B      ; {    if (A) A = 0xFF;
 $B689 LD A,$FF        ; }
*$B68B LD H,A          ;     H = A;
 $B68C LD C,(IY+$13)   ;     C = IY[0x13]; // vertical offset
 $B68F LD B,(IY+$14)   ;     B = IY[0x14];
 $B692 ADD HL,BC       ;     HL += BC;
 $B693 LD ($81A8),HL   ;     saved_VO = HL;
 $B696 INC DE          ;     DE++;
 $B697 LD A,(DE)       ;     A = *DE;
 $B698 EX AF,AF'       ;     EX AF,AF'
 $B699 CALL $AF8F      ;     sub_AF8F();
 $B69C JP NZ,$B6A8     ;     if (!Z) goto pop_next;
 $B69F INC (IY+$0C)    ;     IY[0x0C]++; %>
*$B6A2 PUSH IY         ; {  HL = IY;
 $B6A4 POP HL          ; }
 $B6A5 CALL $B729      ;   reset_position:$B729();
*$B6A8 POP BC          ;   pop_next: POP BC
 $B6A9 LD A,(IY+$01)   ; {  if (IY[1] != vischar_BYTE1_EMPTY_SLOT) IY[1] &=
 $B6AC CP $FF          ; ~vischar_BYTE1_BIT7; // $8001
 $B6AE JR Z,$B6B4      ;
 $B6B0 RES 7,(IY+$01)  ; }
*$B6B4 LD DE,$0020     ;   next: DE = 32; // stride
 $B6B7 ADD IY,DE       ;   IY += DE;
 $B6B9 DEC B           ; {%> while (--B);
 $B6BA JP NZ,$B5D4     ; }
 $B6BD RET             ; return;
*$B6BE RES 7,(IY+$0D)  ; byte13bit7set: IY[0x0D] &= ~vischar_BYTE13_BIT7; //
                       ; sampled IY = $8020, $80A0, $8060, $80E0, $8080,
*$B6C2 LD A,(IY+$0E)   ; {snozzle: A = byte_CDAA[IY[0x0E] * 9 + IY[0x0D]];
 $B6C5 LD D,A          ;
 $B6C6 ADD A,A         ;
 $B6C7 ADD A,A         ;
 $B6C8 ADD A,A         ;
 $B6C9 ADD A,D         ;
 $B6CA ADD A,(IY+$0D)  ;
 $B6CD LD E,A          ;
 $B6CE LD D,$00        ;
 $B6D0 LD HL,$CDAA     ;
 $B6D3 ADD HL,DE       ;
 $B6D4 LD A,(HL)       ; }
 $B6D5 LD C,A          ; C = A;
 $B6D6 LD L,(IY+$08)   ; L = IY[0x08];
 $B6D9 LD H,(IY+$09)   ; H = IY[0x09];
 $B6DC ADD A,A         ; {HL += A * 2;
 $B6DD LD E,A          ;
 $B6DE ADD HL,DE       ; }
 $B6DF LD E,(HL)       ; {E = *HL++;
 $B6E0 INC HL          ; }
 $B6E1 LD (IY+$0A),E   ; IY[0x0A] = E;
 $B6E4 LD D,(HL)       ; D = *HL;
 $B6E5 LD (IY+$0B),D   ; IY[0x0B] = D;
 $B6E8 BIT 7,C         ; {if ((C & (1<<7)) == 0) <%
 $B6EA JR NZ,$B6FC     ; }
 $B6EC LD (IY+$0C),$00 ;   IY[0x0C] = 0;
 $B6F0 INC DE          ; {  DE += 2;
 $B6F1 INC DE          ; }
 $B6F2 LD A,(DE)       ; {  IY[0x0E] = *DE;
 $B6F3 LD (IY+$0E),A   ; }
 $B6F6 INC DE          ; {  DE += 2;
 $B6F7 INC DE          ; }
 $B6F8 EX DE,HL        ;   EX DE,HL
 $B6F9 JP $B65A        ;   goto resume2; %>
*$B6FC LD A,(DE)       ; else <% A = *DE;
 $B6FD LD C,A          ;   C = A;
 $B6FE OR $80          ; {  IY[0x0C] = A | 0x80;
 $B700 LD (IY+$0C),A   ; }
 $B703 INC DE          ; {  IY[0x0E] = *++DE;
 $B704 LD A,(DE)       ;
 $B705 LD (IY+$0E),A   ; }
 $B708 INC DE          ; {  DE += 3;
 $B709 INC DE          ;
 $B70A INC DE          ; }
 $B70B PUSH DE         ;   PUSH DE
 $B70C EX DE,HL        ;   EX DE,HL
 $B70D LD A,C          ; {  HL += C * 4 - 1;
 $B70E ADD A,A         ;
 $B70F ADD A,A         ;
 $B710 DEC A           ;
 $B711 LD B,$00        ;
 $B713 LD C,A          ;
 $B714 ADD HL,BC       ; }
 $B715 LD A,(HL)       ;   A = *HL;
 $B716 EX AF,AF'       ;   EX AF,AF'
 $B717 POP HL          ;   POP HL
 $B718 JP $B605        ;   goto resume1; %>

; reset_position
;
; Used by the routines at #R$68F4, #R$6939, #R$A489, #R$B2FC and #R$C4E0.
; .
; Save a copy of the vischar's position + offset.
;
; I:HL Pointer to visible character.
c$B71B PUSH HL       ; -
 $B71C LD A,$0F      ; {memcpy(&saved_Y, HL + 0x0F, 6);
 $B71E ADD A,L       ;
 $B71F LD L,A        ;
 $B720 LD DE,$81A4   ;
 $B723 LD BC,$0006   ;
 $B726 LDIR          ; }
 $B728 POP HL        ; -
; This entry point is used by the routine at #R$B5CE.
*$B729 EX DE,HL      ; -
 $B72A LD A,$18      ; {HL += 0x18;
 $B72C ADD A,E       ;
 $B72D LD E,A        ; }
 $B72E LD HL,($81A6) ; {DE = saved_X + 0x0200;
 $B731 LD BC,$0200   ;
 $B734 ADD HL,BC     ; }
 $B735 LD BC,($81A4) ; -
 $B739 AND A         ; -
 $B73A SBC HL,BC     ; {DE = (DE - saved_Y) * 2;
 $B73C ADD HL,HL     ; }
 $B73D EX DE,HL      ; -
 $B73E LD (HL),E     ; {*HL++ = E;
 $B73F INC L         ; }
 $B740 LD (HL),D     ; {*HL++ = D;
 $B741 INC L         ; }
 $B742 EX DE,HL      ; -
 $B743 LD HL,$0800   ; {DE = 0x0800 - saved_Y - saved_VO - saved_X;
 $B746 AND A         ;
 $B747 SBC HL,BC     ;
 $B749 LD BC,($81A8) ;
 $B74D SBC HL,BC     ;
 $B74F LD BC,($81A6) ;
 $B753 SBC HL,BC     ; }
 $B755 EX DE,HL      ; -
 $B756 LD (HL),E     ; {*HL++ = E;
 $B757 INC L         ; }
 $B758 LD (HL),D     ; *HL = D;
 $B759 RET           ; return;

; reset_game
;
; Used by the routines at #R$9DE5, #R$A51C and #R$F163.
; .
; Discover all items.
c$B75A LD BC,$1000   ; B = 16; C = 0;
*$B75D PUSH BC       ; do <% -
 $B75E CALL $CD31    ;   item_discovered(C); // pass C as C
 $B761 POP BC        ;   -
 $B762 INC C         ;   C++;
 $B763 DJNZ $B75D    ; %> while (--B);
; Reset message queue.
 $B765 LD HL,$7CFE   ; {message_queue_pointer = message_queue + 2;
 $B768 LD ($7D11),HL ; }
 $B76B CALL $B79B    ; reset_map_and_characters();
 $B76E XOR A         ; {$8001 = 0;
 $B76F LD ($8001),A  ; }
; Reset score.
 $B772 LD HL,$A132   ; HL = &score_digits[0];
 $B775 LD B,$0A      ; B = 10; // iterations
*$B777 LD (HL),A     ; {do <% *HL++ = 0;
 $B778 INC HL        ; }
 $B779 DJNZ $B777    ; %> while (--B); // could do a memset
; Reset morale.
 $B77B LD (HL),$70   ; morale = morale_MAX;
 $B77D CALL $A10B    ; plot_score();
; Reset items.
 $B780 LD HL,$FFFF   ; {items_held = (item_NONE) | (item_NONE << 8);
 $B783 LD ($8215),HL ; }
 $B786 CALL $7C33    ; draw_all_items();
; Reset sprite.
 $B789 LD HL,$CE2E   ; {$8015 = sprite_prisoner_tl_4;
 $B78C LD ($8015),HL ; }
 $B78F LD A,$02      ; {room_index = room_2_hut2left;
 $B791 LD ($68A0),A  ; }
; Put player to bed.
 $B794 CALL $A489    ; hero_sleeps();
 $B797 CALL $68F4    ; enter_room();
 $B79A RET           ; return;

; reset_map_and_characters
;
; Used by the routines at #R$B75A and #R$CB98.
; .
; Resets all visible characters, clock, day_or_night flag, general flags,
; collapsed tunnel objects, locks the gates, resets all beds, clears the mess
; halls and resets characters.
c$B79B LD B,$07      ; B = 7; // iterations
 $B79D LD HL,$8020   ; HL = $8020; // iterate over non-player characters
*$B7A0 PUSH BC       ; {do <%
 $B7A1 PUSH HL       ; }
 $B7A2 CALL $C5D3    ; {  reset_visible_character();
 $B7A5 POP HL        ; }
 $B7A6 LD A,L        ; {  HL += 32;
 $B7A7 ADD A,$20     ;
 $B7A9 LD L,A        ;
 $B7AA POP BC        ; }
 $B7AB DJNZ $B7A0    ; %> while (--B);
 $B7AD LD A,$07      ; {clock = 7;
 $B7AF LD ($A13D),A  ; }
 $B7B2 XOR A         ; {day_or_night = 0;
 $B7B3 LD ($A146),A  ; }
 $B7B6 LD ($8001),A  ; ($8001) = 0; // flags
 $B7B9 LD A,$14      ; {collapsed_tunnel_obj =
 $B7BB LD ($708C),A  ; interiorobject_COLLAPSED_TUNNEL;}
 $B7BE LD A,$34      ; {blockage = 0x34;
 $B7C0 LD ($7077),A  ; }
; Lock the gates.
 $B7C3 LD HL,$F05D   ; HL = &gates_and_doors[0];
 $B7C6 LD B,$09      ; B = 9; // 9 iterations
*$B7C8 SET 7,(HL)    ; {do <% *HL++ |= gates_and_doors_LOCKED;
 $B7CA INC HL        ; }
 $B7CB DJNZ $B7C8    ; %> while (--B);
; Reset all beds.
 $B7CD LD B,$06      ; B = 6; // iterations
 $B7CF LD A,$17      ; {HL = &beds[0];
 $B7D1 LD HL,$6B79   ; }
*$B7D4 LD E,(HL)     ; {do <% E = *HL++;
 $B7D5 INC HL        ; }
 $B7D6 LD D,(HL)     ; {  D = *HL++;
 $B7D7 INC HL        ; }
 $B7D8 LD (DE),A     ;   *DE = interiorobject_OCCUPIED_BED;
 $B7D9 DJNZ $B7D4    ; %> while (--B);
; Clear the mess halls.
 $B7DB LD A,$0D      ; {roomdef_23_breakfast.bench_A =
 $B7DD LD ($6F17),A  ; interiorobject_EMPTY_BENCH;}
 $B7E0 LD ($6F1A),A  ; roomdef_23_breakfast.bench_B =
                     ; interiorobject_EMPTY_BENCH;
 $B7E3 LD ($6F1D),A  ; roomdef_23_breakfast.bench_C =
                     ; interiorobject_EMPTY_BENCH;
 $B7E6 LD ($6F4F),A  ; roomdef_25_breakfast.bench_D =
                     ; interiorobject_EMPTY_BENCH;
 $B7E9 LD ($6F52),A  ; roomdef_25_breakfast.bench_E =
                     ; interiorobject_EMPTY_BENCH;
 $B7EC LD ($6F55),A  ; roomdef_25_breakfast.bench_F =
                     ; interiorobject_EMPTY_BENCH;
 $B7EF LD ($6F58),A  ; roomdef_25_breakfast.bench_G =
                     ; interiorobject_EMPTY_BENCH;
; Reset characters 12..15 and 20..25.
 $B7F2 LD DE,$7667   ; DE = &character_structs[12].BYTE1;
 $B7F5 LD C,$0A      ; C = 10; // iterations
 $B7F7 LD HL,$B819   ; HL = &character_reset_data[0];
*$B7FA LD B,$03      ; {do <% memcpy(DE, HL, 3); DE += 3; HL += 3;
*$B7FC LD A,(HL)     ;
 $B7FD LD (DE),A     ;
 $B7FE INC DE        ;
 $B7FF INC HL        ;
 $B800 DJNZ $B7FC    ;
 $B802 EX DE,HL      ; }
 $B803 LD (HL),$12   ; {  *DE++ = 0x12; // reset to 0x12 but the initial data
 $B805 INC HL        ; is 0x18}
 $B806 LD (HL),$00   ; {  *DE++ = 0x00;
 $B808 INC HL        ; }
 $B809 INC HL        ; {  DE += 2;
 $B80A INC HL        ;
 $B80B EX DE,HL      ; }
 $B80C LD A,C        ; {  if (C == 7) DE = &character_structs[20].BYTE1;
 $B80D CP $07        ;
 $B80F JR NZ,$B814   ;
 $B811 LD DE,$769F   ; }
*$B814 DEC C         ; {%> while (--C);
 $B815 JP NZ,$B7FA   ; }
 $B818 RET           ; return;

; character_reset_data
;
; 10 x 3-byte structs
; .
; struct { byte room; byte y; byte x; }; // partial of character_struct
b$B819 DEFB $03,$28,$3C ; { room_3_hut2right, 40,60 }, // for character 12
 $B81C DEFB $03,$24,$30 ; { room_3_hut2right, 36,48 }, // for character 13
 $B81F DEFB $05,$28,$3C ; { room_5_hut3right, 40,60 }, // for character 14
 $B822 DEFB $05,$24,$22 ; { room_5_hut3right, 36,34 }, // for character 15
 $B825 DEFB $FF,$34,$3C ; { room_NONE,        52,60 }, // for character 20
 $B828 DEFB $FF,$34,$2C ; { room_NONE,        52,44 }, // for character 21
 $B82B DEFB $FF,$34,$1C ; { room_NONE,        52,28 }, // for character 22
 $B82E DEFB $FF,$34,$3C ; { room_NONE,        52,60 }, // for character 23
 $B831 DEFB $FF,$34,$2C ; { room_NONE,        52,44 }, // for character 24
 $B834 DEFB $FF,$34,$1C ; { room_NONE,        52,28 }, // for character 25

; byte_B837
b$B837 DEFB $00

; byte_B838
b$B838 DEFB $00

; word_B839
w$B839 DEFW $0000

; searchlight_sub
;
; Used by the routine at #R$B866.
;
; I:IY Pointer to visible character?
c$B83B PUSH IY       ; {HL = IY;
 $B83D POP HL        ; }
 $B83E LD A,L        ; {if (L) return; // skip non-player character
 $B83F AND A         ;
 $B840 RET NZ        ; }
 $B841 LD HL,$8131   ; HL = $8131;
 $B844 LD BC,$0804   ; BC = 0x0804; // 8 iterations, C is ?
 $B847 XOR A         ; {do <% if (*HL != 0) goto $B860;
*$B848 CP (HL)       ;
 $B849 JR NZ,$B860   ; }
 $B84B INC L         ; {  HL += 4;
 $B84C INC L         ;
 $B84D INC L         ;
 $B84E INC L         ; }
 $B84F DJNZ $B848    ; %> while (--B);
 $B851 LD HL,$81BD   ; HL = &searchlight_state;
 $B854 DEC (HL)      ; (*HL)--;
 $B855 LD A,$FF      ; {if (0xFF != *HL) return;
 $B857 CP (HL)       ;
 $B858 RET NZ        ; }
 $B859 CALL $AB6B    ; choose_game_window_attributes();
 $B85C CALL $A15F    ; set_game_window_attributes();
 $B85F RET           ; return;
*$B860 LD HL,$81BD   ; {searchlight_state = searchlight_STATE_1F;
 $B863 LD (HL),$1F   ; }
 $B865 RET           ; return;

; locate_thing_to_plot_then_plot
;
; Used by the routines at #R$6939 and #R$9D78.
; .
; searchlight related.
c$B866 CALL $B89C    ; locate_thing_to_plot();
 $B869 RET NZ        ; if (!Z) return;
 $B86A BIT 6,A       ; {if ((A & (1<<6)) == 0) <%
 $B86C JR NZ,$B88F   ; }
 $B86E CALL $E420    ;   setup_sprite_plotting();
 $B871 JR NZ,$B866   ;   if (!Z) goto locate_thing_to_plot_then_plot;
 $B873 CALL $B916    ;   mask_stuff();
 $B876 LD A,($81BD)  ; {  if (searchlight_state != searchlight_STATE_OFF)
 $B879 CP $FF        ; searchlight_sub();
 $B87B CALL NZ,$B83B ; }
 $B87E LD A,(IY+$1E) ;   A = IY[0x1E];
 $B881 CP $03        ; {  if (A != 3) <%
 $B883 JR Z,$B88A    ; }
 $B885 CALL $E102    ;     masked_sprite_plotter_24_wide();
 $B888 JR $B866      ;     goto locate_thing_to_plot_then_plot; %>
*$B88A CALL Z,$E2A2  ;   if (Z) masked_sprite_plotter_16_wide_case_1(); // odd
                     ; to test for Z since it's always set
 $B88D JR $B866      ;   goto locate_thing_to_plot_then_plot; %>
*$B88F CALL $DC41    ; else <% setup_item_plotting();
 $B892 JR NZ,$B866   ;   if (!Z) goto locate_thing_to_plot_then_plot;
 $B894 CALL $B916    ;   mask_stuff();
 $B897 CALL $E29F    ;   masked_sprite_plotter_16_wide_case_1_searchlight();
 $B89A JR $B866      ;   goto locate_thing_to_plot_then_plot; %>

; locate_thing_to_plot
;
; Used by the routine at #R$B866.
; .
; Locates a vischar or item to plot.
c$B89C LD BC,$0000    ; BC = 0;
 $B89F LD D,C         ; {DE = 0;
 $B8A0 LD E,C         ; }
 $B8A1 LD A,$FF       ; A = 0xFF;
 $B8A3 EX AF,AF'      ; EX AF,AF'
 $B8A4 EXX            ; EXX
 $B8A5 LD DE,$0000    ; DE = 0;
 $B8A8 LD BC,$0820    ; BC = 0x0820; // B = 8 iterations, C = stride, 32
 $B8AB LD HL,$8007    ; HL = $8007; // vischar byte7
*$B8AE BIT 7,(HL)     ; {do <% if ((*HL & vischar_BYTE7_BIT7) == 0) goto next;
 $B8B0 JR Z,$B8F7     ; }
 $B8B2 PUSH HL        ;   PUSH HL
 $B8B3 PUSH BC        ;   PUSH BC
 $B8B4 LD A,$08       ; {  HL += 8; // $8007 + 8 = $800F
 $B8B6 ADD A,L        ;
 $B8B7 LD L,A         ; }
 $B8B8 LD C,(HL)      ; {  C = *HL++;
 $B8B9 INC L          ; }
 $B8BA LD B,(HL)      ;   B = *HL;
 $B8BB INC BC         ; {  BC += 4;
 $B8BC INC BC         ;
 $B8BD INC BC         ;
 $B8BE INC BC         ; }
 $B8BF PUSH BC        ;   PUSH BC
 $B8C0 EXX            ;   EXX
 $B8C1 POP HL         ;   POP HL
 $B8C2 SBC HL,BC      ;   SBC HL,BC
 $B8C4 EXX            ;   EXX
 $B8C5 JR C,$B8F5     ;   JR C,pop_next
 $B8C7 INC L          ;   HL++;
 $B8C8 LD C,(HL)      ; {  C = *HL++;
 $B8C9 INC L          ; }
 $B8CA LD B,(HL)      ;   B = *HL;
 $B8CB INC BC         ; {  BC += 4;
 $B8CC INC BC         ;
 $B8CD INC BC         ;
 $B8CE INC BC         ; }
 $B8CF PUSH BC        ;   PUSH BC
 $B8D0 EXX            ;   EXX
 $B8D1 POP HL         ;   POP HL
 $B8D2 SBC HL,DE      ;   SBC HL,DE
 $B8D4 EXX            ;   EXX
 $B8D5 JR C,$B8F5     ;   JR C,pop_next
 $B8D7 INC L          ;   HL++;
 $B8D8 POP BC         ;   POP BC
 $B8D9 PUSH BC        ;   PUSH BC
 $B8DA LD A,$08       ; {  A = 8 - B;
 $B8DC SUB B          ; }
 $B8DD EX AF,AF'      ;   EX AF,AF'  // unpaired
 $B8DE LD E,(HL)      ; {  E = *HL++;
 $B8DF INC L          ; }
 $B8E0 LD D,(HL)      ;   D = *HL;
 $B8E1 PUSH HL        ;   PUSH HL
 $B8E2 EXX            ;   EXX
 $B8E3 POP HL         ;   POP HL
 $B8E4 DEC L          ; {  L -= 2;
 $B8E5 DEC L          ; }
 $B8E6 LD D,(HL)      ; {  D = *HL--;
 $B8E7 DEC L          ; }
 $B8E8 LD E,(HL)      ; {  E = *HL--;
 $B8E9 DEC L          ; }
 $B8EA LD B,(HL)      ; {  B = *HL--;
 $B8EB DEC L          ; }
 $B8EC LD C,(HL)      ;   C = *HL;
 $B8ED LD A,L         ; {  HL -= 15;
 $B8EE SUB $0F        ;
 $B8F0 LD L,A         ; }
 $B8F1 PUSH HL        ; {  IY = HL;
 $B8F2 POP IY         ; }
 $B8F4 EXX            ;   EXX
*$B8F5 POP BC         ;   pop_next: POP BC
 $B8F6 POP HL         ;   POP HL
*$B8F7 LD A,L         ; {  next: HL += C;
 $B8F8 ADD A,C        ;
 $B8F9 LD L,A         ; }
 $B8FA DJNZ $B8AE     ; %> while (--B);
 $B8FC CALL $DBEB     ; sub_DBEB();
 $B8FF EX AF,AF'      ; EX AF,AF' // return value
 $B900 BIT 7,A        ; {if (A & (1<<7)) return;
 $B902 RET NZ         ; }
 $B903 PUSH IY        ; {HL = IY;
 $B905 POP HL         ; }
 $B906 BIT 6,A        ; {if ((A & (1<<6)) == 0) <%
 $B908 JR NZ,$B90F    ; }
 $B90A RES 7,(IY+$07) ;   IY[7] &= ~vischar_BYTE7_BIT7;
 $B90E RET            ;   return; %>
*$B90F INC HL         ; {else <% HL[1] &= ~itemstruct_ROOM_FLAG_BIT6; // looks
 $B910 RES 6,(HL)     ; wrong: HL points to a vischar here}
 $B912 BIT 6,(HL)     ; {  BIT 6,HL[1]  // odd. this tests the bit we've just
 $B914 DEC HL         ; cleared as if we're setting flags for return. but we
                      ; can't be as we're followed by another instruction..
                      ; unless DEC HL doesn't alter the Z flag .. which is
                      ; true, it doesn't.}
 $B915 RET            ;   return; %>

; mask_stuff
;
; Used by the routine at #R$B866.
; .
; Sets attr of something, checks indoor room index, ...
; .
; unpacks mask stuff
c$B916 LD HL,$8100   ; {memset($8100, 0xFF, 0xA0);
 $B919 LD (HL),$FF   ;
 $B91B LD DE,$8101   ;
 $B91E LD BC,$009F   ;
 $B921 LDIR          ; }
 $B923 LD A,($68A0)  ; {if (room_index) <%
 $B926 AND A         ;
 $B927 JR Z,$B935    ; }
 $B929 LD HL,$81DA   ;   HL = &indoor_mask_data;
 $B92C LD A,(HL)     ;   A = *HL;
 $B92D AND A         ; {  if (A == 0) return;
 $B92E RET Z         ; }
 $B92F LD B,A        ;   B = A; // iterations
 $B930 INC HL        ; {  HL += 3; %>
 $B931 INC HL        ;
 $B932 INC HL        ;
 $B933 JR $B93A      ; }
*$B935 LD B,$3B      ; else <% B = NELEMS(exterior_mask_data); // 59 iterations
 $B937 LD HL,$EC03   ;   HL = $EC03; // exterior_mask_data + 2 bytes %>
*$B93A PUSH BC       ; do <% PUSH BC
 $B93B PUSH HL       ;   PUSH HL
 $B93C LD A,($81B5)  ; {  A = map_position_related_1 - 1;
 $B93F DEC A         ; }
 $B940 CP (HL)       ; {  if (A >= HL[0] || A + 4 < HL[-1]) goto pop_next;
 $B941 JP NC,$BAC3   ;
 $B944 ADD A,$04     ;
 $B946 DEC HL        ;
 $B947 CP (HL)       ;
 $B948 JP C,$BAC3    ; }
 $B94B INC HL        ; {  -
 $B94C INC HL        ;
 $B94D INC HL        ; }
 $B94E LD A,($81B6)  ; {  A = map_position_related_2 - 1;
 $B951 DEC A         ; }
 $B952 CP (HL)       ; {  if (A >= HL[2] || A + 5 < HL[1]) goto pop_next;
 $B953 JP NC,$BAC3   ;
 $B956 ADD A,$05     ;
 $B958 DEC HL        ;
 $B959 CP (HL)       ;
 $B95A JP C,$BAC3    ; }
 $B95D INC HL        ; {  -
 $B95E INC HL        ; }
 $B95F LD A,($81B2)  ; {  if (byte_81B2 <= HL[3]) goto pop_next;
 $B962 CP (HL)       ;
 $B963 JP Z,$BAC3    ;
 $B966 JP C,$BAC3    ;
 $B969 INC HL        ; }
 $B96A LD A,($81B3)  ; {  if (byte_81B3 < HL[4]) goto pop_next;
 $B96D CP (HL)       ;
 $B96E JP C,$BAC3    ;
 $B971 INC HL        ; }
 $B972 LD A,($81B4)  ;   A = byte_81B4;
 $B975 AND A         ; {  if (A) A--;
 $B976 JR Z,$B979    ;
 $B978 DEC A         ; }
*$B979 CP (HL)       ; {  if (A >= HL[5]) goto pop_next;
 $B97A JP NC,$BAC3   ; }
 $B97D LD A,L        ; {  HL -= 6;
 $B97E SUB $06       ;
 $B980 LD L,A        ;
 $B981 JR NC,$B984   ;
 $B983 DEC H         ; }
*$B984 LD A,($81B5)  ;   A = map_position_related_1;
 $B987 LD C,A        ;   C = A;
 $B988 CP (HL)       ; {  if (A >= *HL) <%
 $B989 JP C,$B99F    ; }
 $B98C SUB (HL)      ;     A -= *HL; // sampled HL points to $81EC $81F4 $EC12
 $B98D LD ($B837),A  ;     byte_B837 = A;
 $B990 INC HL        ;     HL++;
 $B991 LD A,(HL)     ; {    A = *HL - C;
 $B992 SUB C         ; }
 $B993 CP $03        ; {    if (A >= 3) A = 3;
 $B995 JR C,$B999    ;
 $B997 LD A,$03      ; }
*$B999 INC A         ; {    ($B83A) = ++A; // word_B839 + 1 %>
 $B99A LD ($B83A),A  ; }
 $B99D JR $B9B6      ;   else <%
*$B99F LD B,(HL)     ;     B = *HL;
 $B9A0 XOR A         ; {    byte_B837 = 0;
 $B9A1 LD ($B837),A  ; }
 $B9A4 LD A,B        ; {    C = 4 - (B - C);
 $B9A5 SUB C         ;
 $B9A6 LD C,A        ;
 $B9A7 LD A,$04      ;
 $B9A9 SUB C         ;
 $B9AA LD C,A        ; }
 $B9AB INC HL        ;     HL++;
 $B9AC LD A,(HL)     ; {    A = (*HL - B) + 1;
 $B9AD SUB B         ;
 $B9AE INC A         ; }
 $B9AF CP C          ; {    if (A > C) A = C;
 $B9B0 JR C,$B9B3    ;
 $B9B2 LD A,C        ; }
*$B9B3 LD ($B83A),A  ;     ($B83A) = A; // word_B839 + 1 %>
*$B9B6 INC HL        ;   HL++;
 $B9B7 LD A,($81B6)  ;   A = map_position_related_2;
 $B9BA LD C,A        ;   C = A;
 $B9BB CP (HL)       ; {  if (A >= *HL) <%
 $B9BC JP C,$B9D2    ; }
 $B9BF SUB (HL)      ;     A -= *HL;
 $B9C0 LD ($B838),A  ;     byte_B838 = A;
 $B9C3 INC HL        ; {    A = *++HL - C;
 $B9C4 LD A,(HL)     ;
 $B9C5 SUB C         ; }
 $B9C6 CP $04        ; {    if (A >= 4) A = 4;
 $B9C8 JR C,$B9CC    ;
 $B9CA LD A,$04      ; }
*$B9CC INC A         ;     A++;
 $B9CD LD ($B839),A  ; {    ($B839) = A; %>
 $B9D0 JR $B9E9      ; }
*$B9D2 LD B,(HL)     ;   else <% B = *HL;
 $B9D3 XOR A         ; {    byte_B838 = 0;
 $B9D4 LD ($B838),A  ; }
 $B9D7 LD A,B        ; {    C = 5 - (B - C);
 $B9D8 SUB C         ;
 $B9D9 LD C,A        ;
 $B9DA LD A,$05      ;
 $B9DC SUB C         ;
 $B9DD LD C,A        ; }
 $B9DE INC HL        ; {    A = (*++HL - B) + 1;
 $B9DF LD A,(HL)     ;
 $B9E0 SUB B         ;
 $B9E1 INC A         ; }
 $B9E2 CP C          ; {    if (A >= C) A = C;
 $B9E3 JR C,$B9E6    ;
 $B9E5 LD A,C        ; }
*$B9E6 LD ($B839),A  ;     ($B839) = A; %>
*$B9E9 DEC HL        ;   HL--;
 $B9EA LD BC,$0000   ;   BC = 0;
 $B9ED LD A,($B838)  ; {  if (byte_B838 == 0) C = -map_position_related_2 +
 $B9F0 AND A         ; *HL;
 $B9F1 JR NZ,$B9FA   ;
 $B9F3 LD A,($81B6)  ;
 $B9F6 NEG           ;
 $B9F8 ADD A,(HL)    ;
 $B9F9 LD C,A        ; }
*$B9FA DEC HL        ; {  HL -= 2;
 $B9FB DEC HL        ; }
 $B9FC LD A,($B837)  ; {  if (byte_B837 == 0) B = -map_position_related_1 +
 $B9FF AND A         ; *HL;
 $BA00 JR NZ,$BA09   ;
 $BA02 LD A,($81B5)  ;
 $BA05 NEG           ;
 $BA07 ADD A,(HL)    ;
 $BA08 LD B,A        ; }
*$BA09 DEC HL        ;   HL--;
 $BA0A LD A,(HL)     ;   A = *HL;
 $BA0B EX AF,AF'     ;   -
 $BA0C LD A,C        ; {  Adash = C * 32 + B;
 $BA0D ADD A,A       ;
 $BA0E ADD A,A       ;
 $BA0F ADD A,A       ;
 $BA10 ADD A,A       ;
 $BA11 ADD A,A       ;
 $BA12 ADD A,B       ; }
 $BA13 LD HL,$8100   ; {  HL = $8100 + Adash;
 $BA16 ADD A,L       ;
 $BA17 LD L,A        ; }
 $BA18 LD ($81A0),HL ;   ($81A0) = HL; // $81A0 is a mystery location
 $BA1B EX AF,AF'     ;   -
; If I break this bit then the character gets drawn on top of *indoors*
; objects.
 $BA1C ADD A,A       ; {  DE = exterior_mask_data_pointers[A];
 $BA1D LD C,A        ;
 $BA1E LD B,$00      ;
 $BA20 LD HL,$EBC5   ;
 $BA23 ADD HL,BC     ;
 $BA24 LD E,(HL)     ;
 $BA25 INC HL        ;
 $BA26 LD D,(HL)     ; }
 $BA27 LD HL,($B839) ;   HL = word_B839;
 $BA2A LD A,L        ; {  ($BA70) = L; // self modify
 $BA2B LD ($BA70),A  ; }
 $BA2E LD A,H        ; {  ($BA72) = H; // self modify
 $BA2F LD ($BA72),A  ; }
 $BA32 LD A,(DE)     ; {  ($BA90) = *DE - H; // self modify // *DE looks like a
 $BA33 SUB H         ; count
 $BA34 LD ($BA90),A  ; }
 $BA37 LD A,$20      ; {  ($BABA) = 32 - H; // self modify
 $BA39 SUB H         ;
 $BA3A LD ($BABA),A  ; }
 $BA3D PUSH DE       ;   PUSH DE
 $BA3E LD A,(DE)     ; {  E = *DE;
 $BA3F LD E,A        ; }
 $BA40 LD A,($B838)  ;   A = byte_B838;
 $BA43 CALL $BACD    ;   scale_val();
 $BA46 LD A,($B837)  ; {  E = byte_B837;
 $BA49 LD E,A        ; }
 $BA4A ADD HL,DE     ;   HL += DE;
 $BA4B POP DE        ;   POP DE
 $BA4C INC HL        ;   HL++; // iterations
*$BA4D LD A,(DE)     ;   do <% A = *DE; // DE -> $E560 upwards (in
                     ; outdoors_mask_data)
 $BA4E AND A         ; {    if (A >= 128) <%
 $BA4F JP P,$BA60    ; }
 $BA52 AND $7F       ;       A &= 0x7F;
 $BA54 INC DE        ;       DE++;
 $BA55 LD C,A        ; {      HL -= A;
 $BA56 SBC HL,BC     ; }
 $BA58 JR C,$BA69    ;       if (HL < 0) goto $BA69;
 $BA5A INC DE        ;       DE++;
 $BA5B JR NZ,$BA4D   ;       if (DE) goto $BA4D;
 $BA5D XOR A         ;       A = 0;
 $BA5E JR $BA6C      ;       goto $BA6C; %>
*$BA60 INC DE        ;     DE++;
 $BA61 DEC HL        ; {  %> while (--HL);
 $BA62 LD A,L        ;
 $BA63 OR H          ;
 $BA64 JP NZ,$BA4D   ; }
 $BA67 JR $BA6C      ;   goto $BA6C;
*$BA69 LD A,L        ; {  A = -L;
 $BA6A NEG           ; }
*$BA6C LD HL,($81A0) ;   HL = ($81A0); // mystery
 $BA6F LD C,$01      ;   C = 1; // self modified
*$BA71 LD B,$01      ;   do <% B = 1; // self modified
*$BA73 EX AF,AF'     ;     do <% -
 $BA74 LD A,(DE)     ;       Adash = *DE;
 $BA75 AND A         ;       Adash &= Adash;
 $BA76 JP P,$BA7E    ;       if (!P) <%
 $BA79 AND $7F       ;         Adash &= 0x7F;
 $BA7B EX AF,AF'     ;         -
 $BA7C INC DE        ;         DE++;
 $BA7D LD A,(DE)     ;         A = *DE; %>
*$BA7E AND A         ;       A &= A;
 $BA7F CALL NZ,$BADC ;       if (!Z) mask_against_tile();
 $BA82 INC L         ;       L++;
 $BA83 EX AF,AF'     ;       EX AF,AF' // unpaired?
 $BA84 AND A         ; {      if (A != 0 && --A != 0) DE--;
 $BA85 JR Z,$BA8B    ;
 $BA87 DEC A         ;
 $BA88 JR Z,$BA8B    ;
 $BA8A DEC DE        ; }
*$BA8B INC DE        ;       DE++;
 $BA8C DJNZ $BA73    ;     %> while (--B);
 $BA8E PUSH BC       ;     PUSH BC
 $BA8F LD B,$01      ;     B = 1; // self modified
 $BA91 EX AF,AF'     ;     -
 $BA92 LD A,B        ; {    if (B) <%
 $BA93 AND A         ;
 $BA94 JP Z,$BAB9    ; }
 $BA97 EX AF,AF'     ;       -
 $BA98 AND A         ; {      if (A) goto $BAA3;
 $BA99 JR NZ,$BAA3   ; }
*$BA9B LD A,(DE)     ;       do <% A = *DE;
 $BA9C AND A         ; {        if (A >= 128) <%
 $BA9D JP P,$BAAF    ; }
 $BAA0 AND $7F       ;         A &= 0x7F;
 $BAA2 INC DE        ;         DE++;
*$BAA3 LD C,A        ; {        B -= A;
 $BAA4 LD A,B        ;
 $BAA5 SUB C         ;
 $BAA6 LD B,A        ; }
 $BAA7 JR C,$BAB6    ;         if (B < 0) goto $BAB6;
 $BAA9 INC DE        ;         DE++;
 $BAAA JR NZ,$BA9B   ;         if (!Z) goto $BA9B;
 $BAAC EX AF,AF'     ;         EX AF,AF' // why not just jump instr earlier? //
                     ; bank
 $BAAD JR $BAB9      ;         goto $BAB9; %>
*$BAAF INC DE        ;         DE++;
 $BAB0 DJNZ $BA9B    ;       %> while (--B);
 $BAB2 XOR A         ;       A = 0;
 $BAB3 EX AF,AF'     ;       EX AF,AF' // why not just jump instr earlier? //
                     ; bank
 $BAB4 JR $BAB9      ;       goto $BAB9;
*$BAB6 NEG           ;       A = -A;
 $BAB8 EX AF,AF'     ;       EX AF,AF' // bank %>
*$BAB9 LD A,$20      ; {    HL += 32; // self modified
 $BABB ADD A,L       ;
 $BABC LD L,A        ; }
 $BABD EX AF,AF'     ;     EX AF,AF'  // unbank
 $BABE POP BC        ;     POP BC
 $BABF DEC C         ; {  %> while (--C);
 $BAC0 JP NZ,$BA71   ; }
*$BAC3 POP HL        ;   pop_next: POP HL
 $BAC4 POP BC        ;   POP BC
 $BAC5 LD DE,$0008   ; {  HL += 8;
 $BAC8 ADD HL,DE     ; }
 $BAC9 DEC B         ; {%> while (--B);
 $BACA JP NZ,$B93A   ; }

; scale_val
;
; Used by the routine at #R$B916.
; .
; Given a bitmask in A, produce a widened and shifted 16-bit bitmask in HL.
;
; I:A Value to scale.
; I:E Shift value, 4 or 8.
; O:HL Widened value.
c$BACD LD B,$08      ; B = 8; // iterations
 $BACF LD HL,$0000   ; HL = 0;
 $BAD2 LD D,H        ; D = 0; // e.g. DE = 8;
*$BAD3 ADD HL,HL     ; do <% HL += HL;
 $BAD4 RLA           ;   RLA  // carry = (A >> 7); A <<= 1;
 $BAD5 JP NC,$BAD9   ; {  if (carry) HL += DE;
 $BAD8 ADD HL,DE     ; }
*$BAD9 DJNZ $BAD3    ; %> while (--B);
 $BADB RET           ; return;

; mask_against_tile
;
; Used by the routine at #R$B916.
; .
; Masks characters obscured by foreground objects.
;
; I:A  Mask tile index.
; I:HL Pointer to destination.
c$BADC PUSH HL       ; DEdash = HL
 $BADD EXX           ; -
 $BADE LD L,A        ; {HLdash = &exterior_tiles_0[A];
 $BADF LD H,$00      ;
 $BAE1 ADD HL,HL     ;
 $BAE2 ADD HL,HL     ;
 $BAE3 ADD HL,HL     ;
 $BAE4 LD BC,$8218   ;
 $BAE7 ADD HL,BC     ; }
 $BAE8 POP DE        ; -
 $BAE9 LD B,$08      ; Bdash = 8; // 8 iterations
*$BAEB LD A,(DE)     ; {do <% *DEdash &= *HLdash++;
 $BAEC AND (HL)      ;
 $BAED LD (DE),A     ;
 $BAEE INC L         ; }
 $BAEF INC E         ; {  DEdash += 4; // stride of 4 => supertile?
 $BAF0 INC E         ;
 $BAF1 INC E         ;
 $BAF2 INC E         ; }
 $BAF3 DJNZ $BAEB    ; %> while (--Bdash);
 $BAF5 EXX           ; -
 $BAF6 RET           ; return;

; vischar_visible
;
; Used by the routines at #R$BB98 and #R$E420.
; .
; Clipping vischars to the game window.
;
; O:A  0 or 0xFF
; O:BC Clipped width.
; O:DE Clipped height.
; O:IY Pointer to visible character.
c$BAF7 LD HL,$81B5    ; HL = &map_position_related_1;
 $BAFA LD A,($81BB)   ; {A = map_position[0] + 24;
 $BAFD ADD A,$18      ; }
 $BAFF SUB (HL)       ; A -= *HL;
 $BB00 JP Z,$BB94     ; {if (A > 0) <%
 $BB03 JP C,$BB94     ; }
 $BB06 CP (IY+$1E)    ;   CP IY[30]  // if (A ?? IY[30])
 $BB09 JP NC,$BB11    ;   if (carry) <%
 $BB0C LD B,$00       ; {    BC = A; %>
 $BB0E LD C,A         ; }
 $BB0F JR $BB33       ;   else <%
*$BB11 LD A,(HL)      ; {    A = *HL + IY[30];
 $BB12 ADD A,(IY+$1E) ; }
 $BB15 LD HL,$81BB    ; {    A -= map_position[0];
 $BB18 SUB (HL)       ; }
 $BB19 JP Z,$BB94     ; {    if (A <= 0) goto exit;
 $BB1C JP C,$BB94     ; }
 $BB1F CP (IY+$1E)    ;     CP IY[30]
 $BB22 JP NC,$BB2E    ;     if (carry) <%
 $BB25 LD C,A         ;       C = A;
 $BB26 NEG            ; {      B = -A + IY[30]; %>
 $BB28 ADD A,(IY+$1E) ;
 $BB2B LD B,A         ; }
 $BB2C JR $BB33       ;     else <%
*$BB2E LD B,$00       ; {      BC = IY[30]; %> %>
 $BB30 LD C,(IY+$1E)  ; }
*$BB33 LD A,($81BC)   ; {  HL = ((map_position >> 8) + 17) * 8;
 $BB36 ADD A,$11      ;
 $BB38 LD L,A         ;
 $BB39 LD H,$00       ;
 $BB3B ADD HL,HL      ;
 $BB3C ADD HL,HL      ;
 $BB3D ADD HL,HL      ; }
 $BB3E LD E,(IY+$1A)  ;   E = IY[26];
 $BB41 LD D,(IY+$1B)  ;   D = IY[27];
 $BB44 AND A          ;   A &= A;
 $BB45 SBC HL,DE      ;   HL -= DE;
 $BB47 JP Z,$BB94     ; {  if (result <= 0) goto exit;
 $BB4A JP C,$BB94     ; }
 $BB4D LD A,H         ; {  if (H) goto exit;
 $BB4E AND A          ;
 $BB4F JP NZ,$BB94    ; }
 $BB52 LD A,L         ;   A = L;
 $BB53 CP (IY+$1F)    ;   CP IY[31]
 $BB56 JP NC,$BB5E    ;   if (carry) <%
 $BB59 LD E,A         ; {    DE = A; %>
 $BB5A LD D,$00       ; }
 $BB5C JR $BB92       ;   else <%
*$BB5E LD L,(IY+$1F)  ; {    HL = IY[31] + DE;
 $BB61 LD H,$00       ;
 $BB63 ADD HL,DE      ; }
 $BB64 EX DE,HL       ; {    DE = map_position >> 8 * 8;
 $BB65 LD A,($81BC)   ;
 $BB68 LD L,A         ;
 $BB69 LD H,$00       ;
 $BB6B ADD HL,HL      ;
 $BB6C ADD HL,HL      ;
 $BB6D ADD HL,HL      ;
 $BB6E EX DE,HL       ; }
 $BB6F AND A          ;     A &= A; // likely: clear carry
 $BB70 SBC HL,DE      ;     HL -= DE;
 $BB72 JP C,$BB94     ; {    if (result <= 0) goto exit;
 $BB75 JP Z,$BB94     ; }
 $BB78 LD A,H         ; {    if (H) goto exit;
 $BB79 AND A          ;
 $BB7A JP NZ,$BB94    ; }
 $BB7D LD A,L         ;     A = L;
 $BB7E CP (IY+$1F)    ;     CP IY[31]
 $BB81 JP NC,$BB8D    ;     if (carry) <%
 $BB84 LD E,A         ;       E = A;
 $BB85 NEG            ; {      D = -A + IY[31]; %>
 $BB87 ADD A,(IY+$1F) ;
 $BB8A LD D,A         ; }
 $BB8B JR $BB92       ;     else <%
*$BB8D LD D,$00       ; {      DE = IY[31]; %> %>
 $BB8F LD E,(IY+$1F)  ; }
*$BB92 XOR A          ;   A = 0; // return Z
 $BB93 RET            ;   return; %>
*$BB94 LD A,$FF       ; exit: A = 0xFF;
 $BB96 AND A          ; A &= A; // return NZ
 $BB97 RET            ; return;

; called_from_main_loop_3
;
; Used by the routine at #R$9D78.
; .
; Walks the visible characters array doing ?
c$BB98 LD B,$08      ; B = 8; // iterations
 $BB9A LD IY,$8000   ; IY = $8000;
*$BB9E PUSH BC       ; do <% PUSH BC
 $BB9F LD A,(IY+$01) ; {  if (IY[1] == room_NONE) goto next;
 $BBA2 CP $FF        ;
 $BBA4 JP Z,$BC9F    ; }
 $BBA7 LD H,(IY+$1B) ; {  map_position_related_2 = (IY[26] >> 3) | (IY[27] <<
 $BBAA LD A,(IY+$1A) ; 5); // divide by 8
 $BBAD SRL H         ;
 $BBAF RRA           ;
 $BBB0 SRL H         ;
 $BBB2 RRA           ;
 $BBB3 SRL H         ;
 $BBB5 RRA           ;
 $BBB6 LD ($81B6),A  ; }
 $BBB9 LD H,(IY+$19) ; {  map_position_related_1 = (IY[24] >> 3) | (IY[25] <<
 $BBBC LD A,(IY+$18) ; 5); // divide by 8
 $BBBF SRL H         ;
 $BBC1 RRA           ;
 $BBC2 SRL H         ;
 $BBC4 RRA           ;
 $BBC5 SRL H         ;
 $BBC7 RRA           ;
 $BBC8 LD ($81B5),A  ; }
 $BBCB CALL $BAF7    ;   vischar_visible();
 $BBCE CP $FF        ; {  if (A == 0xFF) goto next; // possibly not found case
 $BBD0 JP Z,$BC9F    ; }
 $BBD3 LD A,E        ; {  A = ((E >> 3) & 31) + 2;
 $BBD4 RRA           ;
 $BBD5 RRA           ;
 $BBD6 RRA           ;
 $BBD7 AND $1F       ;
 $BBD9 ADD A,$02     ; }
 $BBDB PUSH AF       ;   PUSH AF
 $BBDC LD HL,$81B6   ; {  A += map_position_related_2 - ((map_position &
 $BBDF ADD A,(HL)    ; 0xFF00) >> 8);
 $BBE0 LD HL,$81BC   ;
 $BBE3 SUB (HL)      ; }
 $BBE4 JR C,$BBF7    ;   if (A >= 0) <%
 $BBE6 SUB $11       ;     A -= 17;
 $BBE8 JR Z,$BBF7    ; {    if (A > 0) <%
 $BBEA JR C,$BBF7    ; }
 $BBEC LD E,A        ;       E = A;
 $BBED POP AF        ;       POP AF
 $BBEE SUB E         ;       A -= E;
 $BBEF JP C,$BC9F    ;       if (carry) goto next;
 $BBF2 JR NZ,$BBF8   ;       if (!Z) goto $BBF8;
 $BBF4 JP $BC9F      ;       goto next; %> %>
*$BBF7 POP AF        ;   POP AF
*$BBF8 CP $05        ; {  if (A > 5) A = 5;
 $BBFA JP Z,$BC02    ;
 $BBFD JP C,$BC02    ;
 $BC00 LD A,$05      ; }
*$BC02 LD ($BC5F),A  ;   ($BC5F) = A; // self modify
 $BC05 LD A,C        ;   A = C;
 $BC06 LD ($BC61),A  ;   ($BC61) = A; // self modify
 $BC09 LD ($BC89),A  ;   ($BC89) = A; // self modify
 $BC0C LD A,$18      ; {  A = 24 - C;
 $BC0E SUB C         ; }
 $BC0F LD ($BC8E),A  ;   ($BC8E) = A; // self modify
 $BC12 ADD A,$A8     ;   A += $A8;
 $BC14 LD ($BC95),A  ;   ($BC95) = A; // self modify
 $BC17 LD HL,$81BB   ;   HL = &map_position;
 $BC1A LD A,B        ;   A = B;
 $BC1B AND A         ;   A &= A;
 $BC1C LD A,$00      ;   A = 0; // interleaved
 $BC1E JR NZ,$BC24   ;   if (Z) <%
 $BC20 LD A,($81B5)  ;     A = map_position_related_1;
 $BC23 SUB (HL)      ;     A -= *HL; %>
*$BC24 LD B,A        ;   B = A;
 $BC25 LD A,D        ;   A = D;
 $BC26 AND A         ;   A &= A;
 $BC27 LD A,$00      ;   A = 0; // interleaved
 $BC29 JR NZ,$BC30   ;   if (Z) <%
 $BC2B INC HL        ;     HL++;
 $BC2C LD A,($81B6)  ;     A = map_position_related_2;
 $BC2F SUB (HL)      ;     A -= *HL; %>
*$BC30 LD C,A        ;   C = A;
 $BC31 LD H,C        ;   H = C;
 $BC32 XOR A         ;   A = 0;
 $BC33 SRL H         ;   SRL H
 $BC35 RRA           ;   RRA
 $BC36 LD E,A        ;   E = A;
 $BC37 LD D,H        ;   D = H;
 $BC38 SRL H         ;   SRL H
 $BC3A RRA           ;   RRA
 $BC3B LD L,A        ;   L = A;
 $BC3C ADD HL,DE     ; {  HL += DE + B + $F290; // screen buffer start address
 $BC3D LD E,B        ;
 $BC3E LD D,$00      ;
 $BC40 ADD HL,DE     ;
 $BC41 LD DE,$F290   ;
 $BC44 ADD HL,DE     ; }
 $BC45 EX DE,HL      ;   EX DE,HL
 $BC46 PUSH BC       ;   PUSH BC
 $BC47 EXX           ;   -
 $BC48 POP HL        ;   POP HLdash
 $BC49 EXX           ;   -
 $BC4A LD A,B        ;   A = B;
 $BC4B LD L,C        ; {  HL = C * 24 + A + $F0F8; // visible tiles array
 $BC4C LD H,$00      ;
 $BC4E ADD HL,HL     ;
 $BC4F ADD HL,HL     ;
 $BC50 ADD HL,HL     ;
 $BC51 LD C,L        ;
 $BC52 LD B,H        ;
 $BC53 ADD HL,HL     ;
 $BC54 ADD HL,BC     ;
 $BC55 LD C,A        ;
 $BC56 LD B,$00      ;
 $BC58 ADD HL,BC     ;
 $BC59 LD BC,$F0F8   ;
 $BC5C ADD HL,BC     ; }
 $BC5D EX DE,HL      ;   EX DE,HL
 $BC5E LD C,$05      ;   C = 5; // iterations // self modified $BC5F
*$BC60 LD B,$04      ;   do <% B = 4; // iterations // self modified $BC61
*$BC62 PUSH HL       ;     do <% PUSH HL
 $BC63 LD A,(DE)     ;       A = *DE;
 $BC64 EXX           ;       -
 $BC65 POP DE        ;       POP DEdash // visible tiles array pointer
 $BC66 PUSH HL       ;       PUSH HLdash
 $BC67 CALL $BCAA    ;       select_tile_set(); // call using banked registers
 $BC6A LD L,A        ; {      HLdash = A * 8 + BCdash;
 $BC6B LD H,$00      ;
 $BC6D ADD HL,HL     ;
 $BC6E ADD HL,HL     ;
 $BC6F ADD HL,HL     ;
 $BC70 ADD HL,BC     ; }
 $BC71 LD BC,$0818   ;       Bdash, Cdash = 8, 24; // iterations, stride
*$BC74 LD A,(HL)     ; {      do <% *DEdash = *HLdash++;
 $BC75 LD (DE),A     ; }
 $BC76 LD A,C        ; {        DEdash += Cdash;
 $BC77 ADD A,E       ;
 $BC78 JR NC,$BC7B   ;
 $BC7A INC D         ;
*$BC7B LD E,A        ;
 $BC7C INC L         ; }
 $BC7D DJNZ $BC74    ;       %> while (--Bdash);
 $BC7F POP HL        ;       POP HLdash
 $BC80 INC H         ;       Hdash++;
 $BC81 EXX           ;       -
 $BC82 INC DE        ;       DE++;
 $BC83 INC HL        ;       HL++;
 $BC84 DJNZ $BC62    ;     %> while (--B);
 $BC86 EXX           ;     -
 $BC87 LD A,H        ;     A = Hdash;
 $BC88 SUB $00       ;     A -= 0; // self modified $BC89
 $BC8A LD H,A        ;     Hdash = A;
 $BC8B INC L         ;     Ldash++;
 $BC8C EXX           ;     -
 $BC8D LD A,$14      ;     A = 20; // self modified $BC8E
 $BC8F ADD A,E       ;     A += E;
 $BC90 JR NC,$BC93   ; {    if (carry) D++;
 $BC92 INC D         ; }
*$BC93 LD E,A        ;     E = A;
 $BC94 LD A,$BC      ;     A = $BC; // self modified $BC95
 $BC96 ADD A,L       ;     A += L;
 $BC97 JR NC,$BC9A   ; {    if (carry) H++;
 $BC99 INC H         ; }
*$BC9A LD L,A        ;     L = A;
 $BC9B DEC C         ; {  %> while (--C);
 $BC9C JP NZ,$BC60   ; }
*$BC9F POP BC        ;   next: POP BC
 $BCA0 LD DE,$0020   ; {  IY += 32; // stride
 $BCA3 ADD IY,DE     ;
 $BCA5 DEC B         ; }
 $BCA6 JP NZ,$BB9E   ; %> while (--B);
 $BCA9 RET           ; return;

; select_tile_set
;
; Used by the routine at #R$BB98.
; .
; Turn a map ref? into a tile set pointer.
;
; O:BC Pointer to tile set.
; O:HL ?
c$BCAA EX AF,AF'     ; -
 $BCAB LD A,($68A0)  ; {if (room_index) <%
 $BCAE AND A         ;
 $BCAF JR Z,$BCB6    ; }
 $BCB1 LD BC,$9768   ;   BC = &interior_tiles[0];
 $BCB4 EX AF,AF'     ;   -
 $BCB5 RET           ;   return; %>
; Convert map position to an index into 7x5 supertile refs array.
*$BCB6 LD A,($81BC)  ; {else <% Adash = (((map_position >> 8) & 3) + L) >> 2;
 $BCB9 AND $03       ;
 $BCBB ADD A,L       ;
 $BCBC RRA           ;
 $BCBD RRA           ; }
 $BCBE AND $3F       ; {  L = (Adash & 0x3F) * 7;
 $BCC0 LD L,A        ;
 $BCC1 ADD A,A       ;
 $BCC2 ADD A,A       ;
 $BCC3 ADD A,A       ;
 $BCC4 SUB L         ;
 $BCC5 LD L,A        ; }
 $BCC6 LD A,($81BB)  ; {  Adash = (((map_position & 0xFF) & 3) + H) >> 2;
 $BCC9 AND $03       ;
 $BCCB ADD A,H       ;
 $BCCC RRA           ;
 $BCCD RRA           ; }
 $BCCE AND $3F       ; {  Adash = (Adash & 0x3F) + L;
 $BCD0 ADD A,L       ; }
 $BCD1 LD HL,$FF58   ; {  Adash = $FF58[Adash]; // 7x5 supertile refs
 $BCD4 ADD A,L       ;
 $BCD5 LD L,A        ;
 $BCD6 LD A,(HL)     ; }
 $BCD7 LD BC,$8590   ;   BC = &exterior_tiles_1[0];
 $BCDA CP $2D        ; {  if (Adash >= 45) <%
 $BCDC JR C,$BCEC    ; }
 $BCDE LD BC,$8A18   ;     BC = &exterior_tiles_2[0];
 $BCE1 CP $8B        ; {    if (Adash >= 139 && Adash < 204) <%
 $BCE3 JR C,$BCEC    ;
 $BCE5 CP $CC        ;
 $BCE7 JR NC,$BCEC   ; }
 $BCE9 LD BC,$90F8   ;       BC = &exterior_tiles_3[0]; %> %>
*$BCEC EX AF,AF'     ;   -
 $BCED RET           ;   return; %>

; map_tiles
;
; Map super-tile refs. 54x34. Each byte represents a 32x32 tile.
b$BCEE DEFB $60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$5F,$33,$3C,$58,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60
 $BD24 DEFB $60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$5F,$33,$34,$2E,$3D,$45,$3C,$58,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60
 $BD5A DEFB $60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$55,$5E,$31,$60,$60,$60,$60,$60,$60,$60,$60,$33,$34,$2B,$37,$2D,$3F,$28,$48,$42,$5B,$58,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60
 $BD90 DEFB $60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$82,$3E,$30,$2E,$57,$60,$60,$60,$60,$33,$34,$2E,$37,$2A,$2F,$2C,$41,$26,$47,$43,$53,$42,$3C,$57,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60
 $BDC6 DEFB $60,$60,$60,$60,$60,$60,$60,$60,$75,$76,$81,$5E,$31,$33,$3C,$5E,$31,$33,$34,$2B,$35,$2D,$36,$29,$25,$24,$23,$25,$49,$44,$54,$43,$3D,$45,$3C,$58,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60
 $BDFC DEFB $60,$60,$60,$60,$60,$60,$75,$76,$7C,$7F,$80,$3E,$30,$39,$3D,$3E,$30,$2E,$35,$2A,$2F,$38,$24,$25,$23,$23,$24,$25,$25,$23,$41,$44,$46,$27,$48,$42,$5B,$58,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60
 $BE32 DEFB $75,$76,$7A,$79,$75,$76,$7C,$7F,$7E,$3A,$5D,$40,$31,$3A,$3F,$40,$31,$2D,$2F,$29,$23,$25,$23,$24,$23,$25,$24,$23,$25,$24,$24,$23,$41,$26,$47,$43,$53,$42,$3C,$58,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60
 $BE68 DEFB $6A,$74,$77,$78,$7B,$7F,$7E,$3A,$2F,$2C,$49,$3B,$32,$2C,$41,$3B,$32,$38,$25,$23,$24,$24,$25,$25,$24,$23,$23,$25,$24,$23,$23,$25,$23,$24,$49,$44,$54,$43,$3D,$52,$59,$53,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60
 $BE9E DEFB $63,$64,$66,$6F,$7D,$3A,$2F,$38,$25,$24,$23,$23,$24,$25,$23,$25,$24,$24,$23,$25,$23,$25,$24,$24,$23,$25,$06,$07,$23,$25,$24,$25,$24,$23,$25,$23,$41,$44,$46,$51,$5D,$58,$5A,$53,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60
 $BED4 DEFB $65,$62,$6C,$6D,$36,$2C,$23,$24,$23,$25,$24,$25,$23,$24,$24,$23,$23,$25,$23,$24,$23,$25,$23,$23,$02,$03,$04,$08,$1A,$23,$25,$24,$25,$24,$23,$25,$24,$23,$41,$44,$5C,$5B,$57,$58,$5A,$53,$60,$60,$60,$60,$60,$60,$60,$60
 $BF0A DEFB $63,$64,$6B,$6E,$71,$24,$23,$23,$24,$23,$24,$24,$23,$25,$24,$23,$25,$25,$24,$23,$24,$23,$02,$03,$04,$05,$09,$1C,$1B,$25,$23,$23,$24,$25,$24,$23,$25,$25,$23,$24,$59,$53,$45,$3C,$57,$58,$5A,$60,$60,$60,$60,$60,$60,$60
 $BF40 DEFB $61,$62,$5A,$73,$72,$70,$71,$24,$23,$25,$23,$25,$24,$23,$25,$25,$24,$23,$23,$24,$02,$03,$14,$05,$0A,$17,$1E,$1D,$25,$23,$24,$24,$06,$07,$23,$25,$23,$24,$23,$25,$55,$58,$5A,$53,$45,$3C,$57,$60,$60,$60,$60,$60,$60,$60
 $BF76 DEFB $49,$3B,$68,$60,$5A,$73,$72,$70,$71,$23,$24,$75,$76,$7A,$79,$24,$23,$25,$00,$01,$04,$05,$0A,$21,$22,$16,$1F,$19,$24,$24,$02,$03,$04,$08,$1A,$23,$24,$25,$25,$24,$4B,$45,$3C,$58,$5A,$53,$45,$45,$60,$60,$60,$60,$60,$60
 $BFAC DEFB $24,$25,$41,$56,$68,$60,$5A,$73,$72,$70,$71,$6A,$74,$84,$85,$7A,$79,$23,$0D,$0C,$0B,$17,$20,$16,$15,$18,$24,$23,$02,$03,$04,$05,$09,$1C,$1B,$24,$23,$24,$23,$23,$4A,$50,$4C,$52,$5B,$58,$5A,$60,$60,$60,$60,$60,$60,$60
 $BFE2 DEFB $23,$24,$25,$23,$49,$56,$68,$69,$5A,$73,$72,$63,$86,$88,$74,$77,$78,$25,$0E,$0F,$12,$16,$15,$18,$24,$23,$02,$03,$14,$05,$0A,$17,$1E,$1D,$25,$25,$24,$23,$06,$07,$49,$44,$4D,$51,$4C,$52,$3C,$58,$60,$60,$60,$60,$60,$60
 $C018 DEFB $25,$23,$24,$25,$24,$23,$49,$67,$68,$69,$5A,$65,$87,$83,$64,$66,$6F,$24,$10,$11,$13,$18,$23,$25,$00,$01,$04,$05,$0A,$21,$22,$16,$1F,$19,$24,$23,$02,$03,$04,$08,$1A,$25,$41,$44,$4E,$51,$4C,$45,$3C,$58,$60,$60,$60,$60
 $C04E DEFB $23,$24,$25,$23,$25,$24,$25,$23,$41,$67,$68,$59,$CC,$CD,$62,$8A,$6D,$23,$25,$23,$23,$24,$23,$24,$0D,$0C,$0B,$17,$20,$16,$15,$18,$25,$23,$02,$03,$04,$05,$09,$1C,$1B,$24,$25,$23,$49,$44,$4E,$28,$4C,$52,$5B,$58,$60,$60
 $C084 DEFB $24,$25,$23,$25,$24,$23,$24,$24,$25,$23,$41,$89,$CE,$CF,$D2,$D5,$6F,$24,$23,$25,$24,$23,$25,$23,$0E,$0F,$12,$16,$15,$18,$25,$23,$02,$03,$14,$05,$0A,$17,$1E,$1D,$23,$23,$24,$B9,$BA,$25,$49,$26,$C8,$C9,$4C,$45,$3C,$58
 $C0BA DEFB $23,$24,$25,$24,$23,$23,$25,$B9,$BA,$B1,$B1,$49,$D0,$D1,$D3,$D6,$D8,$9B,$9C,$24,$23,$25,$24,$23,$10,$11,$13,$18,$24,$23,$00,$01,$04,$05,$0A,$21,$22,$16,$1F,$19,$23,$25,$BB,$BC,$BD,$BE,$9D,$97,$CA,$CB,$4D,$28,$4C,$45
 $C0F0 DEFB $25,$23,$24,$23,$25,$24,$BB,$BC,$BD,$BE,$AF,$B2,$B7,$93,$D4,$D7,$D9,$8E,$90,$9B,$9C,$23,$23,$25,$24,$25,$23,$25,$25,$24,$0D,$0C,$0B,$17,$20,$16,$15,$18,$23,$25,$25,$24,$24,$C5,$C0,$97,$96,$93,$95,$94,$41,$26,$C8,$C9
 $C126 DEFB $23,$25,$25,$24,$23,$B1,$B1,$C5,$C0,$97,$96,$B3,$B5,$B6,$91,$92,$8C,$8D,$8B,$8E,$90,$9B,$9C,$24,$25,$24,$24,$23,$23,$23,$0E,$0F,$12,$16,$15,$18,$24,$23,$25,$24,$23,$9C,$9D,$C6,$C2,$93,$95,$94,$91,$99,$98,$97,$CA,$CB
 $C15C DEFB $25,$24,$23,$B1,$B1,$B0,$AF,$C6,$C2,$93,$95,$B4,$8B,$8E,$90,$8F,$91,$92,$8C,$8D,$8B,$8E,$A8,$AA,$9C,$25,$23,$25,$25,$24,$10,$11,$13,$18,$25,$24,$23,$24,$23,$9C,$9D,$97,$96,$C7,$C4,$94,$92,$99,$98,$97,$96,$93,$95,$94
 $C192 DEFB $23,$25,$B1,$B0,$AF,$97,$96,$C7,$C4,$94,$91,$B8,$8C,$8D,$8B,$8E,$90,$8F,$91,$92,$8C,$8D,$A7,$A6,$90,$9B,$9C,$24,$24,$23,$24,$25,$24,$23,$24,$25,$23,$9C,$9D,$97,$96,$93,$95,$94,$91,$99,$98,$97,$96,$93,$95,$94,$23,$24
 $C1C8 DEFB $24,$24,$B0,$B2,$B7,$93,$95,$94,$92,$91,$92,$91,$92,$91,$8C,$8D,$8B,$8E,$A8,$A9,$91,$92,$A5,$A4,$8B,$8E,$90,$9B,$9C,$25,$23,$B9,$BA,$25,$23,$9C,$9D,$97,$96,$93,$95,$94,$B8,$99,$98,$97,$96,$93,$95,$94,$24,$25,$24,$23
 $C1FE DEFB $25,$23,$B0,$B3,$B5,$B6,$91,$92,$91,$92,$91,$92,$91,$92,$91,$92,$8C,$8D,$A7,$A6,$90,$8F,$91,$92,$8C,$8D,$8B,$8E,$90,$9B,$BB,$BC,$BD,$BE,$9D,$97,$96,$93,$95,$94,$91,$99,$98,$97,$96,$93,$95,$94,$23,$25,$23,$24,$25,$23
 $C234 DEFB $24,$25,$B1,$B4,$8B,$8E,$90,$8F,$91,$91,$92,$91,$92,$91,$92,$91,$92,$91,$A5,$A4,$8B,$8E,$90,$8F,$91,$92,$8C,$8D,$8B,$8E,$90,$BF,$C0,$97,$96,$93,$95,$94,$92,$99,$98,$97,$96,$93,$95,$94,$25,$23,$24,$23,$24,$25,$23,$25
 $C26A DEFB $23,$24,$25,$24,$8C,$8D,$8B,$8E,$90,$8F,$91,$92,$91,$92,$91,$92,$91,$92,$91,$92,$8C,$8D,$AB,$AC,$90,$8F,$91,$92,$8C,$8D,$8B,$C1,$C2,$93,$95,$94,$91,$99,$98,$97,$96,$93,$95,$94,$25,$24,$23,$24,$23,$25,$25,$24,$25,$23
 $C2A0 DEFB $25,$25,$24,$23,$25,$24,$8C,$8D,$8B,$8E,$90,$8F,$91,$91,$92,$B9,$BA,$91,$92,$99,$98,$97,$AD,$AE,$8B,$8E,$90,$8F,$91,$92,$8C,$C3,$C4,$94,$92,$99,$98,$97,$96,$93,$95,$94,$25,$23,$24,$23,$25,$23,$24,$24,$23,$25,$24,$25
 $C2D6 DEFB $24,$23,$25,$24,$23,$25,$25,$23,$8C,$8D,$8B,$8E,$90,$8F,$BB,$BC,$BD,$BE,$98,$97,$96,$93,$95,$94,$8C,$8D,$8B,$8E,$90,$8F,$91,$92,$91,$99,$98,$97,$96,$93,$95,$94,$23,$25,$24,$24,$23,$25,$24,$25,$23,$23,$25,$23,$24,$24
 $C30C DEFB $23,$25,$24,$23,$25,$23,$24,$25,$24,$23,$8C,$8D,$8B,$8E,$90,$BF,$C0,$97,$96,$93,$95,$94,$25,$23,$24,$23,$8C,$8D,$8B,$8E,$90,$A2,$A3,$97,$96,$93,$95,$94,$25,$24,$23,$24,$23,$24,$24,$23,$25,$24,$24,$25,$24,$25,$23,$23
 $C342 DEFB $25,$23,$24,$25,$24,$23,$25,$23,$25,$24,$25,$23,$8C,$8D,$8B,$C1,$C2,$93,$95,$94,$25,$24,$23,$23,$25,$25,$24,$23,$8C,$8D,$8B,$A0,$A1,$93,$95,$94,$25,$23,$25,$23,$24,$23,$25,$23,$25,$24,$24,$25,$23,$23,$25,$23,$24,$25
 $C378 DEFB $25,$25,$23,$24,$23,$24,$23,$25,$24,$23,$24,$25,$24,$25,$8C,$C3,$C4,$94,$23,$24,$23,$25,$24,$25,$24,$25,$23,$24,$25,$23,$8C,$9F,$9E,$94,$25,$25,$23,$24,$23,$25,$23,$24,$25,$23,$24,$23,$25,$24,$23,$24,$23,$24,$23,$23
 $C3AE DEFB $23,$24,$25,$23,$25,$24,$25,$23,$23,$25,$23,$24,$23,$24,$23,$25,$23,$24,$25,$23,$24,$23,$24,$24,$23,$24,$25,$24,$23,$25,$24,$25,$23,$24,$23,$24,$24,$25,$24,$23,$25,$23,$24,$25,$24,$25,$23,$25,$24,$25,$25,$23,$25,$23
 $C3E4 DEFB $23,$24,$25,$23,$25,$24,$25,$23,$23,$25,$23,$24,$23,$24,$23,$25,$23,$24,$25,$23,$24,$23,$24,$24,$23,$24,$25,$24,$23,$25,$24,$25,$23,$24,$23,$24,$24,$25,$24,$23,$25,$23,$24,$25,$24,$25,$23,$25,$24,$25,$25,$23,$25,$23

; prng_pointer
;
; Pointer to bytes to output as pseudo-random data.
; .
; Initially set to $9000. Wraps around after $90FF.
w$C41A DEFW $9000

; spawn_characters
;
; Used by the routines at #R$6939 and #R$9D78.
; .
; seems to move characters around, or perhaps just spawn them
; .
; Form a map position in DE.
c$C41C LD HL,($81BB) ; HL = map_position;
 $C41F LD A,L        ; {E = (L < 8) ? 0 : L;
 $C420 SUB $08       ;
 $C422 JR NC,$C425   ;
 $C424 XOR A         ;
*$C425 LD E,A        ; }
 $C426 LD A,H        ; {D = (H < 8) ? 0 : H;
 $C427 SUB $08       ;
 $C429 JR NC,$C42C   ;
 $C42B XOR A         ;
*$C42C LD D,A        ; }
; Walk all character structs.
 $C42D LD HL,$7612   ; HL = &character_structs[0];
 $C430 LD B,$1A      ; B = character_26_STOVE_1; // the 26 'real' characters
*$C432 BIT 6,(HL)    ; {do <% if (*HL & characterstruct_FLAG_DISABLED) goto
 $C434 JR NZ,$C474   ; skip;}
 $C436 PUSH HL       ;   (stash HL)
 $C437 INC HL        ;   HL++; // $7613
 $C438 LD A,($68A0)  ;   A = room_index;
 $C43B CP (HL)       ; {  if (A != *HL) goto unstash_skip; // not in the
 $C43C JR NZ,$C473   ; visible room}
 $C43E AND A         ; {  if (A != 0) goto indoors;
 $C43F JR NZ,$C46A   ; }
;   Outdoors.
 $C441 INC HL        ;   HL++; // $7614
 $C442 SUB (HL)      ;   A -= *HL; // A always starts as zero here
 $C443 INC HL        ;   HL++; // $7615
 $C444 SUB (HL)      ;   A -= *HL;
 $C445 INC HL        ;   HL++; // $7616
 $C446 SUB (HL)      ;   A -= *HL;
 $C447 LD C,A        ;   C = A;
 $C448 LD A,D        ;   A = D;
 $C449 CP C          ; {  if (C <= A) goto unstash_skip; // check
 $C44A JR NC,$C473   ; }
 $C44C ADD A,$20     ;   A += 32;
 $C44E JR NC,$C452   ; {  if (A > 0xFF) A = 0xFF;
 $C450 LD A,$FF      ; }
*$C452 CP C          ; {  if (C > A) goto unstash_skip; // check
 $C453 JR C,$C473    ; }
 $C455 DEC HL        ;   HL--; // $7615
 $C456 LD A,$40      ;   A = 64;
 $C458 ADD A,(HL)    ;   *HL += A;
 $C459 DEC HL        ;   HL--; // $7614
 $C45A SUB (HL)      ;   *HL -= A;
 $C45B ADD A,A       ;   A *= 2; // A == 128
 $C45C LD C,A        ;   C = A;
 $C45D LD A,E        ;   A = E;
 $C45E CP C          ; {  if (C <= A) goto unstash_skip; // check
 $C45F JR NC,$C473   ; }
 $C461 ADD A,$28     ;   A += 40;
 $C463 JR NC,$C467   ; {  if (A > 0xFF) A = 0xFF;
 $C465 LD A,$FF      ; }
*$C467 CP C          ; {  if (C > A) goto unstash_skip; // check
 $C468 JR C,$C473    ; }
*$C46A POP HL        ; indoors: (unstash HL)
 $C46B PUSH HL       ; {  (stash HL, DE, BC)
 $C46C PUSH DE       ;
 $C46D PUSH BC       ; }
 $C46E CALL $C4E0    ;   spawn_character();
 $C471 POP BC        ; {  (unstash BC, DE)
 $C472 POP DE        ; }
*$C473 POP HL        ; unstash_skip: (unstash HL)
*$C474 LD A,L        ; {skip: HL += 7; // stride
 $C475 ADD A,$07     ;
 $C477 LD L,A        ;
 $C478 JR NC,$C47B   ;
 $C47A INC H         ; }
*$C47B DJNZ $C432    ; %> while (--B);
 $C47D RET           ; return;

; purge_visible_characters
;
; Used by the routine at #R$9D78.
; .
; Run through all visible characters, resetting them.
c$C47E LD HL,($81BB) ; HL = &map_position;
 $C481 LD A,L        ; {E = MAX(L - 9, 0);
 $C482 SUB $09       ;
 $C484 JR NC,$C487   ;
 $C486 XOR A         ;
*$C487 LD E,A        ; }
 $C488 LD A,H        ; {D = MAX(H - 9, 0);
 $C489 SUB $09       ;
 $C48B JR NC,$C48E   ;
 $C48D XOR A         ;
*$C48E LD D,A        ; }
 $C48F LD B,$07      ; B = 7; // 7 iterations
 $C491 LD HL,$8020   ; HL = $8020; // iterate over non-player characters
*$C494 LD A,(HL)     ; do <% A = *HL;
 $C495 CP $FF        ; {  if (A == character_NONE) goto next;
 $C497 JP Z,$C4D9    ; }
 $C49A PUSH HL       ;   PUSH HL
 $C49B LD A,$1C      ; {  HL += 28;
 $C49D ADD A,L       ;
 $C49E LD L,A        ; }
 $C49F LD A,($68A0)  ; {  if (room_index != *HL) goto reset; // character not
 $C4A2 CP (HL)       ; in room
 $C4A3 JR NZ,$C4CF   ; }
 $C4A5 DEC L         ; {  C = *--HL;
 $C4A6 LD C,(HL)     ; }
 $C4A7 DEC L         ; {  A = *--HL;
 $C4A8 LD A,(HL)     ; }
 $C4A9 CALL $E550    ;   divide_by_8_with_rounding(C,A);
 $C4AC LD C,A        ;   C = A;
 $C4AD LD A,D        ; {  if (C <= D || C > MIN(D + 34, 255)) goto reset;
 $C4AE CP C          ;
 $C4AF JR NC,$C4CF   ;
 $C4B1 ADD A,$22     ;
 $C4B3 JR NC,$C4B7   ;
 $C4B5 LD A,$FF      ;
*$C4B7 CP C          ;
 $C4B8 JR C,$C4CF    ; }
 $C4BA DEC L         ; {  C = *--HL;
 $C4BB LD C,(HL)     ; }
 $C4BC DEC L         ; {  A = *--HL;
 $C4BD LD A,(HL)     ; }
 $C4BE CALL $E555    ;   divide_by_8(C,A);
 $C4C1 LD C,A        ;   C = A;
 $C4C2 LD A,E        ; {  if (C <= E || C > MIN(E + 42, 255)) goto reset;
 $C4C3 CP C          ;
 $C4C4 JR NC,$C4CF   ; }
 $C4C6 ADD A,$2A     ; {  goto pop_next;
 $C4C8 JR NC,$C4CC   ;
 $C4CA LD A,$FF      ;
*$C4CC CP C          ;
 $C4CD JR NC,$C4D8   ; }
*$C4CF POP HL        ;   reset: POP HL
 $C4D0 PUSH HL       ;   PUSH HL
 $C4D1 PUSH DE       ;   PUSH DE
 $C4D2 PUSH BC       ;   PUSH BC
 $C4D3 CALL $C5D3    ;   reset_visible_character();
 $C4D6 POP BC        ;   POP BC
 $C4D7 POP DE        ;   POP DE
*$C4D8 POP HL        ;   pop_next: POP HL
*$C4D9 LD A,$20      ; {  next: HL += 32;
 $C4DB ADD A,L       ;
 $C4DC LD L,A        ; }
 $C4DD DJNZ $C494    ; %> while (--B);
 $C4DF RET           ; return;

; spawn_character
;
; Used by the routine at #R$C41C.
; .
; Adds characters to the visible character list.
;
; I:HL Pointer to characterstruct.  // e.g. $766D
c$C4E0 BIT 6,(HL)     ; {if (*HL & characterstruct_FLAG_DISABLED) return;
 $C4E2 RET NZ         ; }
 $C4E3 PUSH HL        ; PUSH HL
; Find an empty visible character entry.
 $C4E4 LD HL,$8020    ; HL = $8020; // iterate over non-player characters
 $C4E7 LD DE,$0020    ; -
 $C4EA LD A,$FF       ; -
 $C4EC LD B,$07       ; B = 7; // 7 iterations
*$C4EE CP (HL)        ; {do <% if (*HL == vischar_BYTE0_EMPTY_SLOT) goto
 $C4EF JR Z,$C4F6     ; found_empty_slot;}
 $C4F1 ADD HL,DE      ;   HL += 32; // stride
 $C4F2 DJNZ $C4EE     ; %> while (--B);
 $C4F4 POP HL         ; POP HL
 $C4F5 RET            ; return;
; Empty slot found.
*$C4F6 POP DE         ; found_empty_slot: POP DE  // DE = HL (-> character
                      ; struct)
 $C4F7 PUSH HL        ; PUSH HL // resave
 $C4F8 POP IY         ; POP IY  // IY = HL (-> empty slot in visible character
                      ; list)
 $C4FA PUSH HL        ; PUSH HL // resave
 $C4FB PUSH DE        ; PUSH DE
 $C4FC INC DE         ; DE++;
 $C4FD LD HL,$81A4    ; HL = &saved_Y;
 $C500 LD A,(DE)      ; {A = *DE++;
 $C501 INC DE         ; }
 $C502 AND A          ; A &= A;
 $C503 JR NZ,$C518    ; if (A == 0) <%
 $C505 LD A,$03       ;   A = 3; // 3 iterations
*$C507 EX AF,AF'      ;   do <%
 $C508 LD A,(DE)      ; {    BC = *DE * 8;
 $C509 CALL $B1C7     ; }
 $C50C LD (HL),C      ; {    *HL++ = C;
 $C50D INC HL         ; }
 $C50E LD (HL),B      ; {    *HL++ = B;
 $C50F INC HL         ; }
 $C510 INC DE         ;     DE++;
 $C511 EX AF,AF'      ;     -
 $C512 DEC A          ; {  %> while (--A); %>
 $C513 JP NZ,$C507    ; }
 $C516 JR $C523       ; else <%
*$C518 LD B,$03       ; B = 3; // 3 iterations
*$C51A LD A,(DE)      ; {do <% *HL++ = *DE++;
 $C51B LD (HL),A      ;
 $C51C INC DE         ;
 $C51D INC HL         ; }
 $C51E LD (HL),$00    ; {  *HL++ = 0;
 $C520 INC HL         ; }
 $C521 DJNZ $C51A     ; %> while (--B); %>
*$C523 CALL $AFDF     ; collision();
 $C526 CALL Z,$B14C   ; if (Z) bounds_check();
 $C529 POP DE         ; POP DE
 $C52A POP HL         ; POP HL
 $C52B RET NZ         ; RET NZ
 $C52C LD A,(DE)      ; {A = *DE | characterstruct_FLAG_DISABLED;
 $C52D OR $40         ; }
 $C52F LD (DE),A      ; *DE = A;
 $C530 AND $1F        ; A &= characterstruct_BYTE0_MASK;
 $C532 LD (HL),A      ; {*HL++ = A;
 $C533 INC L          ; }
 $C534 LD (HL),$00    ; *HL = 0;
 $C536 PUSH DE        ; PUSH DE
 $C537 LD DE,$CD9A    ; DE = &character_meta_data[0]; // commandant
 $C53A AND A          ; {if (A) <%
 $C53B JR Z,$C54E     ; }
 $C53D LD DE,$CD9E    ;   DE = &character_meta_data[1]; // guard
 $C540 CP $10         ; {  if (A >= 16) <%
 $C542 JR C,$C54E     ; }
 $C544 LD DE,$CDA2    ;     DE = &character_meta_data[2]; // dog
 $C547 CP $14         ; {    if (A >= 20) <%
 $C549 JR C,$C54E     ; }
 $C54B LD DE,$CDA6    ;       DE = &character_meta_data[3]; %> %> %> //
                      ; prisoner
*$C54E EX DE,HL       ; EX DE,HL
 $C54F LD A,$07       ; {DE += 7;
 $C551 ADD A,E        ;
 $C552 LD E,A         ; }
 $C553 LDI            ; *DE++ = *HL++;
 $C555 LDI            ; *DE++ = *HL++;
 $C557 LD A,$0B       ; {DE += 11;
 $C559 ADD A,E        ;
 $C55A LD E,A         ; }
 $C55B LDI            ; *DE++ = *HL++;
 $C55D LDI            ; *DE++ = *HL++;
 $C55F LD A,E         ; {DE -= 8;
 $C560 SUB $08        ;
 $C562 LD E,A         ; }
 $C563 LD HL,$81A4    ; {memcpy(DE, &saved_Y, 6);
 $C566 LD BC,$0006    ;
 $C569 LDIR           ; }
 $C56B POP HL         ; POP HL
 $C56C INC HL         ; {HL += 5;
 $C56D INC HL         ;
 $C56E INC HL         ;
 $C56F INC HL         ;
 $C570 INC HL         ; }
 $C571 LD A,$07       ; {DE += 7;
 $C573 ADD A,E        ;
 $C574 LD E,A         ; }
 $C575 LD A,($68A0)   ; A = room_index;
 $C578 LD (DE),A      ; *DE = A; // sampled DE = $803C (vischar->room)
 $C579 AND A          ; {if (A) <%
 $C57A JR Z,$C588     ; }
 $C57C LD BC,$2040    ; {  play_speaker(sound_CHARACTER_ENTERS_2);
 $C57F CALL $A11D     ; }
 $C582 LD BC,$2030    ; {  play_speaker(sound_CHARACTER_ENTERS_1); %>
 $C585 CALL $A11D     ; }
*$C588 LD A,E         ; {DE -= 26;
 $C589 SUB $1A        ;
 $C58B LD E,A         ; }
 $C58C LDI            ; *DE++ = *HL++;
 $C58E LDI            ; *DE++ = *HL++;
 $C590 DEC HL         ; {HL -= 2;
 $C591 DEC HL         ; }
*$C592 LD A,(HL)      ; {if (*HL == 0) <%
 $C593 AND A          ;
 $C594 JR NZ,$C59C    ; }
 $C596 LD A,$03       ; {  DE += 3; %>
 $C598 ADD A,E        ;
 $C599 LD E,A         ; }
 $C59A JR $C5C4       ; else <%
*$C59C XOR A          ; {  byte_A13E = 0;
 $C59D LD ($A13E),A   ; }
 $C5A0 PUSH DE        ;   PUSH DE
 $C5A1 CALL $C651     ;   sub_C651();
 $C5A4 CP $FF         ; {  if (A == 255) <%
 $C5A6 JR NZ,$C5B6    ; }
 $C5A8 POP HL         ;     POP HL
 $C5A9 DEC L          ; {    HL -= 2;
 $C5AA DEC L          ; }
 $C5AB PUSH HL        ;     PUSH HL
 $C5AC CALL $CB2D     ;     CALL $CB2D
 $C5AF POP HL         ;     POP HL
 $C5B0 LD D,H         ; {    DE = HL + 2;
 $C5B1 LD E,L         ;
 $C5B2 INC E          ;
 $C5B3 INC E          ; }
 $C5B4 JR $C592       ;     goto $C592; %>
*$C5B6 CP $80         ; {  if (A == 128) IY[1] |= vischar_BYTE1_BIT6; // $8021
 $C5B8 JR NZ,$C5BE    ;
 $C5BA SET 6,(IY+$01) ; }
*$C5BE POP DE         ;   POP DE
 $C5BF LD BC,$0003    ; {  memcpy(DE, HL, 3); %>
 $C5C2 LDIR           ; }
*$C5C4 XOR A          ; {*DE = 0;
 $C5C5 LD (DE),A      ; }
 $C5C6 LD A,E         ; {DE -= 7;
 $C5C7 SUB $07        ;
 $C5C9 LD E,A         ; }
 $C5CA EX DE,HL       ; EX DE,HL
 $C5CB PUSH HL        ; PUSH HL
 $C5CC CALL $B71B     ; reset_position();
 $C5CF POP HL         ; POP HL
 $C5D0 JP $C918       ; character_behaviour(); return; // exit via

; reset_visible_character
;
; Used by the routines at #R$68A2, #R$69C9, #R$B79B and #R$C47E.
; .
; Reset a visible character (either a character or an object).
;
; I:HL Pointer to visible character.
c$C5D3 LD A,(HL)     ; A = *HL;
 $C5D4 CP $FF        ; {if (A == character_NONE) return;
 $C5D6 RET Z         ; }
 $C5D7 CP $1A        ; {if (A >= character_26_STOVE_1) <%
 $C5D9 JR C,$C602    ;
 $C5DB EX AF,AF'     ; }
; A stove/crate character.
 $C5DC LD (HL),$FF   ; {  HL[0] = character_NONE
 $C5DE INC L         ; }
 $C5DF LD (HL),$FF   ;   HL[1] = 0xFF; // flags
 $C5E1 LD A,$06      ; {  HL[7] = 0; // more flags
 $C5E3 ADD A,L       ;
 $C5E4 LD L,A        ;
 $C5E5 LD (HL),$00   ; }
 $C5E7 ADD A,$08     ; {  HL += 0x0F; // vischar + 0x0F
 $C5E9 LD L,A        ;
 $C5EA EX AF,AF'     ; }
; Save the old position.
 $C5EB LD DE,$69AE   ;   DE = &movable_items[0]; // stove1
 $C5EE CP $1A        ; {  if (A != character_26_STOVE_1) <%
 $C5F0 JR Z,$C5FC    ; }
 $C5F2 LD DE,$69C0   ;     DE = &movable_items[2]; // stove2
 $C5F5 CP $1B        ; {    if (A != character_27_STOVE_2) <%
 $C5F7 JR Z,$C5FC    ; }
 $C5F9 LD DE,$69B7   ;       DE = &movable_items[1]; %> %> // crate
*$C5FC LD BC,$0006   ; {  memcpy(DE, HL, 6);
 $C5FF LDIR          ; }
 $C601 RET           ;   return; %>
; A non-object character.
*$C602 EX DE,HL      ; else <% -
 $C603 CALL $C7B9    ;   DE = get_character_struct(A);
 $C606 RES 6,(HL)    ;   *DE &= ~characterstruct_FLAG_DISABLED;
 $C608 LD A,$1C      ; {  -
 $C60A ADD A,E       ;
 $C60B LD E,A        ; }
 $C60C LD A,(DE)     ;   A = HL[0x1C]; // room index
 $C60D INC HL        ; {  *++DE = A; // characterstruct.room = room index;
 $C60E LD (HL),A     ;
 $C60F EX AF,AF'     ; }
 $C610 EX DE,HL      ;   -
 $C611 LD A,L        ; {  HL[7] = 0; // flags
 $C612 SUB $15       ;
 $C614 LD L,A        ;
 $C615 LD (HL),$00   ; }
 $C617 ADD A,$08     ; {  HL += 0x0F; // vischar+0x0F
 $C619 LD L,A        ; }
 $C61A INC DE        ; {  DE++; // &characterstruct.y
 $C61B EX AF,AF'     ; }
 $C61C AND A         ; {  if (A == 0) <% // outdoors
 $C61D JR NZ,$C624   ; }
 $C61F CALL $E542    ;     pos_to_tinypos(HL,DE); %> // HL,DE updated
 $C622 JR $C62D      ;   else <%
*$C624 LD B,$03      ;     B = 3;
*$C626 LD A,(HL)     ; {    do <% *DE++ = *HL;
 $C627 LD (DE),A     ; }
 $C628 INC L         ; {      HL += 2;
 $C629 INC L         ;
 $C62A INC DE        ; }
 $C62B DJNZ $C626    ;     %> while (--B); %>
*$C62D LD A,L        ; {  HL -= 21; // reset HL to point to original vischar
 $C62E SUB $15       ;
 $C630 LD L,A        ; }
 $C631 LD A,(HL)     ;   A = *HL; // HL points to vischar // sampled HL =
                     ; $8040, $8020, $8080, $80A0
 $C632 LD (HL),$FF   ; {  *HL++ = character_NONE;
 $C634 INC L         ; }
 $C635 LD (HL),$FF   ; {  *HL++ = 0xFF; // flags
 $C637 INC L         ; }
 $C638 CP $10        ; {  if (A >= character_16_GUARD_DOG_1 && A <=
 $C63A JR C,$C64C    ; character_19_GUARD_DOG_4) <%
 $C63C CP $14        ;
 $C63E JR NC,$C64C   ; }
 $C640 LD (HL),$FF   ; {    *HL++ = 255;
 $C642 INC L         ; }
 $C643 LD (HL),$00   ;     *HL = 0;
 $C645 CP $12        ; {    if (A >= character_18_GUARD_DOG_3) *HL = 24;
 $C647 JR C,$C64B    ;
 $C649 LD (HL),$18   ; }
*$C64B DEC L         ;     HL--; %>
*$C64C LDI           ;   *DE++ = *HL++; // copy target into charstruct
 $C64E LDI           ;   *DE++ = *HL++;
 $C650 RET           ;   return; %>

; sub_C651
;
; Used by the routines at #R$A3BB, #R$C4E0, #R$C6A0 and #R$CB23.
; .
; ...
;
; I:HL Pointer to characterstruct + 5. // sampled = $768E, 7695, 769C, 7617, 761E, 7625, 762C, 7633, 7656, 765D
; O:A  0/255
; O:HL Pointer to somewhere in word_783A.
c$C651 LD A,(HL)     ; A = *HL;
 $C652 CP $FF        ; {if (A == 0xFF) <%
 $C654 JR NZ,$C664   ; }
 $C656 INC HL        ; {  A = *++HL & characterstruct_BYTE6_MASK_HI;
 $C657 LD A,(HL)     ;
 $C658 AND $F8       ; }
 $C65A LD (HL),A     ;   *HL = A;
 $C65B CALL $CB85    ;   random_nibble();
 $C65E AND $07       ;   A &= characterstruct_BYTE6_MASK_LO;
 $C660 ADD A,(HL)    ;   A += *HL;
 $C661 LD (HL),A     ; {  *HL = A; %>
 $C662 JR $C692      ; }
*$C664 PUSH HL       ; else <% PUSH HL
 $C665 INC HL        ; {  C = *++HL; // byte6
 $C666 LD C,(HL)     ; }
 $C667 CALL $CB79    ;   DE = element_A_of_table_7738(A);
 $C66A LD H,$00      ;   H = 0;
 $C66C LD A,C        ;   A = C;
 $C66D CP $FF        ; {  if (A == 0xFF) H--; // H = 0xFF
 $C66F JR NZ,$C672   ;
 $C671 DEC H         ; }
*$C672 LD L,A        ;   L = A;
 $C673 ADD HL,DE     ;   HL += DE;
 $C674 EX DE,HL      ;   EX DE,HL
 $C675 LD A,(DE)     ;   A = *DE;
 $C676 CP $FF        ;   if (A == 0xFF) ...
 $C678 POP HL        ;   POP HL // interleaved
 $C679 JR Z,$C69D    ;   ... goto return_255;
 $C67B AND $7F       ;   A &= 0x7F;
 $C67D CP $28        ; {  if (A < 40) <%
 $C67F JR NC,$C68F   ; }
 $C681 LD A,(DE)     ;     A = *DE;
 $C682 BIT 7,(HL)    ; {    if (*HL & (1<<7)) A ^= 0x80; // 762C, 8002, 7672,
 $C684 JR Z,$C688    ; 7679, 7680, 76A3, 76AA, 76B1, 76B8, 76BF, ... looks
 $C686 XOR $80       ; quite general}
*$C688 CALL $6A12    ;     transition();
 $C68B INC HL        ;     HL++;
 $C68C LD A,$80      ;     A = 0x80;
 $C68E RET           ;     return; %>
*$C68F LD A,(DE)     ; {  A = *DE - 40; %>
 $C690 SUB $28       ; }
; sample A=$38,2D,02,06,1E,20,21,3C,23,2B,3A,0B,2D,04,03,1C,1B,21,3C,...
*$C692 ADD A,A       ; {HL = word_783A[A];
 $C693 LD HL,$783A   ;
 $C696 ADD A,L       ;
 $C697 LD L,A        ;
 $C698 JR NC,$C69B   ;
 $C69A INC H         ; }
*$C69B XOR A         ; A = 0;
 $C69C RET           ; return;
*$C69D LD A,$FF      ; return_255: A = 255;
 $C69F RET           ; return;

; move_characters
;
; Used by the routine at #R$9D78.
; .
; Moves characters around.
c$C6A0 LD A,$FF      ; {byte_A13E = 0xFF;
 $C6A2 LD ($A13E),A  ; }
 $C6A5 LD A,($8217)  ; {character_index = (character_index + 1) % character_26;
 $C6A8 INC A         ; // 26 = highest + 1 character
 $C6A9 CP $1A        ;
 $C6AB JR NZ,$C6AE   ;
 $C6AD XOR A         ;
*$C6AE LD ($8217),A  ; }
 $C6B1 CALL $C7B9    ; HL = get_character_struct(character_index); // pass
                     ; character_index as A
 $C6B4 BIT 6,(HL)    ; {if (*HL & characterstruct_FLAG_DISABLED) return;
 $C6B6 RET NZ        ; }
 $C6B7 PUSH HL       ; PUSH HL
 $C6B8 INC HL        ; {A = *++HL; // characterstruct byte1 == room
 $C6B9 LD A,(HL)     ; }
 $C6BA AND A         ; {if (A != room_0_outdoors) <%
 $C6BB JR Z,$C6C5    ; }
 $C6BD CALL $CCFB    ;   is_item_discoverable_interior(A);
 $C6C0 JR NZ,$C6C5   ; {  if (Z) item_discovered(); %>
 $C6C2 CALL $CD31    ; }
*$C6C5 POP HL        ; POP HL
 $C6C6 INC HL        ; {HL += 2; // point at characterstruct y,x coords
 $C6C7 INC HL        ; }
 $C6C8 PUSH HL       ; PUSH HL
 $C6C9 INC HL        ; {HL += 3; // point at characterstruct byte2
 $C6CA INC HL        ;
 $C6CB INC HL        ; }
 $C6CC LD A,(HL)     ; A = *HL;
 $C6CD AND A         ; {if (A == 0) <%
 $C6CE JR NZ,$C6D2   ; }
 $C6D0 POP HL        ;   POP HL
 $C6D1 RET           ;   return; %>
*$C6D2 CALL $C651    ; sub_C651();
 $C6D5 CP $FF        ; {if (A == 0xFF) <%
 $C6D7 JP NZ,$C6FF   ; }
 $C6DA LD A,($8217)  ;   A = character_index;
; Not a player character.
 $C6DD AND A         ; {  if (A != character_0_COMMANDANT) <%
 $C6DE JR Z,$C6F2    ; }
 $C6E0 CP $0C        ; {    if (A >= character_12_GUARD_12) goto char_ge_12;
 $C6E2 JR NC,$C6F9   ; }
; Characters 1..11.
*$C6E4 LD A,(HL)     ; {    back: *HL++ ^= 0x80;
 $C6E5 XOR $80       ;
 $C6E7 LD (HL),A     ;
 $C6E8 INC HL        ; }
 $C6E9 BIT 7,A       ; {    if (A & 7) (*HL) -= 2;
 $C6EB JR Z,$C6EF    ;
 $C6ED DEC (HL)      ;
 $C6EE DEC (HL)      ; }
*$C6EF INC (HL)      ;     (*HL)++; // weird // i.e -1 or +1
 $C6F0 POP HL        ;     POP HL
 $C6F1 RET           ;     return; %>
; Player character.
*$C6F2 LD A,(HL)     ; {  char_is_zero: A = *HL & characterstruct_BYTE5_MASK;
 $C6F3 AND $7F       ; // fetching a character index? // sampled = HL = $7617
                     ; (characterstruct + 5) // location}
 $C6F5 CP $24        ; {  if (A != 36) goto back;
 $C6F7 JR NZ,$C6E4   ; }
*$C6F9 POP DE        ;   char_ge_12: POP DE
 $C6FA JP $C7C6      ;   goto character_event; // exit via
;   Two unused bytes.
 $C6FD DEFB $18,$6F  ;   %>
*$C6FF CP $80        ; {if (A == 0x80) <%
 $C701 JP NZ,$C76E   ; }
 $C704 POP DE        ;   POP DE
 $C705 DEC DE        ; {  A = DE[-1];
 $C706 LD A,(DE)     ;
 $C707 INC DE        ; }
 $C708 PUSH HL       ;   PUSH HL
 $C709 AND A         ; {  if (A == 0) <%
 $C70A JP NZ,$C71F   ; }
 $C70D PUSH DE       ;     PUSH DE
 $C70E LD DE,$81A4   ;     DE = &saved_Y;
 $C711 LD B,$02      ;     B = 2; // 2 iters
*$C713 LD A,(HL)     ; {    do <% *DE++ = *HL++ >> 1;
 $C714 AND A         ;
 $C715 RRA           ;
 $C716 LD (DE),A     ;
 $C717 INC HL        ;
 $C718 INC DE        ; }
 $C719 DJNZ $C713    ;     %> while (--B);
 $C71B LD HL,$81A4   ;     HL = &saved_Y;
 $C71E POP DE        ;     POP DE %>
*$C71F DEC DE        ; {  if (DE[-1] == 0) A = 2; else A = 6;
 $C720 LD A,(DE)     ;
 $C721 INC DE        ;
 $C722 AND A         ;
 $C723 LD A,$02      ;
 $C725 JR Z,$C729    ;
 $C727 LD A,$06      ; }
*$C729 EX AF,AF'     ;   EX AF,AF'
 $C72A LD B,$00      ;   B = 0;
 $C72C CALL $C79A    ;   increment_DE_by_diff(A, B, HL, DE);
 $C72F INC DE        ;   DE++;
 $C730 INC HL        ;   HL++;
 $C731 CALL $C79A    ;   increment_DE_by_diff(A, B, HL, DE);
 $C734 POP HL        ;   POP HL
 $C735 LD A,B        ; {  if (B != 2) return; // managed to move
 $C736 CP $02        ;
 $C738 RET NZ        ; }
 $C739 DEC DE        ; {  DE -= 2;
 $C73A DEC DE        ; }
 $C73B DEC HL        ;   HL--;
 $C73C LD A,(HL)     ; {  *DE = (*HL & doorposition_BYTE0_MASK_HI) >> 2; //
 $C73D AND $FC       ; mask
 $C73F RRA           ;
 $C740 RRA           ;
 $C741 LD (DE),A     ; }
; Stuff reading from door_positions.
 $C742 LD A,(HL)     ; {  if ((*HL & doorposition_BYTE0_MASK_LO) < 2) <% //
 $C743 AND $03       ; sampled HL =
 $C745 CP $02        ; 78fa,794a,78da,791e,78e2,790e,796a,790e,791e,7962,791a
 $C747 JR NC,$C750   ; }
 $C749 INC HL        ; {    HL += 5; %>
 $C74A INC HL        ;
 $C74B INC HL        ;
 $C74C INC HL        ;
 $C74D INC HL        ; }
 $C74E JR $C753      ;   else <%
*$C750 DEC HL        ; {    HL -= 3; %>
 $C751 DEC HL        ;
 $C752 DEC HL        ; }
*$C753 LD A,(DE)     ; {  A = *DE++
 $C754 INC DE        ; }
 $C755 AND A         ; {  if (A) <%
 $C756 JR Z,$C761    ; }
 $C758 LDI           ;     *DE++ = *HL++;
 $C75A LDI           ;     *DE++ = *HL++;
 $C75C LDI           ;     *DE++ = *HL++;
 $C75E DEC DE        ;     DE--; %>
 $C75F JR $C78B      ;   else <%
*$C761 LD B,$03      ;     B = 3;
*$C763 LD A,(HL)     ; {    do <% *DE++ = *HL++ >> 1;
 $C764 AND A         ;
 $C765 RRA           ;
 $C766 LD (DE),A     ;
 $C767 INC HL        ;
 $C768 INC DE        ; }
 $C769 DJNZ $C763    ;     %> while (--B)
 $C76B DEC DE        ;     DE--; %> %>
 $C76C JR $C78B      ; else <%
*$C76E POP DE        ;   POP DE
 $C76F DEC DE        ; {  tmpA = DE[-1];
 $C770 LD A,(DE)     ;
 $C771 INC DE        ; }
 $C772 AND A         ;   -
 $C773 LD A,$02      ;   A = 2;
 $C775 JR Z,$C779    ; {  if (tmpA) A = 6;
 $C777 LD A,$06      ; }
*$C779 EX AF,AF'     ;   EX AF,AF'
 $C77A LD B,$00      ;   B = 0;
 $C77C CALL $C79A    ;   increment_DE_by_diff()
 $C77F INC HL        ;   HL++;
 $C780 INC DE        ;   DE++;
 $C781 CALL $C79A    ;   increment_DE_by_diff()
 $C784 INC DE        ;   DE++;
 $C785 LD A,B        ; {  if (B != 2) return; %>
 $C786 CP $02        ;
 $C788 JR Z,$C78B    ;
 $C78A RET           ; }
*$C78B INC DE        ; DE++;
 $C78C EX DE,HL      ; EX DE,HL
 $C78D LD A,(HL)     ; A = *HL; // address? 761e 7625 768e 7695 7656 7695 7680
                     ; // => character struct entry + 5
 $C78E CP $FF        ; {if (A == 0xFF) return;
 $C790 RET Z         ; }
 $C791 BIT 7,A       ; if ((A & (1<<7)) != 0) ...
 $C793 INC HL        ; HL++;       // interleaved
 $C794 JR NZ,$C798   ; ... goto exit;
 $C796 INC (HL)      ; (*HL)++;
 $C797 RET           ; return;
*$C798 DEC (HL)      ; exit: (*HL)--;
 $C799 RET           ; return;

; increment_DE_by_diff
;
; Used by the routine at #R$C6A0.
; .
; [leaf] (<- move_characters)
; .
; Gets called with successive bytes.
;
; I:Adash Maximum value of delta?
; I:B     Reset to zero.
; I:DE    Pointer to bytes within character_structs. // 761b,761c, 7622,7623, 7629,762a, 7630,7631, 7653,...
; I:HL    Pointer to bytes within word_783A.         // 787a,787b, 787e,787f, 78b2,78b3, 7884,7885, 7892,...
; O:B     Incremented by one if no movement.
c$C79A EX AF,AF'     ; -
 $C79B LD C,A        ; C = Adash; // ie. banked A // some maximum value
 $C79C EX AF,AF'     ; -
 $C79D LD A,(DE)     ; {A = *DE - *HL; // delta
 $C79E SUB (HL)      ; }
 $C79F JR NZ,$C7A3   ; if (A == 0) <%
 $C7A1 INC B         ;   B++;
 $C7A2 RET           ;   return; %>
*$C7A3 JR NC,$C7B0   ; else if (A < 0) <%
 $C7A5 NEG           ;   A = -A; // absolute
 $C7A7 CP C          ; {  if (A >= C) A = C;
 $C7A8 JR C,$C7AB    ;
 $C7AA LD A,C        ; }
*$C7AB LD C,A        ; {  *DE += A;
 $C7AC LD A,(DE)     ;
 $C7AD ADD A,C       ;
 $C7AE LD (DE),A     ; }
 $C7AF RET           ;   return; %>
*$C7B0 CP C          ; {else <% if (A >= C) A = C;
 $C7B1 JR C,$C7B4    ;
 $C7B3 LD A,C        ; }
*$C7B4 LD C,A        ; {  *DE -= A;
 $C7B5 LD A,(DE)     ;
 $C7B6 SUB C         ;
 $C7B7 LD (DE),A     ; }
 $C7B8 RET           ;   return; %>

; get_character_struct
;
; Used by the routines at #R$A38C, #R$C5D3 and #R$C6A0.
;
; I:A  Character index.
; O:HL Character struct.
c$C7B9 LD L,A        ; {HL = &character_structs[A];
 $C7BA ADD A,A       ;
 $C7BB ADD A,A       ;
 $C7BC ADD A,A       ;
 $C7BD SUB L         ;
 $C7BE LD HL,$7612   ;
 $C7C1 ADD A,L       ;
 $C7C2 LD L,A        ;
 $C7C3 RET NC        ;
 $C7C4 INC H         ; }
 $C7C5 RET           ; return;

; character_event
;
; Used by the routines at #R$C6A0 and #R$CB23.
; .
; Makes characters sit, sleep or other things TBD.
;
; I:HL Points to character_struct.unk2 or vischar.target.
c$C7C6 LD A,(HL)     ; A = *HL;
 $C7C7 CP $07        ; {if (A >= character_7_GUARD_7  && A <=
 $C7C9 JR C,$C7D0    ; character_12_GUARD_12) goto character_sleeps;
 $C7CB CP $0D        ;
 $C7CD JP C,$A444    ; }
*$C7D0 CP $12        ; {if (A >= character_18_GUARD_DOG_3 && A <=
 $C7D2 JR C,$C7D9    ; character_22_PRISONER_3) goto character_sits;
 $C7D4 CP $17        ;
 $C7D6 JP C,$A420    ; }
*$C7D9 PUSH HL       ; PUSH HL // POPped by handlers
 $C7DA LD HL,$C7F9   ; map = &character_to_event_handler_index_map[0];
 $C7DD LD B,$18      ; B = NELEMS(character_to_event_handler_index_map); // 24
                     ; iterations
; Locate the character in the map.
*$C7DF CP (HL)       ; {do <% if (A == map->character) goto call_action;
 $C7E0 JR Z,$C7EA    ; }
 $C7E2 INC HL        ; {  map += 2;
 $C7E3 INC HL        ; }
 $C7E4 DJNZ $C7DF    ; %> while (--B);
 $C7E6 POP HL        ; POP HL
 $C7E7 LD (HL),$00   ; *HL = 0; // no action
 $C7E9 RET           ; return;
*$C7EA INC HL        ; {call_action: goto character_event_handlers[*++HL];
 $C7EB LD A,(HL)     ;
 $C7EC ADD A,A       ;
 $C7ED LD C,A        ;
 $C7EE LD B,$00      ;
 $C7F0 LD HL,$C829   ;
 $C7F3 ADD HL,BC     ;
 $C7F4 LD A,(HL)     ;
 $C7F5 INC HL        ;
 $C7F6 LD H,(HL)     ;
 $C7F7 LD L,A        ;
 $C7F8 JP (HL)       ; }
; character_to_event_handler_index_map
; .
; Array of (character + flags, character event handler index) mappings.
 $C7F9 DEFW $00A6    ; { character_6_GUARD_6       | 0b10100000, charevnt_0 },
 $C7FB DEFW $00A7    ; { character_7_GUARD_7       | 0b10100000, charevnt_0 },
 $C7FD DEFW $01A8    ; { character_8_GUARD_8       | 0b10100000, charevnt_1 },
 $C7FF DEFW $01A9    ; { character_9_GUARD_9       | 0b10100000, charevnt_1 },
 $C801 DEFW $0005    ; { character_5_GUARD_5       | 0b00000000, charevnt_0 },
 $C803 DEFW $0106    ; { character_6_GUARD_6       | 0b00000000, charevnt_1 },
 $C805 DEFW $0385    ; { character_5_GUARD_5       | 0b10000000, charevnt_3 },
                     ; // checks byte_A13E case 1
 $C807 DEFW $0386    ; { character_6_GUARD_6       | 0b10000000, charevnt_3 },
                     ; // checks byte_A13E case 1
 $C809 DEFW $020E    ; { character_14_GUARD_14     | 0b00000000, charevnt_2 },
 $C80B DEFW $020F    ; { character_15_GUARD_15     | 0b00000000, charevnt_2 },
 $C80D DEFW $008E    ; { character_14_GUARD_14     | 0b10000000, charevnt_0 },
 $C80F DEFW $018F    ; { character_15_GUARD_15     | 0b10000000, charevnt_1 },
 $C811 DEFW $0510    ; { character_16_GUARD_DOG_1  | 0b00000000, charevnt_5 },
                     ; // checks byte_A13E case 2
 $C813 DEFW $0511    ; { character_16_GUARD_DOG_2  | 0b00000000, charevnt_5 },
                     ; // checks byte_A13E case 2
 $C815 DEFW $0090    ; { character_16_GUARD_DOG_1  | 0b10000000, charevnt_0 },
 $C817 DEFW $0191    ; { character_16_GUARD_DOG_2  | 0b10000000, charevnt_1 },
 $C819 DEFW $00A0    ; { character_0_COMMANDANT    | 0b10100000, charevnt_0 },
 $C81B DEFW $01A1    ; { character_1_GUARD_1       | 0b10100000, charevnt_1 },
 $C81D DEFW $072A    ; { character_10_GUARD_10     | 0b00100000, charevnt_7 },
 $C81F DEFW $082C    ; { character_12_GUARD_12     | 0b00100000, charevnt_8 },
                     ; // player sleeps
 $C821 DEFW $092B    ; { character_11_GUARD_11     | 0b00100000, charevnt_9 },
                     ; // player sits
 $C823 DEFW $06A4    ; { character_4_GUARD_4       | 0b10100000, charevnt_6 },
                     ; // go to 0x0315
 $C825 DEFW $0A24    ; { character_4_GUARD_4       | 0b00100000, charevnt_10
                     ; },// released from solitary
 $C827 DEFW $0425    ; { character_5_GUARD_5       | 0b00100000, charevnt_4 },
                     ; // zero morale_1
; character_event_handlers
; .
; Array of pointers to character event handlers.
 $C829 DEFW $C864    ; charevnt_handler *character_event_handlers[] = {
                     ; &charevnt_handler_0,
 $C82B DEFW $C85C    ;   &charevnt_handler_1,
 $C82D DEFW $C860    ;   &charevnt_handler_2,
 $C82F DEFW $C86C    ;   &charevnt_handler_3_check_var_A13E,
 $C831 DEFW $C83F    ;   &charevnt_handler_4_zero_morale_1,
 $C833 DEFW $C877    ;   &charevnt_handler_5_check_var_A13E_anotherone,
 $C835 DEFW $C845    ;   &charevnt_handler_6,
 $C837 DEFW $C882    ;   &charevnt_handler_7,
 $C839 DEFW $C88D    ;   &charevnt_handler_8_player_sleeps,
 $C83B DEFW $C889    ;   &charevnt_handler_9_player_sits,
 $C83D DEFW $C84C    ;   &charevnt_handler_10_player_released_from_solitary, };
; charevnt_handler_4_zero_morale_1
 $C83F XOR A         ; {morale_1 = 0;
 $C840 LD ($A13A),A  ; }
 $C843 JR $C864      ; goto charevnt_handler_0;
; charevnt_handler_6
 $C845 POP HL        ; POP HL // (popped) sampled HL = $80C2 (x2), $8042  //
                     ; likely target location
 $C846 LD (HL),$03   ; {*HL++ = 0x03;
 $C848 INC HL        ; }
 $C849 LD (HL),$15   ; *HL   = 0x15;
 $C84B RET           ; return;
; charevnt_handler_10_player_released_from_solitary
 $C84C POP HL        ; POP HL
 $C84D LD (HL),$A4   ; {*HL++ = 0xA4;
 $C84F INC HL        ; }
 $C850 LD (HL),$03   ; *HL   = 0x03;
 $C852 XOR A         ; {automatic_player_counter = 0; // force automatic
 $C853 LD ($A139),A  ; control}
 $C856 LD BC,$2500   ; {set_hero_target_location(0x0025); return;
 $C859 JP $A344      ; }
; charevnt_handler_1
 $C85C LD C,$10      ; C = 0x10; // 0xFF10
 $C85E JR $C866      ; goto exit;
; charevnt_handler_2
 $C860 LD C,$38      ; C = 0x38; // 0xFF38
 $C862 JR $C866      ; goto exit;
; charevnt_handler_0
*$C864 LD C,$08      ; C = 0x08; // 0xFF08 // sampled
                     ; HL=$8022,$8042,$8002,$8062
*$C866 POP HL        ; exit: POP HL
 $C867 LD (HL),$FF   ; {*HL++ = 0xFF;
 $C869 INC HL        ; }
 $C86A LD (HL),C     ; *HL   = C;
 $C86B RET           ; return;
; charevnt_handler_3_check_var_A13E
 $C86C POP HL        ; POP HL
 $C86D LD A,($A13E)  ; {if (byte_A13E == 0) goto byte_A13E_is_zero; else goto
 $C870 AND A         ; byte_A13E_is_nonzero;
 $C871 JP Z,$A3F8    ;
 $C874 JP $A3F3      ; }
; charevnt_handler_5_check_var_A13E_anotherone
 $C877 POP HL        ; POP HL
 $C878 LD A,($A13E)  ; {if (byte_A13E == 0) goto byte_A13E_is_zero_anotherone;
 $C87B AND A         ; else goto byte_A13E_is_nonzero_anotherone;
 $C87C JP Z,$A4D8    ;
 $C87F JP $A4D3      ; }
; charevnt_handler_7
 $C882 POP HL        ; POP HL
 $C883 LD (HL),$05   ; {*HL++ = 0x05;
 $C885 INC HL        ; }
 $C886 LD (HL),$00   ; *HL   = 0x00;
 $C888 RET           ; return;
; charevnt_handler_9_player_sits
 $C889 POP HL        ; POP HL
 $C88A JP $A47F      ; goto hero_sits;
; charevnt_handler_8_player_sleeps
 $C88D POP HL        ; POP HL
 $C88E JP $A489      ; goto hero_sleeps;

; food_discovered_counter
;
; Likely: A countdown until any food item is discovered.
; .
; (<- follow_suspicious_character, bribes_solitary_food)
b$C891 DEFB $00

; follow_suspicious_character
;
; Used by the routine at #R$9D78.
; .
; Causes characters to follow the player if they're being suspicious. Poisoned
; food handling.
c$C892 XOR A         ; {byte_A13E = 0;
 $C893 LD ($A13E),A  ; }
 $C896 LD A,($A130)  ; {if (bell) hostiles_persue();
 $C899 AND A         ;
 $C89A CALL Z,$CCAB  ; }
 $C89D LD HL,$C891   ; {if (food_discovered_counter != 0 &&
 $C8A0 LD A,(HL)     ; --food_discovered_counter == 0) <%
 $C8A1 AND A         ;
 $C8A2 JR Z,$C8B1    ;
 $C8A4 DEC (HL)      ;
 $C8A5 JR NZ,$C8B1   ; }
 $C8A7 LD HL,$76F9   ; {  item_structs[item_FOOD].item &=
 $C8AA RES 5,(HL)    ; ~itemstruct_ITEM_FLAG_POISONED;}
 $C8AC LD C,$07      ;   C = item_FOOD;
 $C8AE CALL $CD31    ;   item_discovered(); %>
*$C8B1 LD IY,$8020   ; IY = $8020; // iterate over non-player characters
 $C8B5 LD B,$07      ; B = 7; // iterations
*$C8B7 PUSH BC       ; do <% -
 $C8B8 LD A,(IY+$01) ; {  if (IY[1] != 0) <% // flags
 $C8BB CP $FF        ;
 $C8BD JP Z,$C8F4    ; }
 $C8C0 LD A,(IY+$00) ; {    A = IY[0] & vischar_BYTE0_MASK; // character index
 $C8C3 AND $1F       ; }
; Change '20' here to a higher number and prisoners will start following the
; player too. The character numbers I've defined earlier and the ones used here
; (and observed) elsewhere are a different set where < 20 is a guard.
 $C8C5 CP $14        ; {    if (A < 20) <%
 $C8C7 JP NC,$C8F1   ; }
 $C8CA PUSH AF       ;       -
 $C8CB CALL $CCCD    ;       is_item_discoverable();
 $C8CE LD A,($A138)  ; {      if (red_flag || automatic_player_counter > 0)
 $C8D1 AND A         ; guards_follow_suspicious_character();
 $C8D2 JR NZ,$C8D8   ;
 $C8D4 LD A,($A139)  ;
 $C8D7 AND A         ;
*$C8D8 CALL NZ,$CC37 ; }
 $C8DB POP AF        ;       -
 $C8DC CP $0F        ; {      if (A > 15) <% // 16,17,18,19  // could these be
 $C8DE JP Z,$C8F1    ; the dogs?
 $C8E1 JP C,$C8F1    ; }
 $C8E4 PUSH IY       ; {        if (item_structs[item_FOOD].room &
 $C8E6 POP HL        ; itemstruct_ROOM_FLAG_ITEM_NEARBY) IY[1] = 3; %> %>
 $C8E7 INC L         ;
 $C8E8 LD A,($76FA)  ;
 $C8EB BIT 7,A       ;
 $C8ED JR Z,$C8F1    ;
 $C8EF LD (HL),$03   ; }
*$C8F1 CALL $C918    ;     character_behaviour(); %>
*$C8F4 POP BC        ;   -
 $C8F5 LD DE,$0020   ; {  IY += 32; // stride
 $C8F8 ADD IY,DE     ; }
 $C8FA DEC B         ; {%> while (--B);
 $C8FB JP NZ,$C8B7   ; }
 $C8FE LD A,($A138)  ; {if (!red_flag && (morale_1 || automatic_player_counter
 $C901 AND A         ; == 0)) <%}
; Pointless JP NZ (jumps to RET, RET NZ would do).
 $C902 JP NZ,$C917   ;
 $C905 LD A,($A13A)  ;
 $C908 AND A         ;
 $C909 JR NZ,$C910   ;
 $C90B LD A,($A139)  ;
 $C90E AND A         ;
 $C90F RET NZ        ;
*$C910 LD IY,$8000   ;   IY = $8000;
 $C914 CALL $C918    ;   character_behaviour(); %>
*$C917 RET           ; return;

; character_behaviour
;
; Used by the routines at #R$C4E0 and #R$C892.
; .
; Character behaviour?
;
; I:IY Pointer to visible character block.
c$C918 LD A,(IY+$07)  ; A = IY[7]; // $8007 etc. // more flags
 $C91B LD B,A         ; B = A;
 $C91C AND $0F        ; A &= vischar_BYTE7_MASK;
 $C91E JR Z,$C925     ; if (A) <%
 $C920 DEC B          ; {  IY[7] = --B; // decrement but don't affect flags
 $C921 LD (IY+$07),B  ; }
 $C924 RET            ;   return; %>
*$C925 PUSH IY        ; {HL = IY;
 $C927 POP HL         ; }
 $C928 INC L          ; {A = *++HL; // incremented HL is $8021 $8041 $8061
 $C929 LD A,(HL)      ; }
 $C92A AND A          ; {if (A != 0) <%
 $C92B JP Z,$C9BA     ; }
 $C92E CP $01         ; {  if (A == 1) <%
 $C930 JR NZ,$C943    ; }
*$C932 PUSH HL        ;     PUSH HL
 $C933 EXX            ;     -
 $C934 POP DE         ;     POP DEdash // ie. DEdash = HL
 $C935 INC E          ; {    DEdash += 3;
 $C936 INC E          ;
 $C937 INC E          ; }
 $C938 LD HL,$81B8    ;     HLdash = &player_map_position.y;
 $C93B LDI            ;     *DEdash++ = *HLdash++;
 $C93D LDI            ;     *DEdash++ = *HLdash++;
 $C93F EXX            ;     -
 $C940 JP $C9C0       ;     goto jump_c9c0; %>
*$C943 CP $02         ; {  else if (A == 2) <%
 $C945 JR NZ,$C953    ; }
 $C947 LD A,($A139)   ; {    if (automatic_player_counter) goto $C932; // jump
 $C94A AND A          ; into case 1
 $C94B JR NZ,$C932    ; }
 $C94D LD (HL),$00    ; {    *HL++ = 0;
 $C94F INC L          ; }
 $C950 JP $CB23       ;     sub_CB23(); return; %> // exit via
*$C953 CP $03         ; {  else if (A == 3) <%
 $C955 JR NZ,$C979    ; }
 $C957 PUSH HL        ;     PUSH HL
 $C958 EX DE,HL       ;     EX DE,HL
 $C959 LD HL,$76FA    ; {    if (item_structs[item_FOOD].room &
 $C95C BIT 7,(HL)     ; itemstruct_ROOM_FLAG_ITEM_NEARBY) <%
 $C95E JR Z,$C96C     ; }
 $C960 INC HL         ;       HL++;
 $C961 LD A,E         ; {      DE += 3;
 $C962 ADD A,$03      ;
 $C964 LD E,A         ; }
 $C965 LDI            ;       *DE++ = *HL++;
 $C967 LDI            ;       *DE++ = *HL++;
 $C969 POP HL         ;       POP HL
 $C96A JR $C9C0       ;       goto jump_c9c0; %>
*$C96C XOR A          ;     else <% A = 0;
 $C96D LD (DE),A      ;       *DE = A;
 $C96E EX DE,HL       ;       EX DE,HL
 $C96F INC L          ; {      *++HL = 0xFF;
 $C970 LD (HL),$FF    ; }
 $C972 INC L          ; {      *++HL = 0;
 $C973 LD (HL),$00    ; }
 $C975 POP HL         ;       POP HL
 $C976 JP $CB23       ;       sub_CB23(); return; %> %> // exit via
*$C979 CP $04         ; {  else if (A == 4) <%
 $C97B JR NZ,$C9BA    ; }
 $C97D PUSH HL        ;     PUSH HL
 $C97E LD A,($AF8E)   ;     A = bribed_character;
 $C981 CP $FF         ; {    if (A != character_NONE) <%
 $C983 JR Z,$C995     ; }
 $C985 LD C,A         ;       -
 $C986 LD B,$07       ;       B = 7; // 7 iterations
 $C988 LD HL,$8020    ;       HL = $8020; // iterate over non-player characters
*$C98B LD A,C         ;       do <%
 $C98C CP (HL)        ; {        if (*HL == A) goto found_bribed;
 $C98D JR Z,$C99C     ; }
 $C98F LD A,$20       ; {        HL += 32;
 $C991 ADD A,L        ;
 $C992 LD L,A         ; }
 $C993 DJNZ $C98B     ;       %> while (--B); %>
*$C995 POP HL         ;     POP HL
 $C996 LD (HL),$00    ; {    *HL++ = 0;
 $C998 INC L          ; }
 $C999 JP $CB23       ;     sub_CB23(); return; // exit via
; Found bribed character.
*$C99C LD A,$0F       ; {found_bribed: HL += 15;
 $C99E ADD A,L        ;
 $C99F LD L,A         ; }
 $C9A0 POP DE         ;     POP DE
 $C9A1 PUSH DE        ;     PUSH DE
 $C9A2 LD A,E         ; {    DE += 3;
 $C9A3 ADD A,$03      ;
 $C9A5 LD E,A         ; }
 $C9A6 LD A,($68A0)   ; {    if (room_index) <%
 $C9A9 AND A          ;
 $C9AA JP NZ,$C9B2    ; }
 $C9AD CALL $E542     ;       pos_to_tinypos(HL,DE); %>
 $C9B0 JR $C9B7       ;     else <%
*$C9B2 LDI            ;       *DE++ = *HL++;
 $C9B4 INC L          ;       HL++;
 $C9B5 LDI            ;       *DE++ = *HL++; %>
*$C9B7 POP HL         ;     POP HL
 $C9B8 JR $C9C0       ;     goto jump_c9c0; %> %>
*$C9BA INC L          ; {A = HL[1];
 $C9BB LD A,(HL)      ;
 $C9BC DEC L          ; }
 $C9BD AND A          ; {if (A == 0) goto gizzards;
 $C9BE JR Z,$C9F5     ; }
*$C9C0 LD A,(HL)      ; jump_c9c0: A = *HL; // HL is $8001
 $C9C1 EXX            ; -
 $C9C2 LD C,A         ; Cdash = A;
 $C9C3 LD A,($68A0)   ; {if (room_index) <%
 $C9C6 AND A          ;
 $C9C7 JR Z,$C9CE     ; }
 $C9C9 LD HL,$CB75    ;   HLdash = &multiply_by_1; %>
 $C9CC JR $C9DA       ; else <%
*$C9CE BIT 6,C        ; {  if (Cdash & vischar_BYTE1_BIT6) <%
 $C9D0 JR Z,$C9D7     ; }
 $C9D2 LD HL,$B295    ;     HLdash = &multiply_by_4; %>
 $C9D5 JR $C9DA       ;   else <%
*$C9D7 LD HL,$B1C7    ;     HLdash = &multiply_by_8; %> %>
*$C9DA LD ($CA13),HL  ; ($CA13) = HLdash; // self-modify move_character_Y:$CA13
 $C9DD LD ($CA4B),HL  ; ($CA4B) = HLdash; // self-modify move_character_X:$CA4B
 $C9E0 EXX            ; -
 $C9E1 BIT 5,(IY+$07) ; {if (IY[7] & vischar_BYTE7_BIT5) goto bit5set; // I
 $C9E5 JR NZ,$C9FF    ; could 'else' this chunk.}
 $C9E7 INC L          ; {HL += 3;
 $C9E8 INC L          ;
 $C9E9 INC L          ; }
 $C9EA CALL $CA11     ; move_character_Y();
 $C9ED JR NZ,$C9F5    ; if (Z) <%
 $C9EF CALL $CA49     ;   move_character_X();
 $C9F2 JP Z,$CA81     ;   if (Z) goto bribes_solitary_food; %> // exit via
; This entry point is used by the routine at #R$CA81.
*$C9F5 CP (IY+$0D)    ; {gizzards: if (A != IY[13]) IY[13] = A |
 $C9F8 RET Z          ; vischar_BYTE13_BIT7; // sampled IY=$8040,$8020,$8000
 $C9F9 OR $80         ;
 $C9FB LD (IY+$0D),A  ; }
 $C9FE RET            ; return;
*$C9FF LD A,$04       ; {bit5set: L += 4;
 $CA01 ADD A,L        ;
 $CA02 LD L,A         ; }
 $CA03 CALL $CA49     ; move_character_X();
 $CA06 JR NZ,$C9F5    ; {if (Z) move_character_Y();
 $CA08 CALL $CA11     ; }
 $CA0B JR NZ,$C9F5    ; if (!Z) goto gizzards; // keep trying to move?
 $CA0D DEC L          ; HL--;
 $CA0E JP $CA81       ; bribes_solitary_food(); return; // exit via

; move_character_Y
;
; Used by the routine at #R$C918.
; .
; Returns vischar[15] - scalefn(vischar[4])
;
; I:HL Pointer to visible character block + 4.
; I:IY Pointer to visible character block.
; O:A  8/4/0 .. meaning ?
; O:HL Pointer to ?
c$CA11 LD A,(HL)      ; A = *HL; // sampled HL=$8004,$8044,$8064,$8084
 $CA12 CALL $B1C7     ; multiply_by_8(); // self modified by #R$C9DA
 $CA15 LD A,L         ; {HL += 11; // position on Y axis ($800F etc.)
 $CA16 ADD A,$0B      ;
 $CA18 LD L,A         ; }
 $CA19 LD E,(HL)      ; {E = *HL++;
 $CA1A INC L          ; }
 $CA1B LD D,(HL)      ; D = *HL;
 $CA1C EX DE,HL       ; -
 $CA1D SBC HL,BC      ; DE -= BC;
 $CA1F JR Z,$CA3E     ; if (DE) <%
 $CA21 JP M,$CA30     ;   if (DE > 0) <% // +ve
 $CA24 LD A,H         ; {    if (D != 0   || E >= 3)  <% A = 8; return; %> %>
 $CA25 AND A          ; else <% // -ve
 $CA26 JR NZ,$CA2D    ;
 $CA28 LD A,L         ;
 $CA29 CP $03         ;
 $CA2B JR C,$CA3E     ;
*$CA2D LD A,$08       ;
 $CA2F RET            ; }
*$CA30 LD A,H         ; {    if (D != 255 || E < 254) <% A = 4; return; %> %>
 $CA31 CP $FF         ; %>
 $CA33 JR NZ,$CA3B    ;
 $CA35 LD A,L         ;
 $CA36 CP $FE         ;
 $CA38 JP NC,$CA3E    ;
*$CA3B LD A,$04       ;
 $CA3D RET            ; }
*$CA3E EX DE,HL       ; -
 $CA3F LD A,L         ; {HL -= 11;
 $CA40 SUB $0B        ;
 $CA42 LD L,A         ; }
 $CA43 SET 5,(IY+$07) ; IY[7] |= vischar_BYTE7_BIT5;
 $CA47 XOR A          ; A = 0;
 $CA48 RET            ; return;

; move_character_X
;
; Used by the routine at #R$C918.
; .
; Nearly identical routine to move_character_Y above.
;
; I:HL Pointer to visible character block + 5.
; I:IY Pointer to visible character block.
; O:A  5/7/0 .. meaning ?
; O:HL Pointer to ?
c$CA49 LD A,(HL)      ; A = *HL; // sampled HL=$8025,$8065,$8005
 $CA4A CALL $B1C7     ; multiply_by_8(); // self modified by #R$C9DD
 $CA4D LD A,L         ; {HL += 12; // position on X axis ($8011 etc.)
 $CA4E ADD A,$0C      ;
 $CA50 LD L,A         ; }
 $CA51 LD E,(HL)      ; {E = *HL++;
 $CA52 INC L          ; }
 $CA53 LD D,(HL)      ; D = *HL;
 $CA54 EX DE,HL       ; -
 $CA55 SBC HL,BC      ; DE -= BC;
 $CA57 JR Z,$CA76     ; if (DE) <%
 $CA59 JP M,$CA68     ;   if (DE > 0) <% // +ve
 $CA5C LD A,H         ; {    if (D != 0   || E >= 3)  <% A = 5; return; %> %>
 $CA5D AND A          ; else <% // -ve
 $CA5E JR NZ,$CA65    ;
 $CA60 LD A,L         ;
 $CA61 CP $03         ;
 $CA63 JR C,$CA76     ;
*$CA65 LD A,$05       ;
 $CA67 RET            ; }
*$CA68 LD A,H         ; {    if (D != 255 || E < 254) <% A = 7; return; %> %>
 $CA69 CP $FF         ; %>
 $CA6B JR NZ,$CA73    ;
 $CA6D LD A,L         ;
 $CA6E CP $FE         ;
 $CA70 JP NC,$CA76    ;
*$CA73 LD A,$07       ;
 $CA75 RET            ; }
*$CA76 EX DE,HL       ; -
 $CA77 LD A,L         ; {HL -= 14;
 $CA78 SUB $0E        ;
 $CA7A LD L,A         ; }
 $CA7B RES 5,(IY+$07) ; IY[7] &= ~vischar_BYTE7_BIT5;
 $CA7F XOR A          ; A = 0;
 $CA80 RET            ; return;

; bribes_solitary_food
;
; Used by the routine at #R$C918.
; .
; Bribes, solitary, food, 'character enters' sound.
;
; I:IY Pointer to $8000, $8020, $8040, $8060, $8080
; I:HL Pointer to $8004, $8024, $8044, $8064, $8084
c$CA81 LD A,(IY+$01) ; A = IY[1];
 $CA84 LD C,A        ; C = A;
 $CA85 AND $3F       ; A &= vischar_BYTE1_MASK;
 $CA87 JR Z,$CAB6    ; if (A) <%
 $CA89 CP $01        ; {  if (A == vischar_BYTE1_PERSUE) <%
 $CA8B JR NZ,$CA99   ; }
 $CA8D LD A,($AF8E)  ; {    if (IY[0] == bribed_character) <% accept_bribe();
 $CA90 CP (IY+$00)   ; return; %> // exit via
 $CA93 JP Z,$B107    ; }
 $CA96 JP $CB98      ;     else <% solitary(); return; %> %> // exit via
*$CA99 CP $02        ; {  else if (A == vischar_BYTE1_BIT1 || A ==
 $CA9B RET Z         ; vischar_BYTE1_BIT2) <% return; %>
 $CA9C CP $04        ;
 $CA9E RET Z         ; }
 $CA9F PUSH HL       ;   -
 $CAA0 LD HL,$76F9   ; {  if ((item_structs[item_FOOD].item &
 $CAA3 BIT 5,(HL)    ; itemstruct_ITEM_FLAG_POISONED) == 0) A = 32; else A =
 $CAA5 LD A,$20      ; 255;
 $CAA7 JR Z,$CAAB    ;
 $CAA9 LD A,$FF      ; }
*$CAAB LD ($C891),A  ;   food_discovered_counter = A;
 $CAAE POP HL        ;   -
 $CAAF DEC L         ; {  HL -= 2;
 $CAB0 DEC L         ; }
 $CAB1 XOR A         ; {  *HL = 0;
 $CAB2 LD (HL),A     ; }
 $CAB3 JP $C9F5      ;   goto character_behaviour:$C9F5; %>
*$CAB6 BIT 6,C       ; {if (C & vischar_BYTE1_BIT6) <%
 $CAB8 JR Z,$CB13    ; }
 $CABA DEC L         ; {  C = *--HL; // 80a3, 8083, 8063, 8003 // likely target
 $CABB LD C,(HL)     ; location}
 $CABC DEC L         ; {  A = *--HL;
 $CABD LD A,(HL)     ; }
 $CABE PUSH HL       ;   -
 $CABF CALL $CB79    ;   DE = element_A_of_table_7738(A);
 $CAC2 POP HL        ;   -
 $CAC3 LD A,E        ; {  DE += C;
 $CAC4 ADD A,C       ;
 $CAC5 LD E,A        ;
 $CAC6 JR NC,$CAC9   ;
 $CAC8 INC D         ; }
*$CAC9 LD A,(DE)     ;   A = *DE;
 $CACA BIT 7,(HL)    ; {  if (*HL & vischar_BYTE2_BIT7) A ^= 0x80;
 $CACC JR Z,$CAD0    ;
 $CACE XOR $80       ; }
*$CAD0 PUSH AF       ;   PUSH AF
 $CAD1 LD A,(HL)     ; {  A = *HL++; // $8002, ...
 $CAD2 INC L         ; }
 $CAD3 BIT 7,A       ; {  if (A & vischar_BYTE2_BIT7) (*HL) -= 2; // $8003, ...
 $CAD5 JR Z,$CAD9    ; // likely target location
 $CAD7 DEC (HL)      ;
 $CAD8 DEC (HL)      ; }
*$CAD9 INC (HL)      ;   (*HL)++; // likely target location
 $CADA POP AF        ;   POP AF
 $CADB CALL $6A12    ;   get_door_position(); // door related
 $CADE LD A,(HL)     ; {  IY[0x1C] = (*HL >> 2) & 0x3F; // IY=$8000 => $801C
 $CADF RRA           ; (room index) // HL=$790E,$7962,$795E => door position
 $CAE0 RRA           ; thingy // 0x3F is door_positions[0] room mask shifted
 $CAE1 AND $3F       ; right 2
 $CAE3 LD (IY+$1C),A ; }
 $CAE6 LD A,(HL)     ; {  A = *HL & doorposition_BYTE0_MASK_LO; // door
 $CAE7 AND $03       ; position thingy, lowest two bits -- index?}
 $CAE9 CP $02        ; {  if (A < 2) HL += 5; else HL -= 3; // delta of 8 -
 $CAEB JP NC,$CAF5   ; related to door stride stuff?
 $CAEE INC HL        ;
 $CAEF INC HL        ;
 $CAF0 INC HL        ;
 $CAF1 INC HL        ;
 $CAF2 INC HL        ;
 $CAF3 JR $CAF8      ;
*$CAF5 DEC HL        ;
 $CAF6 DEC HL        ;
 $CAF7 DEC HL        ; }
*$CAF8 PUSH HL       ;   PUSH HL
 $CAF9 PUSH IY       ; {  HL = IY;
 $CAFB POP HL        ; }
 $CAFC LD A,L        ; {  if (L == 0) <% // player's vischar only
 $CAFD AND A         ;
 $CAFE JP NZ,$CB08   ; }
 $CB01 INC L         ;     HL++; // $8000 -> $8001
 $CB02 RES 6,(HL)    ; {    *HL++ &= ~vischar_BYTE1_BIT6;
 $CB04 INC L         ; }
 $CB05 CALL $CB23    ;     sub_CB23(); %>
*$CB08 POP HL        ;   POP HL
 $CB09 CALL $68A2    ;   transition();
 $CB0C LD BC,$2030   ; {  play_speaker(sound_CHARACTER_ENTERS_1);
 $CB0F CALL $A11D    ; }
 $CB12 RET           ;   return; %>
*$CB13 DEC L         ; {HL -= 2;
 $CB14 DEC L         ; }
 $CB15 LD A,(HL)     ; A = *HL; // $8002 etc. // likely target location
 $CB16 CP $FF        ; {if (A != 0xFF) <%
 $CB18 JR Z,$CB23    ; }
 $CB1A INC L         ;   HL++;
 $CB1B BIT 7,A       ; {  if (A & vischar_BYTE2_BIT7) <%
 $CB1D JR Z,$CB21    ; }
 $CB1F DEC (HL)      ; {    (*HL) -= 2; %> // $8003 etc.
 $CB20 DEC (HL)      ; }
*$CB21 INC (HL)      ;   else <% (*HL)++;
 $CB22 DEC L         ;     HL--; %> %>

; sub_CB23
;
; Used by the routines at #R$A3BB, #R$B107, #R$C918 and #R$CA81.
;
; I:A  Character index?
; I:HL ?
c$CB23 PUSH HL        ; PUSH HL
 $CB24 CALL $C651     ; sub_C651();
 $CB27 CP $FF         ; {if (A == 0xFF) <%
 $CB29 JP NZ,$CB61    ; }
 $CB2C POP HL         ;   POP HL
; This entry point is used by the routine at #R$C4E0.
*$CB2D LD A,L         ; {  if (L != 0x02) <% // if not player's vischar
 $CB2E CP $02         ;
 $CB30 JP Z,$CB46     ; }
 $CB33 LD A,(IY+$00)  ; {    if (IY[0] & vischar_BYTE0_MASK == 0) <%
 $CB36 AND $1F        ;
 $CB38 JR NZ,$CB42    ; }
 $CB3A LD A,(HL)      ; {      A = *HL & vischar_BYTE2_MASK;
 $CB3B AND $7F        ; }
 $CB3D CP $24         ; {      if (A == 36) goto $CB46; // character index
 $CB3F JR Z,$CB46     ; }
 $CB41 XOR A          ;       A = 0; %> // self modified? (suspect not - just
                      ; countering next if statement)
*$CB42 CP $0C         ; {    if (A == 12) goto $CB50; %>
 $CB44 JR C,$CB50     ; }
*$CB46 PUSH HL        ;   PUSH HL
 $CB47 CALL $C7C6     ;   character_event();
 $CB4A POP HL         ;   POP HL
 $CB4B LD A,(HL)      ;   A = *HL;
 $CB4C AND A          ; {  if (A == 0) return;
 $CB4D RET Z          ; }
 $CB4E JR $CB23       ;   sub_CB23(); return; // exit via
*$CB50 LD A,(HL)      ; {  *HL++ = *HL ^ 0x80;
 $CB51 XOR $80        ;
 $CB53 LD (HL),A      ;
 $CB54 INC HL         ; }
 $CB55 BIT 7,A        ; {  if (A & (1<<7)) <% // which flag is this?
 $CB57 JR Z,$CB5B     ; }
 $CB59 DEC (HL)       ; {    (*HL) -= 2; %>
 $CB5A DEC (HL)       ; }
*$CB5B INC (HL)       ;   (*HL)++
 $CB5C DEC HL         ;   HL--;
 $CB5D XOR A          ;   A = 0;
 $CB5E RET            ;   return; %> // strictly the terminating brace is after
                      ; the following unreferenced bytes
 $CB5F DEFB $18,$09   ; Unreferenced bytes.
*$CB61 CP $80         ; {if (A == 128) <%
 $CB63 JP NZ,$CB6A    ; }
 $CB66 SET 6,(IY+$01) ;   IY[1] |= vischar_BYTE1_BIT6; %>
*$CB6A POP DE         ; POP DE
 $CB6B INC E          ; {memcpy(DE + 2, HL, 2);
 $CB6C INC E          ;
 $CB6D LD BC,$0002    ;
 $CB70 LDIR           ; }
 $CB72 LD A,$80       ; A = 128;
 $CB74 RET            ; return;

; multiply_by_1
c$CB75 LD C,A        ; {BC = A; return;
 $CB76 LD B,$00      ;
 $CB78 RET           ; }

; element_A_of_table_7738
;
; Used by the routines at #R$C651 and #R$CA81.
;
; I:A  Index.
; O:DE Element.
c$CB79 ADD A,A       ; {DE = table_7738[A];
 $CB7A LD E,A        ;
 $CB7B LD D,$00      ;
 $CB7D LD HL,$7738   ;
 $CB80 ADD HL,DE     ;
 $CB81 LD E,(HL)     ;
 $CB82 INC HL        ;
 $CB83 LD D,(HL)     ; }
 $CB84 RET           ; return;

; random_nibble
;
; Used by the routine at #R$C651.
; .
; Pseudo random number generator.
;
; O:A Pseudo-random number from 0..15.
c$CB85 PUSH HL       ; PUSH HL
 $CB86 LD HL,($C41A) ; {HL = prng_pointer + 1;
 $CB89 INC L         ; }
; sampled HL = $902E,$902F,$9030,$9031,$9032,$9033,$9034,$9035,... looks like
; it's fetching exterior tiles
 $CB8A LD A,(HL)     ; {A = *HL & 0x0F;
 $CB8B AND $0F       ; }
 $CB8D LD ($C41A),HL ; prng_pointer = HL;
 $CB90 POP HL        ; POP HL
 $CB91 RET           ; return;

; unused_CB92
;
; Unreferenced bytes.
u$CB92 DEFB $13,$40,$30,$10,$7E,$F0

; solitary
;
; Used by the routines at #R$A51C, #R$AFDF, #R$CA81 and #R$EFCB.
; .
; Silence bell.
c$CB98 LD A,$FF        ; {bell = bell_STOP;
 $CB9A LD ($A130),A    ; }
; Seize player's held items.
 $CB9D LD HL,$8215     ; HL = &items_held[0];
 $CBA0 LD C,(HL)       ; C = *HL;
 $CBA1 LD (HL),A       ; *HL = item_NONE;
 $CBA2 CALL $CD31      ; item_discovered();
 $CBA5 LD HL,$8216     ; HL = &items_held[1];
 $CBA8 LD C,(HL)       ; C = *HL;
 $CBA9 LD (HL),$FF     ; *HL = item_NONE;
 $CBAB CALL $CD31      ; item_discovered();
 $CBAE CALL $7C33      ; draw_all_items();
; Reset all items. [unsure]
 $CBB1 LD B,$10        ; B = 16; // all items
 $CBB3 LD HL,$76C9     ; HL = &item_structs[0].room;
*$CBB6 PUSH BC         ; do <% PUSH BC
 $CBB7 PUSH HL         ;   PUSH HL
 $CBB8 LD A,(HL)       ; {  A = *HL & itemstruct_ROOM_MASK;
 $CBB9 AND $3F         ; }
 $CBBB JR NZ,$CBDC     ;   if (A == room_0_outdoors) <%
 $CBBD DEC HL          ; {    A = *--HL;
 $CBBE LD A,(HL)       ; }
 $CBBF INC HL          ; {    HL += 2;
 $CBC0 INC HL          ; }
 $CBC1 EX DE,HL        ;     EX DE,HL
 $CBC2 EX AF,AF'       ;     EX AF,AF'
 $CBC3 XOR A           ;     A = 0;
*$CBC4 PUSH AF         ;     do <% PUSH AF
 $CBC5 PUSH DE         ;       PUSH DE
 $CBC6 CALL $A01A      ;       CALL $A01A // end of in_permitted_area
 $CBC9 JR Z,$CBD5      ;       if (Z) goto $CBD5;
 $CBCB POP DE          ;       POP DE
 $CBCC POP AF          ;       POP AF
 $CBCD INC A           ; {    %> while (++A != 3);
 $CBCE CP $03          ;
 $CBD0 JP NZ,$CBC4     ; }
 $CBD3 JR $CBDC        ;     goto next;
*$CBD5 POP DE          ;     POP DE
 $CBD6 POP AF          ;     POP AF
 $CBD7 EX AF,AF'       ;     EX AF,AF'
 $CBD8 LD C,A          ;     C = A;
 $CBD9 CALL $CD31      ;     item_discovered(); %>
*$CBDC POP HL          ;   next: POP HL
 $CBDD POP BC          ;   POP BC
 $CBDE LD DE,$0007     ; {  HL += 7; // stride
 $CBE1 ADD HL,DE       ; }
 $CBE2 DJNZ $CBB6      ; %> while (--B);
 $CBE4 LD A,$18        ; {$801C = room_24_solitary;
 $CBE6 LD ($801C),A    ; }
 $CBE9 LD A,$14        ; {current_door = 20;
 $CBEB LD ($68A1),A    ; }
 $CBEE LD B,$23        ; {decrease_morale(35);
 $CBF0 CALL $A0E0      ; }
 $CBF3 CALL $B79B      ; reset_map_and_characters();
 $CBF6 LD DE,$7613     ; {memcpy(&character_structs[0].secondbyte,
 $CBF9 LD HL,$CC31     ; &solitary_player_reset_data, 6);
 $CBFC LD BC,$0006     ;
 $CBFF LDIR            ; }
 $CC01 LD B,$0D        ; {queue_message_for_display(message_YOU_ARE_IN_SOLITARY);
 $CC03 CALL $7D15      ; }
 $CC06 LD B,$0E        ; {queue_message_for_display(message_WAIT_FOR_RELEASE);
 $CC08 CALL $7D15      ; }
 $CC0B LD B,$13        ; {queue_message_for_display(message_ANOTHER_DAY_DAWNS);
 $CC0D CALL $7D15      ; }
 $CC10 LD A,$FF        ; {morale_1 = 0xFF; // inhibit user input
 $CC12 LD ($A13A),A    ; }
 $CC15 XOR A           ; {automatic_player_counter = 0; // immediately take
 $CC16 LD ($A139),A    ; automatic control of player}
 $CC19 LD HL,$CE2E     ; {$8015 = sprite_prisoner_tl_4;
 $CC1C LD ($8015),HL   ; }
 $CC1F LD HL,$7AC6     ; HL = &solitary_transition_thing;
 $CC22 LD IY,$8000     ; IY = $8000;
 $CC26 LD (IY+$0E),$03 ; IY[0x0E] = 3; // character faces bottom left
 $CC2A XOR A           ; {($8002) = 0; // target location - why is this storing
 $CC2B LD ($8002),A    ; a byte and not a word?}
 $CC2E JP $68A2        ; transition(); return; // exit via

; solitary_player_reset_data
;
; (<- solitary)
b$CC31 DEFB $00,$74,$64,$03,$24,$00

; guards_follow_suspicious_character
;
; Used by the routine at #R$C892.
;
; I:IY Pointer to visible character.
c$CC37 PUSH IY         ; {HL = IY;
 $CC39 POP HL          ; }
 $CC3A LD A,(HL)       ; A = *HL;
; Don't follow non-players dressed as guards.
 $CC3B AND A           ; {if (A && *$8015 == sprite_guard_tl_4) return;
 $CC3C JR Z,$CC46      ;
 $CC3E LD A,($8015)    ;
 $CC41 LD DE,$CEA6     ;
 $CC44 CP E            ;
 $CC45 RET Z           ; }
*$CC46 INC L           ; {if (HL[1] == vischar_BYTE1_BIT2) return; // $8041
 $CC47 LD A,(HL)       ; etc. // 'gone mad' flag
 $CC48 CP $04          ;
 $CC4A RET Z           ; }
 $CC4B DEC L           ; -
 $CC4C LD A,L          ; {HL += 15;
 $CC4D ADD A,$0F       ;
 $CC4F LD L,A          ; }
 $CC50 LD DE,$81B2     ; DE = &byte_81B2;
 $CC53 LD A,($68A0)    ; {if (room_index == 0) <%
 $CC56 AND A           ;
 $CC57 JP NZ,$CC92     ; }
 $CC5A CALL $E542      ;   pos_to_tinypos(HL,DE);
 $CC5D LD HL,$81B8     ;   HL = &player_map_position.y;
 $CC60 LD DE,$81B2     ;   DE = &byte_81B2;
 $CC63 LD A,(IY+$0E)   ;   A = IY[0x0E]; // ?
 $CC66 RRA             ;   carry = A & 1; A >>= 1;
 $CC67 LD C,A          ;   C = A;
 $CC68 JR C,$CC80      ;   if (!carry) <%
 $CC6A INC HL          ;     HL++;
 $CC6B INC DE          ;     DE++;
 $CC6C LD A,(DE)       ; {    A = *DE - 1;
 $CC6D DEC A           ; }
 $CC6E CP (HL)         ; {    if (A >= *HL || A + 2 < *HL) return; // *DE - 1
 $CC6F RET NC          ; .. *DE + 1
 $CC70 ADD A,$02       ;
 $CC72 CP (HL)         ;
 $CC73 RET C           ; }
 $CC74 DEC HL          ;     HL--;
 $CC75 DEC DE          ;     DE--;
 $CC76 LD A,(DE)       ;     A = *DE;
 $CC77 CP (HL)         ;     CP *HL  // TRICKY!
 $CC78 BIT 0,C         ; {    BIT 0,C // if ((C & (1<<0)) == 0) carry =
 $CC7A JR NZ,$CC7D     ; !carry;
 $CC7C CCF             ; }
*$CC7D RET C           ;     RET C   // This is odd: CCF then RET C? // will
                       ; need to fall into 'else' clause
 $CC7E JR $CC92        ;   %>
*$CC80 LD A,(DE)       ; {  else <% A = *DE - 1;
 $CC81 DEC A           ; }
 $CC82 CP (HL)         ; {    if (A >= *HL || A + 2 < *HL) return; // *DE - 1
 $CC83 RET NC          ; .. *DE + 1
 $CC84 ADD A,$02       ;
 $CC86 CP (HL)         ;
 $CC87 RET C           ; }
 $CC88 INC HL          ;     HL++;
 $CC89 INC DE          ;     DE++;
 $CC8A LD A,(DE)       ;     A = *DE;
 $CC8B CP (HL)         ;     CP *HL  // TRICKY!
 $CC8C BIT 0,C         ; {    BIT 0,C // if ((C & (1<<0)) == 0) carry =
 $CC8E JR NZ,$CC91     ; !carry;
 $CC90 CCF             ; }
*$CC91 RET C           ;     RET C %> %>
*$CC92 LD A,($A138)    ; {if (!red_flag) <%
 $CC95 AND A           ;
 $CC96 JR NZ,$CCA3     ; }
 $CC98 LD A,(IY+$13)   ;   A = IY[0x13]; // sampled IY=$8020 // saw this
                       ; breakpoint hit when outdoors
 $CC9B CP $20          ; {  if (A < 32) // vertical offset
 $CC9D RET NC          ; }
 $CC9E LD (IY+$01),$02 ;     IY[1] = vischar_BYTE1_BIT1;
 $CCA2 RET             ;   return; %>
*$CCA3 XOR A           ; {bell = bell_RING_PERPETUAL;
 $CCA4 LD ($A130),A    ; }
 $CCA7 CALL $CCAB      ; hostiles_persue();
 $CCAA RET             ; return;

; hostiles_persue
;
; Used by the routines at #R$C892, #R$CC37, #R$CCCD and #R$EF9A.
; .
; For all visible, hostile characters, at height < 32, set the bribed/persue
; flag.
; .
; Research: If I nop this out then guards don't spot the items I drop.
c$CCAB LD HL,$8020   ; {HL = $8020; // iterate over non-player characters
 $CCAE LD DE,$0020   ; }
 $CCB1 LD B,$07      ; B = 7; // iterations
*$CCB3 PUSH HL       ; do <%
; HL[0x13] is the character's height, testing this excludes the guards in the
; towers.
 $CCB4 LD A,(HL)     ; {  if (HL[0] <= character_19_GUARD_DOG_4 && HL[0x13] <
 $CCB5 CP $14        ; 32) HL[1] = vischar_BYTE1_PERSUE;
 $CCB7 JR NC,$CCC8   ;
 $CCB9 LD A,$13      ;
 $CCBB ADD A,L       ;
 $CCBC LD L,A        ;
 $CCBD LD A,(HL)     ;
 $CCBE CP $20        ;
 $CCC0 JR NC,$CCC8   ;
 $CCC2 LD A,L        ;
 $CCC3 SUB $12       ;
 $CCC5 LD L,A        ;
 $CCC6 LD (HL),$01   ;
*$CCC8 POP HL        ; }
 $CCC9 ADD HL,DE     ;   HL += 32; // stride
 $CCCA DJNZ $CCB3    ; %> while (--B);
 $CCCC RET           ; return;

; is_item_discoverable
;
; Used by the routine at #R$C892.
; .
; Searches item_structs for items dropped nearby. If items are found the
; hostiles are made to persue the player.
; .
; Green key and food items are ignored.
c$CCCD LD A,($68A0)  ; A = room_index;
 $CCD0 AND A         ; {if (A != room_0_outdoors) <%
 $CCD1 JR Z,$CCDB    ; }
; Indoors.
 $CCD3 CALL $CCFB    ;   is_item_discoverable_interior(A);
 $CCD6 RET NZ        ; {  if (Z) hostiles_persue();
 $CCD7 CALL $CCAB    ; }
 $CCDA RET           ;   return; %>
; Outdoors.
*$CCDB LD HL,$76C9   ; else <% HL = &item_structs[0].room;
 $CCDE LD DE,$0007   ;   -
 $CCE1 LD B,$10      ;   B = 16; // iterations == n.itemstructs
*$CCE3 BIT 7,(HL)    ; {  do <% if (HL[0] & itemstruct_ROOM_FLAG_ITEM_NEARBY)
 $CCE5 JR NZ,$CCEB   ; goto nearby;}
*$CCE7 ADD HL,DE     ;     next: HL += 7; // stride
 $CCE8 DJNZ $CCE3    ;   %> while (--B);
 $CCEA RET           ;   return; %>
; Suspected bug: HL is decremented, but not re-incremented before 'goto next'.
; So it must be reading a byte early when iteration is resumed. Consequences? I
; think it'll screw up when multiple items are in range.
*$CCEB DEC HL        ; nearby: HL--;
 $CCEC LD A,(HL)     ; {A = *HL & itemstruct_ITEM_MASK; // sampled HL = $772A
 $CCED AND $0F       ; (&item_structs[item_PURSE].item)}
; The green key and food items are ignored.
 $CCEF CP $0B        ; {if (A == item_GREEN_KEY || A == item_FOOD) goto next;
 $CCF1 JR Z,$CCE7    ;
 $CCF3 CP $07        ;
 $CCF5 JR Z,$CCE7    ; }
 $CCF7 CALL $CCAB    ; hostiles_persue();
 $CCFA RET           ; return;

; is_item_discoverable_interior
;
; Used by the routines at #R$C6A0 and #R$CCCD.
; .
; Examines the specified room to see if it contains a discoverable item.
; .
; A discoverable item is one moved away from its default room, and one that
; isn't the red cross parcel.
;
; I:A     Room ref.
; O:Flags Z => found, NZ => not found.
; O:C     Item (if found).
c$CCFB LD C,A        ; C = A; // room ref
 $CCFC LD HL,$76C9   ; HL = &item_structs[0].room; // pointer to room ref
 $CCFF LD B,$10      ; B = 16; // items__LIMIT
*$CD01 LD A,(HL)     ; {do <% A = *HL & itemstruct_ROOM_MASK;
 $CD02 AND $3F       ; }
; Is the item in the specified room?
 $CD04 CP C          ; {  if (A == C) <% // yes
 $CD05 JR NZ,$CD1B   ; }
 $CD07 PUSH HL       ;     -
; Has the item been moved to a different room?
; .
; Note that room_and_flags doesn't get its flags masked off.
 $CD08 DEC HL        ; {    A = default_item_locations[HL[-1] &
 $CD09 LD A,(HL)     ; itemstruct_ITEM_MASK].room_and_flags; // HL[-1] =
 $CD0A AND $0F       ; itemstruct.item
 $CD0C LD E,A        ;
 $CD0D ADD A,A       ;
 $CD0E ADD A,E       ;
 $CD0F LD E,A        ;
 $CD10 LD D,$00      ;
 $CD12 LD HL,$CD6A   ;
 $CD15 ADD HL,DE     ;
 $CD16 LD A,(HL)     ; }
 $CD17 CP C          ; {    if (A != C) goto not_in_default_room;
 $CD18 JR NZ,$CD22   ; }
 $CD1A POP HL        ;     - %>
*$CD1B LD DE,$0007   ; {  next: HL += 7; // stride
 $CD1E ADD HL,DE     ; }
 $CD1F DJNZ $CD01    ; %> while (--B);
 $CD21 RET           ; return; // return with NZ set
*$CD22 POP HL        ; not_in_default_room: -
 $CD23 DEC HL        ; {A = HL[-1] & itemstruct_ITEM_MASK; // itemstruct.item
 $CD24 LD A,(HL)     ;
 $CD25 AND $0F       ; }
; Ignore red cross parcel.
 $CD27 CP $0C        ; {if (A == item_RED_CROSS_PARCEL) <%
 $CD29 JR NZ,$CD2E   ; }
 $CD2B INC HL        ;   -
 $CD2C JR $CD1B      ;   goto next; %>
*$CD2E LD C,A        ; C = A;
 $CD2F XOR A         ; A = 0; // set Z
 $CD30 RET           ; return;

; item_discovered
;
; Used by the routines at #R$B75A, #R$C6A0, #R$C892 and #R$CB98.
;
; I:C Item.
c$CD31 LD A,C        ; A = C;
 $CD32 CP $FF        ; {if (A == item_NONE) return;
 $CD34 RET Z         ; }
 $CD35 AND $0F       ; A &= 0x0F; // likely this mask is itemstruct_ITEM_MASK
 $CD37 PUSH AF       ; -
 $CD38 LD B,$10      ; {queue_message_for_display(message_ITEM_DISCOVERED);
 $CD3A CALL $7D15    ; }
 $CD3D LD B,$05      ; {decrease_morale(5);
 $CD3F CALL $A0E0    ; }
 $CD42 POP AF        ; -
 $CD43 ADD A,A       ; {HL = &default_item_locations[A];
 $CD44 ADD A,C       ;
 $CD45 LD HL,$CD6A   ;
 $CD48 LD D,$00      ;
 $CD4A LD E,A        ;
 $CD4B ADD HL,DE     ; }
 $CD4C LD A,(HL)     ; A = HL->room_and_flags;
 $CD4D EX DE,HL      ; EX DE,HL
 $CD4E EX AF,AF'     ;
; Bug: This is not masked with 0x0F so item_to_itemstruct generates out of
; range addresses.
 $CD4F LD A,C        ; Adash = C;
 $CD50 CALL $7C26    ; HL = item_to_itemstruct(Adash);
 $CD53 RES 7,(HL)    ; *HL &= ~itemstruct_ITEM_FLAG_HELD;
 $CD55 EX DE,HL      ; EX DE,HL
 $CD56 INC DE        ; DE++;
 $CD57 LD BC,$0003   ; {memcpy(DE, HL, 3); DE += 3; HL += 3; // reset
 $CD5A LDIR          ; location?}
 $CD5C EX DE,HL      ; EX DE,HL
 $CD5D EX AF,AF'     ;
 $CD5E AND A         ; {if (A == 0) <% // outside
 $CD5F JR NZ,$CD65   ; }
 $CD61 LD (HL),A     ;   *HL = A;
 $CD62 JP $7BD0      ;   goto $7BD0; /* drop_item_A:$7BD0 */ %>
*$CD65 LD (HL),$05   ; else <% *HL = 5;
 $CD67 JP $7BF2      ;   goto $7BF2; /* drop_item_A:$7BF2 */ %>

; default_item_locations
;
; Array of 16 three-byte structures. Suspect these are /default/ locations.
; .
; struct default_item_location { byte room_and_flags; byte y; byte x; };
; .
; #define ITEM_ROOM(item_no, flags) ((item_no & 63) | flags)
b$CD6A DEFB $FF,$40,$20 ; item_WIRESNIPS        { ITEM_ROOM(room_NONE, (3<<6)),
                        ; ... } // do these flags mean that the wiresnips are
                        ; always or /never/ found?
 $CD6D DEFB $09,$3E,$30 ; item_SHOVEL           { ITEM_ROOM(room_9, 0), ... }
 $CD70 DEFB $0A,$49,$24 ; item_LOCKPICK         { ITEM_ROOM(room_10, 0), ... }
 $CD73 DEFB $0B,$2A,$3A ; item_PAPERS           { ITEM_ROOM(room_11, 0), ... }
 $CD76 DEFB $0E,$32,$18 ; item_TORCH            { ITEM_ROOM(room_14, 0), ... }
 $CD79 DEFB $3F,$24,$2C ; item_BRIBE            { ITEM_ROOM(room_NONE, 0), ...
                        ; }
 $CD7C DEFB $0F,$2C,$41 ; item_UNIFORM          { ITEM_ROOM(room_15, 0),  ... }
 $CD7F DEFB $13,$40,$30 ; item_FOOD             { ITEM_ROOM(room_19, 0), ... }
 $CD82 DEFB $01,$42,$34 ; item_POISON           { ITEM_ROOM(room_1, 0), ... }
 $CD85 DEFB $16,$3C,$2A ; item_RED_KEY          { ITEM_ROOM(room_22, 0), ... }
 $CD88 DEFB $0B,$1C,$22 ; item_YELLOW_KEY       { ITEM_ROOM(room_11, 0), ... }
 $CD8B DEFB $00,$4A,$48 ; item_GREEN_KEY        { ITEM_ROOM(room_0_outdoors,
                        ; 0), ... }
 $CD8E DEFB $3F,$1C,$32 ; item_RED_CROSS_PARCEL { ITEM_ROOM(room_NONE, 0), ...
                        ; }
 $CD91 DEFB $12,$24,$3A ; item_RADIO            { ITEM_ROOM(room_18, 0), ... }
 $CD94 DEFB $3F,$1E,$22 ; item_PURSE            { ITEM_ROOM(room_NONE, 0), ...
                        ; }
 $CD97 DEFB $3F,$34,$1C ; item_COMPASS          { ITEM_ROOM(room_NONE, 0), ...
                        ; }

; character_meta_data
b$CD9A DEFB $F2,$CD,$D6,$CE ; { &character_related_pointers[0], &sprites[30] }
                            ; // meta_commandant (<- spawn_character)
 $CD9E DEFB $F2,$CD,$A6,$CE ; { &character_related_pointers[0], &sprites[22] }
                            ; // meta_guard (<- spawn_character)
 $CDA2 DEFB $F2,$CD,$76,$CE ; { &character_related_pointers[0], &sprites[14] }
                            ; // meta_dog (<- spawn_character)
 $CDA6 DEFB $F2,$CD,$2E,$CE ; { &character_related_pointers[0], &sprites[2]  }
                            ; // meta_prisoner (<- spawn_character)

; byte_CDAA
;
; Likely direction transitions.
; .
; Groups of nine. (<- called_from_main_loop_9)
b$CDAA DEFB $08,$00,$04,$87,$00,$87,$04,$04,$04
 $CDB3 DEFB $09,$84,$05,$05,$84,$05,$01,$01,$05
 $CDBC DEFB $0A,$85,$02,$06,$85,$06,$85,$85,$02
 $CDC5 DEFB $0B,$07,$86,$03,$07,$03,$07,$07,$86
 $CDCE DEFB $14,$0C,$8C,$93,$0C,$93,$10,$10,$8C
 $CDD7 DEFB $15,$90,$11,$8D,$90,$95,$0D,$0D,$11
 $CDE0 DEFB $16,$8E,$0E,$12,$8E,$0E,$91,$91,$0E
 $CDE9 DEFB $17,$13,$92,$0F,$13,$0F,$8F,$8F,$92

; character_related_pointers
;
; Array, 24 long, of pointers to data.
w$CDF2 DEFW $CF26
 $CDF4 DEFW $CF3A
 $CDF6 DEFW $CF4E
 $CDF8 DEFW $CF62
 $CDFA DEFW $CF96
 $CDFC DEFW $CFA2
 $CDFE DEFW $CFAE
 $CE00 DEFW $CFBA
 $CE02 DEFW $CF76
 $CE04 DEFW $CF7E
 $CE06 DEFW $CF86
 $CE08 DEFW $CF8E
 $CE0A DEFW $CFC6
 $CE0C DEFW $CFD2
 $CE0E DEFW $CFDE
 $CE10 DEFW $CFEA
 $CE12 DEFW $CFF6
 $CE14 DEFW $D002
 $CE16 DEFW $D00E
 $CE18 DEFW $D01A
 $CE1A DEFW $CF06
 $CE1C DEFW $CF0E
 $CE1E DEFW $CF16
 $CE20 DEFW $CF1E

; sprites
;
; Objects which can move.
; .
; This include STOVE, CRATE, PRISONER, CRAWL, DOG, GUARD and COMMANDANT.
; .
; Structure: (b) width in bytes + 1, (b) height in rows, (w) data ptr, (w) mask
; ptr
; .
; 'tl' => character faces top left of the screen
; .
; 'br' => character faces bottom right of the screen
b$CE22 DEFB $03,$16,$46,$DB,$72,$DB ; { 3, 22, &bitmap_stove          ,
                                    ; &mask_stove        } //
                                    ; (16x22,$DB46,$DB72)
 $CE28 DEFB $04,$18,$B6,$DA,$FE,$DA ; { 4, 24, &bitmap_crate          ,
                                    ; &mask_crate        } //
                                    ; (24x24,$DAB6,$DAFE)
 $CE2E DEFB $03,$1B,$8C,$D2,$45,$D5 ; { 3, 27, &bitmap_prisoner_tl_4  ,
                                    ; &mask_various_tl_4 } //
                                    ; (16x27,$D28C,$D545)
 $CE34 DEFB $03,$1C,$56,$D2,$05,$D5 ; { 3, 28, &bitmap_prisoner_tl_3  ,
                                    ; &mask_various_tl_3 } //
                                    ; (16x28,$D256,$D505)
 $CE3A DEFB $03,$1C,$20,$D2,$C5,$D4 ; { 3, 28, &bitmap_prisoner_tl_2  ,
                                    ; &mask_various_tl_2 } //
                                    ; (16x28,$D220,$D4C5)
 $CE40 DEFB $03,$1C,$EA,$D1,$85,$D4 ; { 3, 28, &bitmap_prisoner_tl_1  ,
                                    ; &mask_various_tl_1 } //
                                    ; (16x28,$D1EA,$D485)
 $CE46 DEFB $03,$1B,$C0,$D2,$85,$D5 ; { 3, 27, &bitmap_prisoner_br_1  ,
                                    ; &mask_various_br_1 } //
                                    ; (16x27,$D2C0,$D585)
 $CE4C DEFB $03,$1D,$F4,$D2,$C5,$D5 ; { 3, 29, &bitmap_prisoner_br_2  ,
                                    ; &mask_various_br_2 } //
                                    ; (16x29,$D2F4,$D5C5)
 $CE52 DEFB $03,$1C,$2C,$D3,$05,$D6 ; { 3, 28, &bitmap_prisoner_br_3  ,
                                    ; &mask_various_br_3 } //
                                    ; (16x28,$D32C,$D605)
 $CE58 DEFB $03,$1C,$62,$D3,$3D,$D6 ; { 3, 28, &bitmap_prisoner_br_4  ,
                                    ; &mask_various_br_4 } //
                                    ; (16x28,$D362,$D63D)
 $CE5E DEFB $04,$10,$C5,$D3,$77,$D6 ; { 4, 16, &bitmap_crawl_bl_2     ,
                                    ; &mask_crawl_bl     } //
                                    ; (24x16,$D3C5,$D677)
 $CE64 DEFB $04,$0F,$98,$D3,$77,$D6 ; { 4, 15, &bitmap_crawl_bl_1     ,
                                    ; &mask_crawl_bl     } //
                                    ; (24x15,$D398,$D677)
 $CE6A DEFB $04,$10,$F5,$D3,$55,$D4 ; { 4, 16, &bitmap_crawl_tl_1     ,
                                    ; &mask_crawl_bl     } //
                                    ; (24x16,$D3F5,$D455)
 $CE70 DEFB $04,$10,$25,$D4,$55,$D4 ; { 4, 16, &bitmap_crawl_tl_2     ,
                                    ; &mask_crawl_bl     } //
                                    ; (24x16,$D425,$D455)
 $CE76 DEFB $04,$10,$67,$D8,$21,$D9 ; { 4, 16, &bitmap_dog_tl_1       ,
                                    ; &mask_dog_tl       } //
                                    ; (24x16,$D867,$D921)
 $CE7C DEFB $04,$10,$97,$D8,$21,$D9 ; { 4, 16, &bitmap_dog_tl_2       ,
                                    ; &mask_dog_tl       } //
                                    ; (24x16,$D897,$D921)
 $CE82 DEFB $04,$0F,$C7,$D8,$21,$D9 ; { 4, 15, &bitmap_dog_tl_3       ,
                                    ; &mask_dog_tl       } //
                                    ; (24x15,$D8C7,$D921)
 $CE88 DEFB $04,$0F,$F4,$D8,$21,$D9 ; { 4, 15, &bitmap_dog_tl_4       ,
                                    ; &mask_dog_tl       } //
                                    ; (24x15,$D8F4,$D921)
 $CE8E DEFB $04,$0E,$51,$D9,$F9,$D9 ; { 4, 14, &bitmap_dog_br_1       ,
                                    ; &mask_dog_br       } //
                                    ; (24x14,$D951,$D9F9)
 $CE94 DEFB $04,$0F,$7B,$D9,$F9,$D9 ; { 4, 15, &bitmap_dog_br_2       ,
                                    ; &mask_dog_br       } //
                                    ; (24x15,$D97B,$D9F9)
; Height of following sprite is one row too high.
 $CE9A DEFB $04,$0F,$A8,$D9,$F9,$D9 ; { 4, 15, &bitmap_dog_br_3       ,
                                    ; &mask_dog_br       } //
                                    ; (24x15,$D9A8,$D9F9)
 $CEA0 DEFB $04,$0E,$CF,$D9,$F9,$D9 ; { 4, 14, &bitmap_dog_br_4       ,
                                    ; &mask_dog_br       } //
                                    ; (24x14,$D9CF,$D9F9)
 $CEA6 DEFB $03,$1B,$4D,$D7,$45,$D5 ; { 3, 27, &bitmap_guard_tl_4     ,
                                    ; &mask_various_tl_4 } //
                                    ; (16x27,$D74D,$D545)
 $CEAC DEFB $03,$1D,$13,$D7,$05,$D5 ; { 3, 29, &bitmap_guard_tl_3     ,
                                    ; &mask_various_tl_3 } //
                                    ; (16x29,$D713,$D505)
 $CEB2 DEFB $03,$1B,$DD,$D6,$C5,$D4 ; { 3, 27, &bitmap_guard_tl_2     ,
                                    ; &mask_various_tl_2 } //
                                    ; (16x27,$D6DD,$D4C5)
 $CEB8 DEFB $03,$1B,$A7,$D6,$85,$D4 ; { 3, 27, &bitmap_guard_tl_1     ,
                                    ; &mask_various_tl_1 } //
                                    ; (16x27,$D6A7,$D485)
 $CEBE DEFB $03,$1D,$83,$D7,$85,$D5 ; { 3, 29, &bitmap_guard_br_1     ,
                                    ; &mask_various_br_1 } //
                                    ; (16x29,$D783,$D585)
 $CEC4 DEFB $03,$1D,$BD,$D7,$C5,$D5 ; { 3, 29, &bitmap_guard_br_2     ,
                                    ; &mask_various_br_2 } //
                                    ; (16x29,$D7BD,$D5C5)
 $CECA DEFB $03,$1C,$F7,$D7,$05,$D6 ; { 3, 28, &bitmap_guard_br_3     ,
                                    ; &mask_various_br_3 } //
                                    ; (16x28,$D7F7,$D605)
 $CED0 DEFB $03,$1C,$2F,$D8,$3D,$D6 ; { 3, 28, &bitmap_guard_br_4     ,
                                    ; &mask_various_br_4 } //
                                    ; (16x28,$D82F,$D63D)
 $CED6 DEFB $03,$1C,$D6,$D0,$45,$D5 ; { 3, 28, &bitmap_commandant_tl_4,
                                    ; &mask_various_tl_4 } //
                                    ; (16x28,$D0D6,$D545)
 $CEDC DEFB $03,$1E,$9A,$D0,$05,$D5 ; { 3, 30, &bitmap_commandant_tl_3,
                                    ; &mask_various_tl_3 } //
                                    ; (16x30,$D09A,$D505)
 $CEE2 DEFB $03,$1D,$60,$D0,$C5,$D4 ; { 3, 29, &bitmap_commandant_tl_2,
                                    ; &mask_various_tl_2 } //
                                    ; (16x29,$D060,$D4C5)
 $CEE8 DEFB $03,$1D,$26,$D0,$85,$D4 ; { 3, 29, &bitmap_commandant_tl_1,
                                    ; &mask_various_tl_1 } //
                                    ; (16x29,$D026,$D485)
 $CEEE DEFB $03,$1B,$0E,$D1,$85,$D5 ; { 3, 27, &bitmap_commandant_br_1,
                                    ; &mask_various_br_1 } //
                                    ; (16x27,$D10E,$D585)
 $CEF4 DEFB $03,$1C,$44,$D1,$C5,$D5 ; { 3, 28, &bitmap_commandant_br_2,
                                    ; &mask_various_br_2 } //
                                    ; (16x28,$D144,$D5C5)
 $CEFA DEFB $03,$1B,$7C,$D1,$05,$D6 ; { 3, 27, &bitmap_commandant_br_3,
                                    ; &mask_various_br_3 } //
                                    ; (16x27,$D17C,$D605)
 $CF00 DEFB $03,$1C,$B2,$D1,$3D,$D6 ; { 3, 28, &bitmap_commandant_br_4,
                                    ; &mask_various_br_4 } //
                                    ; (16x28,$D1B2,$D63D)

; character_related_data
;
; [unknown] character related stuff? read by routine around $b64f
; (called_from_main_loop_9)
b$CF06 DEFB $01,$04,$04,$FF,$00,$00,$00,$0A
 $CF0E DEFB $01,$05,$05,$FF,$00,$00,$00,$8A
 $CF16 DEFB $01,$06,$06,$FF,$00,$00,$00,$88
 $CF1E DEFB $01,$07,$07,$FF,$00,$00,$00,$08
 $CF26 DEFB $04,$00,$00,$02,$02,$00,$00,$00
 $CF2E DEFB $02,$00,$00,$01,$02,$00,$00,$02
 $CF36 DEFB $02,$00,$00,$03
 $CF3A DEFB $04,$01,$01,$03,$00,$02,$00,$80
 $CF42 DEFB $00,$02,$00,$81,$00,$02,$00,$82
 $CF4A DEFB $00,$02,$00,$83
 $CF4E DEFB $04,$02,$02,$00,$FE,$00,$00,$04
 $CF56 DEFB $FE,$00,$00,$05,$FE,$00,$00,$06
 $CF5E DEFB $FE,$00,$00,$07
 $CF62 DEFB $04,$03,$03,$01,$00,$FE,$00,$84
 $CF6A DEFB $00,$FE,$00,$85,$00,$FE,$00,$86
 $CF72 DEFB $00,$FE,$00,$87
 $CF76 DEFB $01,$00,$00,$FF,$00,$00,$00,$00
 $CF7E DEFB $01,$01,$01,$FF,$00,$00,$00,$80
 $CF86 DEFB $01,$02,$02,$FF,$00,$00,$00,$04
 $CF8E DEFB $01,$03,$03,$FF,$00,$00,$00,$84
 $CF96 DEFB $02,$00,$01,$FF,$00,$00,$00,$00
 $CF9E DEFB $00,$00,$00,$80
 $CFA2 DEFB $02,$01,$02,$FF,$00,$00,$00,$80
 $CFAA DEFB $00,$00,$00,$04
 $CFAE DEFB $02,$02,$03,$FF,$00,$00,$00,$04
 $CFB6 DEFB $00,$00,$00,$84
 $CFBA DEFB $02,$03,$00,$FF,$00,$00,$00,$84
 $CFC2 DEFB $00,$00,$00,$00
 $CFC6 DEFB $02,$04,$04,$02,$02,$00,$00,$0A
 $CFCE DEFB $02,$00,$00,$0B
 $CFD2 DEFB $02,$05,$05,$03,$00,$02,$00,$8A
 $CFDA DEFB $00,$02,$00,$8B
 $CFDE DEFB $02,$06,$06,$00,$FE,$00,$00,$88
 $CFE6 DEFB $FE,$00,$00,$89
 $CFEA DEFB $02,$07,$07,$01,$00,$FE,$00,$08
 $CFF2 DEFB $00,$FE,$00,$09
 $CFF6 DEFB $02,$04,$05,$FF,$00,$00,$00,$0A
 $CFFE DEFB $00,$00,$00,$8A
 $D002 DEFB $02,$05,$06,$FF,$00,$00,$00,$8A
 $D00A DEFB $00,$00,$00,$88
 $D00E DEFB $02,$06,$07,$FF,$00,$00,$00,$88
 $D016 DEFB $00,$00,$00,$08
 $D01A DEFB $02,$07,$04,$FF,$00,$00,$00,$08
 $D022 DEFB $00,$00,$00,$0A

; sprite_bitmaps_and_masks
;
; Sprite bitmaps and masks.
; .
; #UDGARRAY2,7,4,2;$D026-$D05F-1-16{0,0,64,116}(bitmap-commandant-facing-top-left-1)
b$D026 DEFB $00,$00,$00,$60,$00,$F0,$00,$F8 ; {bitmap: COMMANDANT FACING TOP
 $D02E DEFB $00,$FC,$01,$7C,$01,$78,$00,$04 ; LEFT 1
 $D036 DEFB $00,$FE,$03,$FE,$07,$FA,$07,$FA
 $D03E DEFB $06,$FA,$0E,$F6,$0E,$C6,$0E,$38
 $D046 DEFB $06,$F8,$06,$E0,$09,$98,$04,$58
 $D04E DEFB $03,$B0,$03,$B0,$01,$80,$02,$70
 $D056 DEFB $03,$B0,$01,$B0,$07,$B0,$01,$30
 $D05E DEFB $00,$20                         ; }
; #UDGARRAY2,7,4,2;$D060-$D099-1-16{0,0,64,116}(bitmap-commandant-facing-top-left-2)
 $D060 DEFB $00,$00,$00,$60,$00,$F0,$00,$F8 ; {bitmap: COMMANDANT FACING TOP
 $D068 DEFB $00,$FC,$01,$7C,$01,$78,$00,$00 ; LEFT 2
 $D070 DEFB $00,$FC,$03,$FE,$03,$FA,$07,$FA
 $D078 DEFB $06,$F6,$06,$F6,$0E,$C6,$0D,$3A
 $D080 DEFB $15,$F8,$1B,$F6,$03,$C8,$04,$18
 $D088 DEFB $07,$D8,$03,$80,$02,$30,$01,$D0
 $D090 DEFB $01,$C0,$00,$E0,$01,$60,$00,$60
 $D098 DEFB $00,$C0                         ; }
; #UDGARRAY2,7,4,2;$D09A-$D0D5-1-16{0,0,64,120}(bitmap-commandant-facing-top-left-3)
 $D09A DEFB $00,$00,$00,$60,$00,$F0,$00,$F8 ; {bitmap: COMMANDANT FACING TOP
 $D0A2 DEFB $00,$FC,$01,$7C,$01,$78,$00,$04 ; LEFT 3
 $D0AA DEFB $01,$FE,$03,$FE,$07,$FA,$07,$FA
 $D0B2 DEFB $06,$FA,$06,$F4,$0E,$CA,$0E,$3A
 $D0BA DEFB $0D,$F8,$05,$E0,$0B,$98,$04,$50
 $D0C2 DEFB $03,$D0,$07,$A0,$03,$A0,$03,$40
 $D0CA DEFB $00,$A0,$03,$B0,$03,$A0,$01,$80
 $D0D2 DEFB $07,$80,$01,$80                 ; }
; #UDGARRAY2,7,4,2;$D0D6-$D10E-1-16{0,0,64,112}(bitmap-commandant-facing-top-left-4)
 $D0D6 DEFB $00,$00,$00,$60,$00,$F0,$00,$F8 ; {bitmap: COMMANDANT FACING TOP
 $D0DE DEFB $00,$FC,$01,$7C,$01,$78,$00,$04 ; LEFT 4
 $D0E6 DEFB $00,$FE,$03,$FE,$07,$FA,$06,$FA
 $D0EE DEFB $06,$FA,$07,$7A,$03,$64,$07,$18
 $D0F6 DEFB $06,$F8,$0A,$F0,$0D,$CC,$02,$1C
 $D0FE DEFB $07,$D8,$07,$D8,$03,$A0,$04,$38
 $D106 DEFB $07,$B8,$03,$98,$0B,$18,$07,$30 ; }
; #UDGARRAY2,7,4,2;$D10E-$D143-1-16{0,0,64,108}(bitmap-commandant-facing-bottom-right-1)
 $D10E DEFB $00,$00,$01,$C0,$03,$E0,$07,$C0 ; {bitmap: COMMANDANT FACING BOTTOM
 $D116 DEFB $03,$B0,$00,$60,$01,$80,$06,$B0 ; RIGHT 1
 $D11E DEFB $0F,$78,$1F,$A8,$3F,$B0,$3B,$B0
 $D126 DEFB $77,$A8,$37,$8C,$20,$74,$17,$B0
 $D12E DEFB $37,$80,$0B,$A0,$0C,$60,$0F,$40
 $D136 DEFB $0E,$00,$01,$40,$07,$40,$07,$00
 $D13E DEFB $07,$00,$03,$00,$03,$C0         ; }
; #UDGARRAY2,7,4,2;$D144-$D17B-1-16{0,0,64,112}(bitmap-commandant-facing-bottom-right-2)
 $D144 DEFB $00,$00,$01,$C0,$03,$E0,$07,$C0 ; {bitmap: COMMANDANT FACING BOTTOM
 $D14C DEFB $03,$B0,$00,$60,$01,$80,$02,$B0 ; RIGHT 2
 $D154 DEFB $0F,$68,$1F,$B0,$1F,$B0,$1B,$B0
 $D15C DEFB $3B,$A8,$3B,$88,$34,$70,$37,$B0
 $D164 DEFB $37,$A8,$07,$10,$28,$B8,$0F,$B8
 $D16C DEFB $0F,$60,$0E,$10,$01,$70,$0E,$70
 $D174 DEFB $0E,$60,$0C,$38,$0E,$00,$03,$00 ; }
; #UDGARRAY2,7,4,2;$D17C-$D1B1-1-16{0,0,64,108}(bitmap-commandant-facing-bottom-right-3)
 $D17C DEFB $00,$00,$01,$C0,$03,$E0,$07,$C0 ; {bitmap: COMMANDANT FACING BOTTOM
 $D184 DEFB $03,$B0,$00,$60,$01,$80,$02,$B0 ; RIGHT 3
 $D18C DEFB $07,$68,$0F,$B0,$0F,$B0,$1D,$B0
 $D194 DEFB $1B,$A8,$1B,$88,$1C,$74,$0A,$B4
 $D19C DEFB $06,$A0,$09,$90,$0E,$70,$0F,$70
 $D1A4 DEFB $06,$E0,$08,$00,$1E,$E0,$1C,$E0
 $D1AC DEFB $18,$E0,$18,$60,$08,$70         ; }
; #UDGARRAY2,7,4,2;$D1B2-$D1E9-1-16{0,0,64,112}(bitmap-commandant-facing-bottom-right-4)
 $D1B2 DEFB $00,$00,$01,$C0,$03,$E0,$07,$C0 ; {bitmap: COMMANDANT FACING BOTTOM
 $D1BA DEFB $03,$B0,$00,$60,$01,$80,$06,$B0 ; RIGHT 4
 $D1C2 DEFB $0F,$68,$1F,$A8,$1F,$B0,$3B,$B0
 $D1CA DEFB $3B,$B0,$3B,$88,$30,$70,$37,$B0
 $D1D2 DEFB $0F,$A8,$37,$10,$08,$70,$07,$60
 $D1DA DEFB $03,$40,$04,$A0,$07,$60,$07,$40
 $D1E2 DEFB $06,$C0,$06,$80,$03,$60,$00,$60 ; }
; #UDGARRAY2,7,4,2;$D1EA-$D21F-1-16{0,0,64,108}(bitmap-prisoner-facing-top-left-1)
 $D1EA DEFB $00,$00,$00,$F0,$01,$F0,$01,$C0 ; {bitmap: PRISONER FACING TOP LEFT
 $D1F2 DEFB $00,$F0,$01,$00,$00,$78,$03,$FC ; 1
 $D1FA DEFB $07,$F4,$07,$F4,$06,$F4,$0E,$F4
 $D202 DEFB $0D,$E8,$0D,$94,$0C,$78,$15,$F8
 $D20A DEFB $1B,$D8,$07,$D8,$0F,$B0,$0F,$70
 $D212 DEFB $07,$70,$07,$70,$03,$60,$03,$60
 $D21A DEFB $0C,$60,$03,$00,$00,$60         ; }
; #UDGARRAY2,7,4,2;$D220-$D255-1-16{0,0,64,108}(bitmap-prisoner-facing-top-left-2)
 $D220 DEFB $00,$00,$00,$F0,$01,$F0,$01,$C0 ; {bitmap: PRISONER FACING TOP LEFT
 $D228 DEFB $00,$F0,$01,$00,$00,$78,$03,$FC ; 2
 $D230 DEFB $07,$F4,$07,$F4,$0F,$EC,$0E,$EC
 $D238 DEFB $1D,$EC,$1B,$94,$54,$70,$6F,$F4
 $D240 DEFB $0F,$D0,$0F,$D0,$07,$B0,$07,$A0
 $D248 DEFB $07,$A0,$07,$40,$03,$40,$03,$80
 $D250 DEFB $05,$80,$00,$40,$03,$C0         ; }
; #UDGARRAY2,7,4,2;$D256-$D28B-1-16{0,0,64,108}(bitmap-prisoner-facing-top-left-3)
 $D256 DEFB $00,$00,$00,$F0,$01,$F0,$01,$C0 ; {bitmap: PRISONER FACING TOP LEFT
 $D25E DEFB $00,$F0,$01,$00,$00,$78,$01,$FC ; 3
 $D266 DEFB $03,$F4,$07,$F4,$06,$F4,$06,$F4
 $D26E DEFB $0E,$E4,$0D,$94,$0C,$78,$15,$F8
 $D276 DEFB $1B,$D8,$07,$D8,$0F,$D0,$07,$D0
 $D27E DEFB $07,$A0,$07,$A0,$03,$A0,$03,$40
 $D286 DEFB $01,$60,$06,$00,$03,$00         ; }
; #UDGARRAY2,7,4,2;$D28C-$D2BF-1-16{0,0,64,104}(bitmap-prisoner-facing-top-left-4)
 $D28C DEFB $00,$00,$00,$F0,$01,$F0,$01,$C0 ; {bitmap: PRISONER FACING TOP LEFT
 $D294 DEFB $00,$F0,$01,$00,$00,$70,$01,$F8 ; 4
 $D29C DEFB $03,$F8,$07,$F8,$06,$F0,$0E,$F0
 $D2A4 DEFB $0E,$E8,$06,$88,$06,$70,$02,$F0
 $D2AC DEFB $05,$D0,$06,$D0,$09,$B0,$0F,$A0
 $D2B4 DEFB $0F,$60,$0E,$E0,$0E,$E0,$0C,$40
 $D2BC DEFB $34,$20,$18,$E0                 ; }
; #UDGARRAY2,7,4,2;$D2C0-$D2F3-1-16{0,0,64,104}(bitmap-prisoner-facing-bottom-right-1)
 $D2C0 DEFB $00,$00,$03,$80,$05,$C0,$07,$80 ; {bitmap: PRISONER FACING BOTTOM
 $D2C8 DEFB $04,$40,$03,$80,$0D,$60,$1E,$E0 ; RIGHT 1
 $D2D0 DEFB $3E,$F0,$37,$50,$35,$50,$77,$50
 $D2D8 DEFB $6F,$38,$6E,$54,$51,$CC,$5F,$C0
 $D2E0 DEFB $9E,$C0,$DE,$C0,$0F,$40,$0F,$40
 $D2E8 DEFB $07,$00,$07,$00,$16,$00,$16,$00
 $D2F0 DEFB $05,$00,$03,$80                 ; }
; #UDGARRAY2,7,4,2;$D2F4-$D32B-1-16{0,0,64,112}(bitmap-prisoner-facing-bottom-right-2)
 $D2F4 DEFB $00,$00,$03,$80,$05,$C0,$07,$80 ; {bitmap: PRISONER FACING BOTTOM
 $D2FC DEFB $04,$40,$03,$80,$0D,$40,$1E,$E0 ; RIGHT 2
 $D304 DEFB $3E,$E0,$37,$50,$75,$50,$77,$50
 $D30C DEFB $77,$50,$34,$30,$33,$C0,$37,$D0
 $D314 DEFB $0F,$40,$37,$60,$0F,$60,$3E,$E0
 $D31C DEFB $1E,$C0,$1E,$C0,$1D,$80,$1D,$00
 $D324 DEFB $1A,$80,$09,$C0,$14,$00,$0E,$00 ; }
; #UDGARRAY2,7,4,2;$D32C-$D361-1-16{0,0,64,108}(bitmap-prisoner-facing-bottom-right-3)
 $D32C DEFB $00,$00,$03,$80,$05,$C0,$07,$80 ; {bitmap: PRISONER FACING BOTTOM
 $D334 DEFB $04,$40,$03,$80,$0D,$40,$1E,$E0 ; RIGHT 3
 $D33C DEFB $1E,$E0,$37,$40,$35,$40,$37,$40
 $D344 DEFB $37,$40,$1A,$20,$19,$C0,$05,$C0
 $D34C DEFB $0D,$40,$13,$60,$1E,$E0,$1E,$E0
 $D354 DEFB $1C,$C0,$3D,$C0,$39,$80,$31,$80
 $D35C DEFB $50,$40,$60,$E0,$30,$00         ; }
; #UDGARRAY2,7,4,2;$D362-$D397-1-16{0,0,64,108}(bitmap-prisoner-facing-bottom-right-4)
 $D362 DEFB $00,$00,$03,$80,$05,$C0,$07,$80 ; {bitmap: PRISONER FACING BOTTOM
 $D36A DEFB $04,$40,$03,$80,$0D,$60,$1E,$E0 ; RIGHT 4
 $D372 DEFB $1E,$F0,$3B,$50,$39,$50,$37,$50
 $D37A DEFB $37,$50,$36,$30,$21,$C8,$2F,$E8
 $D382 DEFB $17,$60,$37,$60,$0F,$60,$1F,$40
 $D38A DEFB $07,$40,$06,$C0,$0E,$80,$0D,$80
 $D392 DEFB $08,$00,$05,$80,$0E,$C0         ; }
; #UDGARRAY3,7,4,3;$D398-$D3C4-1-24{0,0,96,60}(bitmap-crawl-facing-bottom-left-1)
 $D398 DEFB $00,$00,$00,$00,$0A,$00,$00,$39 ; {bitmap: CRAWL FACING BOTTOM LEFT
 $D3A0 DEFB $80,$00,$FE,$C0,$03,$FE,$C0,$07 ; 1
 $D3A8 DEFB $FE,$C0,$08,$FE,$C0,$07,$7D,$CC
 $D3B0 DEFB $0F,$7B,$D6,$2F,$B5,$F8,$37,$38
 $D3B8 DEFB $E0,$C0,$18,$00,$40,$30,$00,$00
 $D3C0 DEFB $10,$00,$00,$60,$00             ; }
; #UDGARRAY3,7,4,3;$D3C5-$D3F4-1-24{0,0,96,64}(bitmap-crawl-facing-bottom-left-2)
 $D3C5 DEFB $00,$00,$00,$00,$0A,$00,$00,$3D ; {bitmap: CRAWL FACING BOTTOM LEFT
 $D3CD DEFB $80,$00,$FE,$80,$03,$FE,$C0,$03 ; 2
 $D3D5 DEFB $FE,$D8,$0D,$FD,$CC,$1E,$FB,$A0
 $D3DD DEFB $1E,$F7,$98,$1E,$77,$2C,$0C,$EF
 $D3E5 DEFB $F0,$30,$EF,$C0,$10,$C7,$00,$01
 $D3ED DEFB $80,$00,$01,$00,$00,$06,$00,$00 ; }
; #UDGARRAY3,7,4,3;$D3F5-$D424-1-24{0,0,96,64}(bitmap-crawl-facing-top-left-1)
 $D3F5 DEFB $03,$80,$00,$07,$A0,$00,$07,$78 ; {bitmap: CRAWL FACING TOP LEFT 1
 $D3FD DEFB $00,$06,$FE,$00,$01,$FC,$00,$07
 $D405 DEFB $F3,$80,$CF,$EF,$C0,$BE,$DF,$40
 $D40D DEFB $10,$3F,$40,$00,$3E,$C0,$00,$7D
 $D415 DEFB $C0,$00,$73,$80,$00,$79,$C0,$00
 $D41D DEFB $1A,$E8,$00,$03,$2C,$00,$01,$04 ; }
; #UDGARRAY3,7,4,3;$D425-$D454-1-24{0,0,96,64}(bitmap-crawl-facing-top-left-2)
 $D425 DEFB $03,$80,$00,$07,$80,$00,$06,$78 ; {bitmap: CRAWL FACING TOP LEFT 2
 $D42D DEFB $00,$05,$FE,$00,$03,$F8,$00,$07
 $D435 DEFB $F7,$80,$07,$6F,$C0,$03,$9F,$40
 $D43D DEFB $37,$9F,$40,$2F,$1F,$00,$00,$1F
 $D445 DEFB $00,$00,$1E,$00,$00,$0E,$C0,$00
 $D44D DEFB $0F,$00,$00,$07,$60,$00,$01,$30 ; }
; #UDGARRAY3,7,4,3;$D455-$D484-1-24{0,0,96,64}(mask-crawl-facing-top-left)
 $D455 DEFB $F8,$1F,$FF,$F0,$07,$FF,$F0,$01 ; {mask: CRAWL FACING TOP LEFT
 $D45D DEFB $FF,$F0,$00,$FF,$F8,$00,$7F,$30 ; (shared)
 $D465 DEFB $00,$3F,$00,$00,$1F,$00,$00,$1F
 $D46D DEFB $00,$00,$1F,$80,$00,$1F,$D0,$00
 $D475 DEFB $1F,$FF,$00,$3F,$FF,$00,$17,$FF
 $D47D DEFB $80,$03,$FF,$E0,$01,$FF,$F8,$01 ; }
; #UDGARRAY2,7,4,2;$D485-$D4C4-1-16(mask-various-facing-top-left-1)
 $D485 DEFB $FE,$0F,$FC,$07,$F8,$03,$FC,$01 ; {mask: VARIOUS FACING TOP LEFT 1
 $D48D DEFB $FC,$01,$F8,$01,$FC,$01,$F8,$00
 $D495 DEFB $F0,$00,$F0,$00,$E0,$00,$E0,$00
 $D49D DEFB $E0,$00,$C0,$00,$C0,$01,$C0,$03
 $D4A5 DEFB $C0,$01,$E0,$01,$C0,$01,$E0,$01
 $D4AD DEFB $E0,$01,$E0,$01,$E0,$03,$E0,$07
 $D4B5 DEFB $C0,$07,$E0,$07,$F0,$07,$F8,$07
 $D4BD DEFB $FE,$8F,$FF,$DF,$FF,$FF,$FF,$FF ; }
; #UDGARRAY2,7,4,2;$D4C5-$D504-1-16(mask-various-facing-top-left-2)
 $D4C5 DEFB $FE,$0F,$FC,$07,$F8,$03,$FC,$01 ; {mask: VARIOUS FACING TOP LEFT 2
 $D4CD DEFB $FC,$01,$F8,$01,$FC,$01,$F8,$01
 $D4D5 DEFB $F0,$00,$E0,$00,$C0,$00,$C0,$00
 $D4DD DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $D4E5 DEFB $00,$00,$C0,$01,$C0,$03,$C0,$03
 $D4ED DEFB $C0,$03,$C0,$03,$80,$03,$80,$07
 $D4F5 DEFB $C0,$0F,$E0,$0F,$F0,$0F,$F8,$0F
 $D4FD DEFB $FE,$1F,$FF,$3F,$FF,$FF,$FF,$FF ; }
; #UDGARRAY2,7,4,2;$D505-$D544-1-16(mask-various-facing-top-left-3)
 $D505 DEFB $FE,$0F,$FC,$07,$F8,$07,$FC,$03 ; {mask: VARIOUS FACING TOP LEFT 3
 $D50D DEFB $FC,$01,$F8,$01,$FC,$01,$F8,$01
 $D515 DEFB $F0,$00,$E0,$00,$C0,$00,$C0,$00
 $D51D DEFB $C0,$00,$C0,$01,$80,$00,$80,$00
 $D525 DEFB $80,$01,$C0,$03,$80,$03,$C0,$03
 $D52D DEFB $C0,$03,$C0,$03,$C0,$07,$C0,$0F
 $D535 DEFB $E0,$0F,$F0,$07,$F0,$0F,$E0,$1F
 $D53D DEFB $F0,$3F,$F8,$3F,$FE,$7F,$FF,$FF ; }
; #UDGARRAY2,7,4,2;$D545-$D584-1-16(mask-various-facing-top-left-4)
 $D545 DEFB $FE,$0F,$FC,$07,$F8,$03,$FC,$01 ; {mask: VARIOUS FACING TOP LEFT 4
 $D54D DEFB $FC,$01,$F8,$01,$FC,$01,$FC,$00
 $D555 DEFB $F8,$00,$F0,$00,$E0,$00,$E0,$01
 $D55D DEFB $E0,$03,$E0,$03,$E0,$03,$F0,$03
 $D565 DEFB $E0,$03,$E0,$01,$E0,$01,$E0,$03
 $D56D DEFB $E0,$03,$E0,$03,$C0,$03,$C0,$03
 $D575 DEFB $80,$03,$80,$03,$C0,$07,$E0,$CF
 $D57D DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; }
; #UDGARRAY2,7,4,2;$D585-$D5C4-1-16(mask-various-facing-top-right-1)
 $D585 DEFB $F8,$1F,$F0,$0F,$E0,$0F,$E0,$07 ; {mask: VARIOUS FACING BOTTOM
 $D58D DEFB $F0,$0F,$C0,$0F,$80,$07,$C0,$03 ; RIGHT 1
 $D595 DEFB $80,$03,$00,$07,$00,$07,$00,$03
 $D59D DEFB $00,$01,$00,$01,$00,$01,$00,$03
 $D5A5 DEFB $00,$0F,$00,$0F,$00,$0F,$80,$07
 $D5AD DEFB $80,$07,$80,$07,$C0,$0F,$C0,$1F
 $D5B5 DEFB $E0,$3F,$E0,$1F,$F4,$0F,$FE,$1F
 $D5BD DEFB $FF,$7F,$FF,$FF,$FF,$FF,$FF,$FF ; }
; #UDGARRAY2,7,4,2;$D5C5-$D604-1-16(mask-various-facing-top-right-2)
 $D5C5 DEFB $F8,$1F,$F0,$0F,$E0,$0F,$E0,$07 ; {mask: VARIOUS FACING BOTTOM
 $D5CD DEFB $F0,$0F,$E0,$0F,$C0,$07,$C0,$03 ; RIGHT 2
 $D5D5 DEFB $80,$07,$80,$07,$00,$07,$00,$03
 $D5DD DEFB $00,$03,$00,$07,$80,$07,$80,$03
 $D5E5 DEFB $C0,$07,$80,$03,$80,$03,$80,$07
 $D5ED DEFB $80,$07,$80,$07,$80,$07,$80,$07
 $D5F5 DEFB $C0,$03,$E0,$03,$C0,$27,$E0,$3F
 $D5FD DEFB $F0,$7F,$FF,$FF,$FF,$FF,$FF,$FF ; }
; #UDGARRAY2,7,4,2;$D605-$D63C-1-16{0,0,64,112}(mask-various-facing-top-right-3)
 $D605 DEFB $F8,$1F,$F0,$0F,$E0,$0F,$E0,$07 ; {mask: VARIOUS FACING BOTTOM
 $D60D DEFB $F0,$0F,$C0,$0F,$80,$07,$C0,$03 ; RIGHT 3
 $D615 DEFB $C0,$07,$80,$07,$80,$07,$00,$03
 $D61D DEFB $00,$03,$00,$01,$80,$01,$C0,$03
 $D625 DEFB $80,$07,$80,$07,$80,$07,$80,$07
 $D62D DEFB $80,$07,$80,$0F,$80,$07,$00,$07
 $D635 DEFB $00,$0F,$00,$07,$83,$03,$C7,$C7 ; }
; #UDGARRAY2,7,4,2;$D63D-$D676-1-16{0,0,64,116}(mask-various-facing-top-right-4)
 $D63D DEFB $F8,$1F,$F0,$0F,$E0,$0F,$E0,$07 ; {mask: VARIOUS FACING BOTTOM
 $D645 DEFB $F0,$0F,$E0,$0F,$C0,$07,$C0,$03 ; RIGHT 4
 $D64D DEFB $C0,$03,$80,$07,$80,$07,$00,$07
 $D655 DEFB $00,$03,$00,$07,$80,$03,$80,$03
 $D65D DEFB $80,$07,$80,$07,$80,$07,$80,$07
 $D665 DEFB $80,$07,$80,$0F,$C0,$1F,$C0,$0F
 $D66D DEFB $E0,$1F,$C0,$0F,$E0,$07,$F0,$0F
 $D675 DEFB $F8,$FF                         ; }
; #UDGARRAY3,7,4,3;$D677-$D6A6-1-24(mask-crawl-facing-bottom-left)
 $D677 DEFB $FF,$F5,$FF,$FF,$C0,$7F,$FF,$00 ; {mask: CRAWL FACING BOTTOM LEFT
 $D67F DEFB $3F,$FC,$00,$1F,$F8,$00,$07,$F0 ; (shared)
 $D687 DEFB $00,$03,$E0,$00,$01,$C0,$00,$01
 $D68F DEFB $C0,$00,$00,$80,$00,$01,$00,$00
 $D697 DEFB $03,$00,$00,$0F,$06,$00,$3F,$AC
 $D69F DEFB $00,$FF,$F8,$0F,$FF,$F0,$1F,$FF ; }
; #UDGARRAY2,7,4,2;$D6A7-$D6DC-1-16{0,0,64,108}(bitmap-guard-facing-top-left-1)
 $D6A7 DEFB $00,$00,$01,$E0,$03,$F0,$01,$F0 ; {bitmap: GUARD FACING TOP LEFT 1
 $D6AF DEFB $01,$E4,$02,$F4,$01,$08,$00,$7C
 $D6B7 DEFB $07,$FC,$07,$DC,$0F,$C4,$0E,$34
 $D6BF DEFB $0E,$F4,$1D,$C4,$1C,$38,$1A,$78
 $D6C7 DEFB $1A,$DC,$03,$DC,$1B,$DC,$07,$DC
 $D6CF DEFB $0F,$DC,$0F,$9C,$0F,$98,$07,$60
 $D6D7 DEFB $18,$70,$0E,$B0,$00,$E0         ; }
; #UDGARRAY2,7,4,2;$D6DD-$D712-1-16{0,0,64,108}(bitmap-guard-facing-top-left-2)
 $D6DD DEFB $00,$00,$01,$E0,$03,$F0,$01,$F0 ; {bitmap: GUARD FACING TOP LEFT 2
 $D6E5 DEFB $01,$E4,$02,$F4,$01,$04,$00,$78
 $D6ED DEFB $07,$FC,$0F,$AC,$1F,$8C,$18,$6C
 $D6F5 DEFB $1B,$E8,$3B,$C8,$B4,$30,$AC,$F0
 $D6FD DEFB $0D,$F8,$1F,$B8,$1F,$B8,$1F,$38
 $D705 DEFB $1F,$38,$1F,$38,$3E,$38,$3D,$B0
 $D70D DEFB $1D,$00,$03,$40,$06,$00         ; }
; #UDGARRAY2,7,4,2;$D713-$D74C-1-16{0,0,64,116}(bitmap-guard-facing-top-left-3)
 $D713 DEFB $00,$00,$01,$E0,$03,$F0,$01,$F0 ; {bitmap: GUARD FACING TOP LEFT 3
 $D71B DEFB $01,$E4,$02,$F4,$01,$04,$00,$78
 $D723 DEFB $07,$FC,$0F,$BC,$1F,$84,$1E,$74
 $D72B DEFB $1D,$E8,$1B,$90,$38,$70,$34,$F8
 $D733 DEFB $35,$B8,$0F,$B8,$2F,$B8,$0F,$B8
 $D73B DEFB $1F,$B8,$1F,$B8,$1F,$90,$1F,$40
 $D743 DEFB $0F,$40,$00,$00,$03,$00,$0B,$00
 $D74B DEFB $06,$00                         ; }
; #UDGARRAY2,7,4,2;$D74D-$D782-1-16{0,0,64,108}(bitmap-guard-facing-top-left-4)
 $D74D DEFB $00,$00,$01,$E0,$03,$F0,$01,$F0 ; {bitmap: GUARD FACING TOP LEFT 4
 $D755 DEFB $01,$E4,$02,$F4,$01,$04,$00,$78
 $D75D DEFB $03,$FC,$07,$D8,$0F,$C4,$0C,$38
 $D765 DEFB $0D,$F0,$0D,$C0,$0E,$38,$06,$78
 $D76D DEFB $06,$D8,$09,$D8,$06,$D8,$09,$D8
 $D775 DEFB $0F,$98,$0F,$98,$1F,$90,$1F,$40
 $D77D DEFB $27,$70,$38,$00,$18,$00         ; }
; #UDGARRAY2,7,4,2;$D783-$D7BC-1-16{0,0,64,116}(bitmap-guard-facing-bottom-right-1)
 $D783 DEFB $00,$00,$00,$00,$07,$80,$0F,$C0 ; {bitmap: GUARD FACING BOTTOM
 $D78B DEFB $0F,$80,$07,$40,$0C,$80,$23,$A0 ; RIGHT 1
 $D793 DEFB $14,$70,$16,$D0,$6A,$D0,$EB,$50
 $D79B DEFB $EB,$50,$65,$38,$74,$D4,$25,$4C
 $D7A3 DEFB $1A,$E0,$22,$E0,$36,$F0,$35,$70
 $D7AB DEFB $33,$B0,$3F,$B0,$3F,$A0,$1F,$80
 $D7B3 DEFB $1E,$40,$01,$80,$0B,$80,$05,$E0
 $D7BB DEFB $00,$80                         ; }
; #UDGARRAY2,7,4,2;$D7BD-$D7F6-1-16{0,0,64,116}(bitmap-guard-facing-bottom-right-2)
 $D7BD DEFB $00,$00,$00,$00,$07,$80,$0F,$C0 ; {bitmap: GUARD FACING BOTTOM
 $D7C5 DEFB $0F,$80,$07,$40,$0C,$80,$13,$A0 ; RIGHT 2
 $D7CD DEFB $14,$70,$16,$D0,$16,$D0,$2B,$50
 $D7D5 DEFB $6B,$50,$6B,$10,$68,$D0,$35,$68
 $D7DD DEFB $35,$68,$0A,$E0,$1A,$F0,$26,$F0
 $D7E5 DEFB $35,$70,$33,$70,$3F,$60,$3F,$00
 $D7ED DEFB $3F,$60,$1C,$60,$03,$30,$06,$00
 $D7F5 DEFB $03,$80                         ; }
; #UDGARRAY2,7,4,2;$D7F7-$D82E-1-16{0,0,64,112}(bitmap-guard-facing-bottom-right-3)
 $D7F7 DEFB $00,$00,$00,$00,$07,$80,$0F,$C0 ; {bitmap: GUARD FACING BOTTOM
 $D7FF DEFB $0F,$80,$07,$40,$0C,$80,$23,$A0 ; RIGHT 3
 $D807 DEFB $14,$60,$16,$D0,$2A,$D0,$2B,$50
 $D80F DEFB $6B,$40,$75,$00,$74,$E0,$39,$60
 $D817 DEFB $15,$60,$2C,$F0,$32,$F0,$36,$F0
 $D81F DEFB $35,$70,$32,$F0,$3E,$C0,$3E,$30
 $D827 DEFB $1E,$70,$60,$60,$70,$70,$38,$38 ; }
; #UDGARRAY2,7,4,2;$D82F-$D866-1-16{0,0,64,112}(bitmap-guard-facing-bottom-right-4)
 $D82F DEFB $00,$00,$00,$00,$07,$80,$0F,$C0 ; {bitmap: GUARD FACING BOTTOM
 $D837 DEFB $0F,$80,$07,$40,$0C,$80,$13,$A0 ; RIGHT 4
 $D83F DEFB $14,$70,$16,$D0,$16,$D0,$2B,$50
 $D847 DEFB $6B,$50,$6B,$10,$68,$D0,$35,$60
 $D84F DEFB $35,$60,$0A,$E0,$1A,$F0,$25,$70
 $D857 DEFB $2B,$70,$27,$B0,$3F,$B0,$1F,$80
 $D85F DEFB $1F,$40,$0C,$80,$12,$C0,$0F,$60 ; }
; #UDGARRAY3,7,4,3;$D867-$D896-1-24{0,0,96,64}(bitmap-dog-facing-top-left-1)
 $D867 DEFB $1A,$C0,$00,$1F,$80,$00,$0B,$80 ; {bitmap: DOG FACING TOP LEFT 1
 $D86F DEFB $00,$04,$C0,$00,$03,$F0,$00,$03
 $D877 DEFB $FC,$00,$01,$FF,$00,$0F,$FF,$C0
 $D87F DEFB $13,$FF,$E0,$00,$7F,$E0,$00,$1F
 $D887 DEFB $E0,$00,$03,$D0,$00,$01,$D0,$00
 $D88F DEFB $00,$88,$00,$00,$A0,$00,$03,$10 ; }
; #UDGARRAY3,7,4,3;$D897-$D8C6-1-24{0,0,96,64}(bitmap-dog-facing-top-left-2)
 $D897 DEFB $1A,$80,$00,$1F,$C0,$00,$0B,$80 ; {bitmap: DOG FACING TOP LEFT 2
 $D89F DEFB $00,$04,$C0,$00,$03,$F0,$00,$03
 $D8A7 DEFB $F8,$00,$03,$FF,$00,$01,$FF,$C0
 $D8AF DEFB $01,$FF,$E0,$01,$7F,$E0,$03,$1B
 $D8B7 DEFB $E0,$06,$03,$D0,$00,$03,$B0,$00
 $D8BF DEFB $01,$D0,$00,$00,$40,$00,$00,$C0 ; }
; #UDGARRAY3,7,4,3;$D8C7-$D8F3-1-24{0,0,96,60}(bitmap-dog-facing-top-left-3)
 $D8C7 DEFB $1A,$80,$00,$1F,$C0,$00,$0B,$80 ; {bitmap: DOG FACING TOP LEFT 3
 $D8CF DEFB $00,$04,$C0,$00,$03,$E0,$00,$03
 $D8D7 DEFB $F8,$00,$03,$FF,$00,$03,$FF,$C0
 $D8DF DEFB $01,$FF,$E0,$01,$3F,$E0,$01,$DD
 $D8E7 DEFB $E0,$00,$03,$D0,$00,$01,$B0,$00
 $D8EF DEFB $00,$90,$00,$03,$00             ; }
; #UDGARRAY3,7,4,3;$D8F4-$D920-1-24{0,0,96,60}(bitmap-dog-facing-top-left-4)
 $D8F4 DEFB $1A,$C0,$00,$1F,$80,$00,$0B,$80 ; {bitmap: DOG FACING TOP LEFT 4
 $D8FC DEFB $00,$04,$C0,$00,$03,$F0,$00,$03
 $D904 DEFB $FC,$00,$03,$FF,$00,$01,$FF,$C0
 $D90C DEFB $01,$FF,$E0,$03,$7F,$E0,$06,$BD
 $D914 DEFB $E0,$00,$03,$D0,$00,$03,$30,$00
 $D91C DEFB $0E,$C8,$00,$01,$80             ; }
; #UDGARRAY3,7,4,3;$D921-$D950-1-24(mask-dog-facing-top-left)
 $D921 DEFB $C0,$1F,$FF,$C0,$1F,$FF,$E0,$3F ; {mask: DOG FACING TOP LEFT
 $D929 DEFB $FF,$F0,$0F,$FF,$F8,$03,$FF,$F8 ; (shared)
 $D931 DEFB $00,$FF,$F0,$00,$3F,$E0,$00,$1F
 $D939 DEFB $C0,$00,$0F,$E8,$00,$0F,$F0,$00
 $D941 DEFB $0F,$F0,$00,$07,$F9,$F0,$07,$FF
 $D949 DEFB $E0,$03,$FF,$F0,$07,$FF,$F8,$07 ; }
; #UDGARRAY3,7,4,3;$D951-$D97A-1-24{0,0,96,56}(bitmap-dog-facing-bottom-right-1)
 $D951 DEFB $00,$00,$00,$0E,$00,$00,$1F,$80 ; {bitmap: DOG FACING BOTTOM RIGHT
 $D959 DEFB $00,$1F,$C0,$00,$1F,$F0,$00,$1F ; 1
 $D961 DEFB $F8,$00,$0F,$FD,$80,$0E,$FF,$00
 $D969 DEFB $04,$FF,$C0,$08,$7E,$C0,$08,$1D
 $D971 DEFB $E0,$00,$0C,$60,$00,$02,$00,$00
 $D979 DEFB $01,$80                         ; }
; #UDGARRAY3,7,4,3;$D97B-$D9A7-1-24{0,0,96,60}(bitmap-dog-facing-bottom-right-2)
 $D97B DEFB $00,$00,$00,$0E,$00,$00,$1F,$00 ; {bitmap: DOG FACING BOTTOM RIGHT
 $D983 DEFB $00,$1F,$C0,$00,$1F,$E0,$00,$1F ; 2
 $D98B DEFB $F8,$00,$0F,$FD,$00,$1E,$FF,$00
 $D993 DEFB $68,$FF,$C0,$00,$7E,$C0,$00,$1D
 $D99B DEFB $E0,$00,$18,$60,$00,$0A,$00,$00
 $D9A3 DEFB $12,$00,$00,$08,$00             ; }
; #UDGARRAY3,7,4,3;$D9A8-$D9CE-1-24{0,0,96,60}(bitmap-dog-facing-bottom-right-3)
 $D9A8 DEFB $00,$00,$00,$0C,$00,$00,$1F,$00 ; {bitmap: DOG FACING BOTTOM RIGHT
 $D9B0 DEFB $00,$1F,$C0,$00,$1F,$E0,$00,$1F ; 3
 $D9B8 DEFB $F8,$00,$0F,$FD,$00,$0E,$FF,$00
 $D9C0 DEFB $18,$FF,$C0,$09,$7E,$C0,$04,$19
 $D9C8 DEFB $E0,$00,$6C,$60,$00,$1A,$00     ; }
; #UDGARRAY3,7,4,3;$D9CF-$D9F8-1-24{0,0,96,56}(bitmap-dog-facing-bottom-right-4)
 $D9CF DEFB $00,$00,$00,$0C,$00,$00,$1F,$00 ; {bitmap: DOG FACING BOTTOM RIGHT
 $D9D7 DEFB $00,$1F,$C0,$00,$1F,$F0,$00,$0F ; 4
 $D9DF DEFB $F8,$00,$0F,$FD,$80,$0E,$FF,$00
 $D9E7 DEFB $06,$7F,$C0,$04,$7E,$C0,$02,$1D
 $D9EF DEFB $E0,$01,$0A,$60,$00,$0D,$00,$00
 $D9F7 DEFB $18,$00                         ; }
; #UDGARRAY3,7,4,3;$D9F9-$DA28-1-24(mask-dog-facing-bottom-right)
 $D9F9 DEFB $F1,$FF,$FF,$E0,$7F,$FF,$C0,$3F ; {mask: DOG FACING BOTTOM RIGHT
 $DA01 DEFB $FF,$C0,$0F,$FF,$C0,$07,$FF,$C0 ; (shared)
 $DA09 DEFB $02,$7F,$E0,$00,$3F,$80,$00,$3F
 $DA11 DEFB $00,$00,$1F,$80,$00,$1F,$E0,$00
 $DA19 DEFB $0F,$F0,$00,$0F,$FE,$80,$1F,$FF
 $DA21 DEFB $C0,$3F,$FF,$E0,$7F,$FF,$F7,$FF ; }
; #UDGARRAY3,7,4,3;$DA29-$DA6A-1-24{0,0,96,96}(flag-up)
 $DA29 DEFB $00,$00,$00,$00,$00,$7C,$00,$03 ; {bitmap: FLAG UP
 $DA31 DEFB $FE,$80,$1F,$FE,$E0,$FF,$8E,$7F
 $DA39 DEFB $FC,$06,$7F,$E0,$06,$7F,$00,$7E
 $DA41 DEFB $60,$03,$FE,$60,$1F,$FE,$30,$FF
 $DA49 DEFB $FE,$3F,$FF,$0C,$3F,$FC,$1C,$3F
 $DA51 DEFB $F0,$1C,$3F,$80,$F8,$30,$03,$F8
 $DA59 DEFB $70,$0F,$C0,$60,$7E,$00,$7F,$F8
 $DA61 DEFB $00,$FF,$E0,$00,$0F,$00,$00,$00
 $DA69 DEFB $00,$00                         ; }
; #UDGARRAY3,7,4,3;$DA6B-$DAB5-1-24{0,0,96,96}(flag-down)
 $DA6B DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {bitmap: FLAG DOWN
 $DA73 DEFB $00,$F8,$00,$00,$7F,$00,$00,$7F
 $DA7B DEFB $E0,$00,$3F,$FC,$1C,$30,$FF,$FC
 $DA83 DEFB $30,$1F,$FC,$30,$03,$D8,$3F,$00
 $DA8B DEFB $18,$3F,$E0,$18,$3F,$FC,$38,$3F
 $DA93 DEFB $FF,$F0,$70,$FF,$F0,$60,$1F,$F0
 $DA9B DEFB $60,$07,$F0,$7F,$00,$F8,$FF,$E0
 $DAA3 DEFB $18,$C3,$F8,$18,$00,$7F,$1C,$00
 $DAAB DEFB $0F,$FC,$00,$00,$F0,$00,$00,$00
 $DAB3 DEFB $00,$00,$00                     ; }
; #UDGARRAY3,7,4,3;$DAB6-$DAFD-1-24{0,0,96,96}(bitmap-crate)
 $DAB6 DEFB $00,$30,$00,$00,$FC,$00,$03,$FF ; {bitmap: CRATE
 $DABE DEFB $00,$0F,$E7,$C0,$3F,$99,$F0,$4E
 $DAC6 DEFB $66,$7C,$73,$99,$FF,$78,$E7,$FC
 $DACE DEFB $7B,$3F,$F3,$7B,$CF,$CF,$3B,$F3
 $DAD6 DEFB $3F,$4B,$FC,$FF,$73,$FD,$FF,$78
 $DADE DEFB $FD,$FC,$7B,$3D,$F3,$7B,$CD,$CF
 $DAE6 DEFB $7B,$F1,$3F,$3B,$FC,$FF,$0B,$FD
 $DAEE DEFB $FF,$03,$FD,$FF,$00,$FD,$FC,$00
 $DAF6 DEFB $3D,$F0,$00,$0D,$C0,$00,$01,$00 ; }
; #UDGARRAY3,7,4,3;$DAFE-$DB45-1-24(mask-crate)
 $DAFE DEFB $FF,$03,$FF,$FC,$00,$FF,$F0,$00 ; {mask: CRATE
 $DB06 DEFB $3F,$C0,$00,$0F,$80,$00,$03,$00
 $DB0E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DB16 DEFB $00,$00,$00,$00,$00,$00,$80,$00
 $DB1E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DB26 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DB2E DEFB $00,$00,$00,$80,$00,$00,$C0,$00
 $DB36 DEFB $00,$F0,$00,$00,$FC,$00,$00,$FF
 $DB3E DEFB $00,$03,$FF,$C0,$0F,$FF,$F0,$3F ; }
; #UDGARRAY2,7,4,2;$DB46-$DB71-1-16{0,0,64,88}(bitmap-stove)
 $DB46 DEFB $1C,$00,$13,$C0,$0C,$30,$13,$C8 ; {bitmap: STOVE
 $DB4E DEFB $1F,$F8,$0F,$F0,$13,$C8,$0C,$30
 $DB56 DEFB $0F,$F0,$0F,$F0,$1F,$F8,$19,$98
 $DB5E DEFB $16,$68,$35,$AC,$36,$6C,$3B,$DC
 $DB66 DEFB $3C,$3C,$2F,$F4,$17,$E8,$3B,$DC
 $DB6E DEFB $33,$CC,$60,$06                 ; }
; #UDGARRAY2,7,4,2;$DB72-$DB9D-1-16(mask-stove)
 $DB72 DEFB $C0,$3F,$C0,$0F,$E0,$07,$C0,$03 ; {mask: STOVE
 $DB7A DEFB $C0,$03,$E0,$07,$C0,$03,$E0,$07
 $DB82 DEFB $E0,$07,$E0,$07,$C0,$03,$C0,$03
 $DB8A DEFB $C0,$03,$80,$01,$80,$01,$80,$01
 $DB92 DEFB $80,$01,$80,$01,$C0,$03,$80,$01
 $DB9A DEFB $80,$01,$0C,$30                 ; }

; mark_nearby_items
;
; Used by the routines at #R$6939 and #R$9D78.
; .
; Iterates over item structs. Tests to see if items are within range
; (-1..22,0..15) of the map position.
; .
; This is similar to is_item_discoverable_interior in that it iterates over
; item_structs.
c$DB9E LD A,($68A0)  ; A = room_index;
 $DBA1 CP $FF        ; {if (A == room_NONE) A = 0;
 $DBA3 JR NZ,$DBA6   ;
 $DBA5 XOR A         ; }
*$DBA6 LD C,A        ; C = A; // room ref
 $DBA7 LD DE,($81BB) ; DE = map_position;
 $DBAB LD B,$10      ; B = item__LIMIT;
 $DBAD LD HL,$76C9   ; HL = &item_structs[0].room;
*$DBB0 PUSH HL       ; do <% -
 $DBB1 LD A,(HL)     ; {  if (HL[0] & itemstruct_ROOM_MASK == C) <% // compare
 $DBB2 AND $3F       ; room
 $DBB4 CP C          ;
 $DBB5 JR NZ,$DBDC   ; }
 $DBB7 INC HL        ; {    if (HL[4] > E - 2 && HL[4] < E + 23) <% //
 $DBB8 INC HL        ; itemstruct.unk2
 $DBB9 INC HL        ;
 $DBBA INC HL        ;
 $DBBB LD A,E        ;
 $DBBC DEC A         ;
 $DBBD DEC A         ;
 $DBBE CP (HL)       ;
 $DBBF JR Z,$DBC3    ;
 $DBC1 JR NC,$DBDC   ;
*$DBC3 ADD A,$19     ;
 $DBC5 CP (HL)       ;
 $DBC6 JR C,$DBDC    ; }
 $DBC8 LD A,D        ; {      if (HL[5] > D - 1 && HL[5] < D + 16) <% //
 $DBC9 INC HL        ; itemstruct.unk3
 $DBCA DEC A         ;
 $DBCB CP (HL)       ;
 $DBCC JR Z,$DBD0    ;
 $DBCE JR NC,$DBDC   ;
*$DBD0 ADD A,$11     ;
 $DBD2 CP (HL)       ;
 $DBD3 JR C,$DBDC    ; }
 $DBD5 POP HL        ;         -
 $DBD6 SET 7,(HL)    ; {        *HL |= itemstruct_ROOM_FLAG_BIT6 |
 $DBD8 SET 6,(HL)    ; itemstruct_ROOM_FLAG_ITEM_NEARBY; // sampled HL=$772B
                     ; &itemstruct_14.room}
 $DBDA JR $DBE1      ;         goto next; %> %> %>
; Reset.
*$DBDC POP HL        ;   -
 $DBDD RES 7,(HL)    ; {  *HL &= ~(itemstruct_ROOM_FLAG_BIT6 |
 $DBDF RES 6,(HL)    ; itemstruct_ROOM_FLAG_ITEM_NEARBY);}
*$DBE1 LD A,$07      ; {  next: HL += 7; // stride
 $DBE3 ADD A,L       ;
 $DBE4 LD L,A        ;
 $DBE5 JR NC,$DBE8   ;
 $DBE7 INC H         ; }
*$DBE8 DJNZ $DBB0    ; %> while (--B);
 $DBEA RET           ; return;

; sub_DBEB
;
; Used by the routine at #R$B89C.
; .
; Iterates over all items. Uses multiply_by_8.
;
; O:IY Pointer to ? (result?)
; O:Adash result?
c$DBEB LD BC,$1007   ; B = 16; // iterations
 $DBEE LD HL,$76C9   ; Outer_HL = &item_structs[0].room;
*$DBF1 BIT 7,(HL)    ; {do <% if ((*Outer_HL & (itemstruct_ROOM_FLAG_BIT6 |
 $DBF3 JR Z,$DC38    ; itemstruct_ROOM_FLAG_ITEM_NEARBY)) ==
 $DBF5 BIT 6,(HL)    ; (itemstruct_ROOM_FLAG_BIT6 |
 $DBF7 JR Z,$DC38    ; itemstruct_ROOM_FLAG_ITEM_NEARBY)) <%}
 $DBF9 PUSH HL       ;   HL = Outer_HL;
 $DBFA PUSH BC       ;   -
 $DBFB INC HL        ; {  HLdash = *++HL * 8; // y position
 $DBFC LD A,(HL)     ;
 $DBFD CALL $B1C7    ; }
 $DC00 PUSH BC       ;
 $DC01 EXX           ;
 $DC02 POP HL        ;
 $DC03 AND A         ;   A &= A; // clear carry?
 $DC04 SBC HL,BC     ;   HLdash -= BCdash; // where is BCdash initialised?
 $DC06 EXX           ;
 $DC07 JR Z,$DC36    ; {  if (HLdash > 0) <%
 $DC09 JR C,$DC36    ; }
 $DC0B INC HL        ;     HL++; // x position
 $DC0C LD A,(HL)     ; {    HLdash = *HL * 8;
 $DC0D CALL $B1C7    ; }
 $DC10 PUSH BC       ;     -
 $DC11 EXX           ;     -
 $DC12 POP HL        ;     // not clearing carry?
 $DC13 SBC HL,DE     ;     HLdash -= BCdash; // where is BCdash initialised?
 $DC15 EXX           ;
 $DC16 JR Z,$DC36    ; {    if (HLdash > 0) <%
 $DC18 JR C,$DC36    ; }
 $DC1A PUSH HL       ; {      HLdash = HL;
 $DC1B EXX           ;
 $DC1C POP HL        ; }
 $DC1D LD A,(HL)     ; {      DEdash = *HLdash-- * 8; // x position
 $DC1E CALL $B1C7    ;
 $DC21 LD E,C        ;
 $DC22 LD D,B        ;
 $DC23 DEC HL        ; }
 $DC24 LD A,(HL)     ; {      BCdash = *HLdash-- * 8; // y position
 $DC25 CALL $B1C7    ; }
 $DC28 DEC HL        ; {      HLdash--; // point to item
 $DC29 DEC HL        ; }
 $DC2A PUSH HL       ; {      IY = HLdash; // IY is not banked // sampled IY =
 $DC2B POP IY        ; $771C,7715 (pointing into item_structs)}
 $DC2D EXX           ;
 $DC2E POP BC        ;       - // fetch iter count
 $DC2F PUSH BC       ;       -
 $DC30 LD A,$10      ; {      A = (16 - B) | (1<<6);
 $DC32 SUB B         ;
 $DC33 OR $40        ; }
 $DC35 EX AF,AF'     ;       EX AF,AF' %> %> // unpaired // returns the value
                     ; in Adash
*$DC36 POP BC        ;       -
 $DC37 POP HL        ;       -
*$DC38 LD A,C        ; {  %> Outer_HL += 7; // stride
 $DC39 ADD A,L       ;
 $DC3A LD L,A        ;
 $DC3B JR NC,$DC3E   ;
 $DC3D INC H         ; }
*$DC3E DJNZ $DBF1    ; %> while (--B);
 $DC40 RET           ; return;

; setup_item_plotting
;
; Used by the routine at #R$B866.
;
; I:A  ?
; I:IY Pointer to itemstruct. (samples = 0x771C, 0x76F9)
c$DC41 AND $3F       ; A &= 0x3F;
 $DC43 LD ($8213),A  ; possibly_holds_an_item = A;
 $DC46 PUSH IY       ; {HL = IY + 2;
 $DC48 POP HL        ;
 $DC49 INC HL        ;
 $DC4A INC HL        ; }
 $DC4B LD DE,$81B2   ; DE = &byte_81B2;
 $DC4E LD BC,$0005   ; BC = 5;
 $DC51 LDIR          ; LDIR
 $DC53 EX DE,HL      ; EX DE,HL
 $DC54 LD (HL),B     ; *HL = B;
 $DC55 LD HL,$DD7D   ; {HL = &item_definitions[A];
 $DC58 ADD A,A       ;
 $DC59 LD C,A        ;
 $DC5A ADD A,A       ;
 $DC5B ADD A,C       ;
 $DC5C LD C,A        ;
 $DC5D ADD HL,BC     ; }
 $DC5E INC HL        ; HL++; // &item_definitions[A].second_member
 $DC5F LD A,(HL)     ; A = (HL);
 $DC60 LD ($8214),A  ; item_def_2nd_memb_copy = A;
 $DC63 INC HL        ; HL++;
 $DC64 LD DE,$81AC   ; {memcpy(&bitmap_pointer, HL, 4); // copy bitmap and mask
 $DC67 LD BC,$0004   ; pointers
 $DC6A LDIR          ; }
 $DC6C CALL $DD02    ; sub_DD02();
 $DC6F RET NZ        ; if (!Z) return;
 $DC70 PUSH BC       ; PUSH BC
 $DC71 PUSH DE       ; PUSH DE
 $DC72 LD A,E        ; A = E;
 $DC73 LD ($E2C2),A  ; ($E2C2) = A; // self modify
 $DC76 LD A,B        ; A = B;
 $DC77 AND A         ; {if (A == 0) <%
 $DC78 JP NZ,$DC81   ; }
 $DC7B LD A,$77      ;   A = 0x77; // 0b01110111
 $DC7D EX AF,AF'     ; {  Adash = C; %>
 $DC7E LD A,C        ; }
 $DC7F JR $DC86      ; else <%
*$DC81 XOR A         ;   A = 0;
 $DC82 EX AF,AF'     ; {  Adash = 3 - C; %>
 $DC83 LD A,$03      ;
 $DC85 SUB C         ; }
*$DC86 EXX           ;
 $DC87 LD C,A        ; Cdash = Adash;
 $DC88 EX AF,AF'     ;
 $DC89 LD HL,$E0E0   ; HLdash = &masked_sprite_plotter_16_enables[0];
 $DC8C LD B,$03      ; Bdash = 3; // iterations
*$DC8E LD E,(HL)     ; {do <% Edash = *HLdash++;
 $DC8F INC HL        ; }
 $DC90 LD D,(HL)     ;   Ddash = *HLdash;
 $DC91 LD (DE),A     ;   *DEdash = A;
 $DC92 INC HL        ;   HLdash++;
 $DC93 LD E,(HL)     ; {  Edash = *HLdash++;
 $DC94 INC HL        ; }
 $DC95 LD D,(HL)     ; {  Ddash = *HLdash++;
 $DC96 INC HL        ; }
 $DC97 LD (DE),A     ;   *DEdash = A;
 $DC98 DEC C         ; {  if (--Cdash == 0) A |= 0x77;
 $DC99 JR NZ,$DC9D   ;
 $DC9B XOR $77       ; }
*$DC9D DJNZ $DC8E    ; %> while (--Bdash);
 $DC9F EXX           ;
 $DCA0 LD A,D        ; A = D;
 $DCA1 AND A         ; A &= A;
 $DCA2 LD DE,$0000   ; DE = 0;
 $DCA5 JR NZ,$DCBC   ; if (Z) <%
 $DCA7 LD HL,$81BC   ;   HL = $81BC; // &map_position + 1;
 $DCAA LD A,($81B6)  ; {  A = ($81B6) - *HL;
 $DCAD SUB (HL)      ; }
 $DCAE LD L,A        ; {  HL = A * 192;
 $DCAF LD H,$00      ;
 $DCB1 ADD HL,HL     ;
 $DCB2 ADD HL,HL     ;
 $DCB3 ADD HL,HL     ;
 $DCB4 ADD HL,HL     ;
 $DCB5 ADD HL,HL     ;
 $DCB6 ADD HL,HL     ;
 $DCB7 LD E,L        ;
 $DCB8 LD D,H        ;
 $DCB9 ADD HL,HL     ;
 $DCBA ADD HL,DE     ; }
 $DCBB EX DE,HL      ;   EX DE,HL %>
*$DCBC LD A,($81B5)  ; A = map_position_related_1;
 $DCBF LD HL,$81BB   ; HL = $81BB; // &map_position;
 $DCC2 SUB (HL)      ; A -= *HL;
 $DCC3 LD L,A        ; {HL = A;
 $DCC4 LD H,$00      ; }
 $DCC6 JR NC,$DCCA   ; {if (carry) H = 0xFF;
 $DCC8 LD H,$FF      ; }
*$DCCA ADD HL,DE     ; HL += DE;
 $DCCB LD DE,$F290   ; DE = $F290; // screen buffer start address
 $DCCE ADD HL,DE     ; HL += DE;
 $DCCF LD ($81A2),HL ; ($81A2) = HL;  // screen buffer pointer
 $DCD2 LD HL,$8100   ; HL = $8100;
 $DCD5 POP DE        ; POP DE
 $DCD6 PUSH DE       ; PUSH DE
 $DCD7 LD A,D        ; {L += D * 4;
 $DCD8 ADD A,A       ;
 $DCD9 ADD A,A       ;
 $DCDA ADD A,L       ;
 $DCDB LD L,A        ; }
 $DCDC LD ($81B0),HL ; ($81B0) = HL;
 $DCDF POP DE        ; POP DE
 $DCE0 PUSH DE       ; PUSH DE
 $DCE1 LD A,D        ; A = D;
 $DCE2 AND A         ; {if (A) <%
 $DCE3 JR Z,$DCEF    ; }
 $DCE5 LD D,A        ;   D = A;
 $DCE6 XOR A         ;   A = 0;
 $DCE7 LD E,$03      ;   E = 3; // unusual (or self modified and i've not
                     ; spotted the setter)
 $DCE9 DEC E         ;   E--;
*$DCEA ADD A,E       ; {  do <% A += E; %> while (--D); %>
 $DCEB DEC D         ;
 $DCEC JP NZ,$DCEA   ; }
*$DCEF LD E,A        ; E = A;
 $DCF0 LD HL,($81AC) ; {bitmap_pointer += DE;
 $DCF3 ADD HL,DE     ;
 $DCF4 LD ($81AC),HL ; }
 $DCF7 LD HL,($81AE) ; {mask_pointer += DE;
 $DCFA ADD HL,DE     ;
 $DCFB LD ($81AE),HL ; }
 $DCFE POP BC        ; POP BC
 $DCFF POP DE        ; POP DE
 $DD00 XOR A         ; A = 0;
 $DD01 RET           ; return;

; sub_DD02
;
; Used by the routine at #R$DC41.
; .
; This is range checking something.
;
; O:AF Z => ?, !Z => ?
c$DD02 LD HL,$81B5   ; HL = &map_position_related_1;
 $DD05 LD DE,($81BB) ; DE = map_position;
 $DD09 LD A,E        ; {A = E + 24 - HL[0];
 $DD0A ADD A,$18     ;
 $DD0C SUB (HL)      ; }
 $DD0D JR Z,$DD66    ; {if (A <= 0) goto return_1;
 $DD0F JR C,$DD66    ; }
 $DD11 CP $03        ; {if (A < 3) <%
 $DD13 JP NC,$DD1B   ; }
 $DD16 LD B,$00      ; {  BC = A; %>
 $DD18 LD C,A        ; }
 $DD19 JR $DD33      ; else <%
*$DD1B LD A,(HL)     ; {  A = HL[0] + 3 - E;
 $DD1C ADD A,$03     ;
 $DD1E SUB E         ; }
 $DD1F JR Z,$DD66    ; {  if (A <= 0) goto return_1;
 $DD21 JR C,$DD66    ; }
 $DD23 CP $03        ; {  if (A < 3) <%
 $DD25 JP NC,$DD2F   ; }
 $DD28 LD C,A        ;     C = A;
 $DD29 LD A,$03      ; {    B = 3 - C; %>
 $DD2B SUB C         ;
 $DD2C LD B,A        ; }
 $DD2D JR $DD33      ;   else <%
*$DD2F LD B,$00      ; {    BC = 3; %> %>
 $DD31 LD C,$03      ; }
*$DD33 LD A,D        ; {A = D + 17 - HL[1];
 $DD34 ADD A,$11     ;
 $DD36 INC HL        ;
 $DD37 SUB (HL)      ; }
 $DD38 JR Z,$DD66    ; {if (A <= 0) goto return_1;
 $DD3A JR C,$DD66    ; }
 $DD3C CP $02        ; {if (A < 2) <%
 $DD3E JP NC,$DD47   ; }
 $DD41 LD E,$08      ; {  DE = 8; %>
 $DD43 LD D,$00      ; }
 $DD45 JR $DD64      ; else <%
*$DD47 LD A,(HL)     ; {  A = HL[1] + 2 - D;
 $DD48 ADD A,$02     ;
 $DD4A SUB D         ; }
 $DD4B JR Z,$DD66    ; {  if (A <= 0) goto return_1;
 $DD4D JR C,$DD66    ; }
 $DD4F CP $02        ; {  if (A < 2) <%
 $DD51 JP NC,$DD5E   ; }
 $DD54 LD A,($8214)  ; {    E = item_def_2nd_memb_copy - 8;
 $DD57 SUB $08       ;
 $DD59 LD E,A        ; }
 $DD5A LD D,$08      ;     D = 8; %>
 $DD5C JR $DD64      ;   else <%
*$DD5E LD D,$00      ; {    DE = item_def_2nd_memb_copy; %> %>
 $DD60 LD A,($8214)  ;
 $DD63 LD E,A        ; }
*$DD64 XOR A         ; return_0: A = 0;
 $DD65 RET           ; return;
*$DD66 OR $01        ; return_1: A |= 1;
 $DD68 RET           ; return;

; item_attributes
;
; 20 bytes, 4 of which are unknown, possibly unused.
; .
; 'Yellow/black' means yellow ink over black paper, for example.
b$DD69 DEFB $06      ; item_attribute: WIRESNIPS - yellow/black
 $DD6A DEFB $05      ; item_attribute: SHOVEL - cyan/black
 $DD6B DEFB $05      ; item_attribute: LOCKPICK - cyan/black
 $DD6C DEFB $07      ; item_attribute: PAPERS - white/black
 $DD6D DEFB $04      ; item_attribute: TORCH - green/black
 $DD6E DEFB $42      ; item_attribute: BRIBE - bright-red/black
 $DD6F DEFB $04      ; item_attribute: UNIFORM - green/black
; Food turns purple/black when it's poisoned.
 $DD70 DEFB $07      ; item_attribute: FOOD - white/black
 $DD71 DEFB $03      ; item_attribute: POISON - purple/black
 $DD72 DEFB $42      ; item_attribute: RED KEY - bright-red/black
 $DD73 DEFB $06      ; item_attribute: YELLOW KEY - yellow/black
 $DD74 DEFB $04      ; item_attribute: GREEN KEY - green/black
 $DD75 DEFB $05      ; item_attribute: PARCEL - cyan/black
 $DD76 DEFB $07      ; item_attribute: RADIO - white/black
 $DD77 DEFB $07      ; item_attribute: PURSE - white/black
 $DD78 DEFB $04      ; item_attribute: COMPASS - green/black
 $DD79 DEFB $06      ; item_attribute: Unused? - yellow/black
 $DD7A DEFB $05      ; item_attribute: Unused? - cyan/black
 $DD7B DEFB $42      ; item_attribute: Unused? - bright-red/black
 $DD7C DEFB $42      ; item_attribute: Unused? - bright-red/black

; item_definitions
;
; Item definitions:
; .
; Array of "sprite" structures.
b$DD7D DEFB $02,$0B,$7F,$DE,$1D,$DF ; { 2, 11, wiresnips_data, wiresnips_mask
                                    ; },
 $DD83 DEFB $02,$0D,$DD,$DD,$95,$DE ; { 2, 13, shovel_data, shovelkey_mask },
 $DD89 DEFB $02,$10,$11,$DE,$AF,$DE ; { 2, 16, lockpick_data, lockpick_mask },
 $DD8F DEFB $02,$0F,$61,$DE,$FF,$DE ; { 2, 15, papers_data, papers_mask },
 $DD95 DEFB $02,$0C,$73,$DF,$7F,$E0 ; { 2, 12, torch_data, torch_mask },
 $DD9B DEFB $02,$0D,$AB,$DF,$05,$E0 ; { 2, 13, bribe_data, bribe_mask },
 $DDA1 DEFB $02,$10,$8B,$DF,$1F,$E0 ; { 2, 16, uniform_data, uniform_mask },
 $DDA7 DEFB $02,$10,$33,$DF,$B7,$E0 ; { 2, 16, food_data, food_mask },
 $DDAD DEFB $02,$10,$53,$DF,$5F,$E0 ; { 2, 16, poison_data, poison_mask },
 $DDB3 DEFB $02,$0D,$F7,$DD,$95,$DE ; { 2, 13, key_data, shovelkey_mask },
 $DDB9 DEFB $02,$0D,$F7,$DD,$95,$DE ; { 2, 13, key_data, shovelkey_mask },
 $DDBF DEFB $02,$0D,$F7,$DD,$95,$DE ; { 2, 13, key_data, shovelkey_mask },
 $DDC5 DEFB $02,$10,$E5,$DF,$3F,$E0 ; { 2, 16, parcel_data, parcel_mask },
 $DDCB DEFB $02,$10,$C5,$DF,$97,$E0 ; { 2, 16, radio_data, radio_mask },
 $DDD1 DEFB $02,$0C,$49,$DE,$E7,$DE ; { 2, 12, purse_data, purse_mask },
 $DDD7 DEFB $02,$0C,$31,$DE,$CF,$DE ; { 2, 12, compass_data, compass_mask },

; item_bitmaps_and_masks
;
; Item bitmaps and masks.
; .
; Raw data.
; .
; #UDGARRAY2,7,4,2;$DDDD-$DDF6-1-16{0,0,64,52}(item-shovel)
b$DDDD DEFB $00,$00,$00,$02,$00,$05,$00,$0E ; {item_bitmap: SHOVEL
 $DDE5 DEFB $00,$30,$00,$C0,$33,$00,$6C,$00
 $DDED DEFB $E7,$00,$FC,$00,$00,$00,$00,$00
 $DDF5 DEFB $00,$00                         ; }
; #UDGARRAY2,7,4,2;$DDF7-$DE10-1-16{0,0,64,52}(item-key)
 $DDF7 DEFB $00,$00,$00,$00,$00,$00,$00,$18 ; {item_bitmap: KEY (shared for all
 $DDFF DEFB $00,$64,$00,$1C,$00,$70,$19,$C0 ; keys)
 $DE07 DEFB $27,$00,$32,$00,$19,$00,$07,$00
 $DE0F DEFB $00,$00                         ; }
; #UDGARRAY2,7,4,2;$DE11-$DE30-1-16{0,0,64,64}(item-lockpick)
 $DE11 DEFB $01,$80,$00,$C0,$03,$70,$0C,$60 ; {item_bitmap: LOCKPICK
 $DE19 DEFB $38,$40,$E0,$00,$C0,$00,$03,$18
 $DE21 DEFB $0C,$F0,$30,$C0,$23,$07,$2C,$08
 $DE29 DEFB $30,$38,$00,$E6,$03,$C4,$03,$00 ; }
; #UDGARRAY2,7,4,2;$DE31-$DE48-1-16{0,0,64,48}(item-compass)
 $DE31 DEFB $00,$00,$07,$E0,$18,$18,$24,$24 ; {item_bitmap: COMPASS
 $DE39 DEFB $41,$02,$41,$02,$24,$A4,$58,$9A
 $DE41 DEFB $27,$E4,$18,$18,$07,$E0,$00,$00 ; }
; #UDGARRAY2,7,4,2;$DE49-$DE60-1-16{0,0,64,48}(item-purse)
 $DE49 DEFB $00,$00,$01,$80,$07,$40,$03,$80 ; {item_bitmap: PURSE
 $DE51 DEFB $01,$00,$02,$80,$05,$40,$0D,$A0
 $DE59 DEFB $0B,$E0,$0F,$E0,$07,$C0,$00,$00 ; }
; #UDGARRAY2,7,4,2;$DE61-$DE7E-1-16{0,0,64,60}(item-papers)
 $DE61 DEFB $00,$00,$0C,$00,$07,$00,$06,$C0 ; {item_bitmap: PAPERS
 $DE69 DEFB $02,$B0,$33,$6C,$6C,$D4,$6B,$36
 $DE71 DEFB $DA,$CE,$D6,$F3,$35,$EC,$0D,$DC
 $DE79 DEFB $03,$D0,$00,$80,$00,$00         ; }
; #UDGARRAY2,7,4,2;$DE7F-$DE94-1-16{0,0,64,44}(item-wiresnips)
 $DE7F DEFB $00,$00,$00,$18,$00,$36,$00,$60 ; {item_bitmap: WIRESNIPS
 $DE87 DEFB $03,$FB,$0E,$6E,$30,$E0,$C1,$80
 $DE8F DEFB $06,$00,$18,$00,$00,$00         ; }
; #UDGARRAY2,7,4,2;$DE95-$DEAE-1-16{0,0,64,52}(item-mask-shovelkey)
 $DE95 DEFB $FF,$FD,$FF,$F8,$FF,$E0,$FF,$80 ; {item_mask: SHOVEL or KEY
 $DE9D DEFB $FF,$01,$CC,$01,$80,$03,$00,$0F ; (shared)
 $DEA5 DEFB $00,$3F,$00,$FF,$00,$7F,$E0,$7F
 $DEAD DEFB $F8,$FF                         ; }
; #UDGARRAY2,7,4,2;$DEAF-$DECE-1-16{0,0,64,64}(item-mask-lockpick)
 $DEAF DEFB $FC,$3F,$FC,$0F,$F0,$07,$C0,$0F ; {item_mask: LOCKPICK
 $DEB7 DEFB $03,$1F,$07,$BF,$1C,$E7,$30,$03
 $DEBF DEFB $C0,$07,$80,$08,$80,$30,$80,$C0
 $DEC7 DEFB $83,$01,$CC,$00,$F8,$11,$F8,$3B ; }
; #UDGARRAY2,7,4,2;$DECF-$DEE6-1-16{0,0,64,48}(item-mask-compass)
 $DECF DEFB $F8,$1F,$E0,$07,$C0,$03,$80,$01 ; {item_mask: COMPASS
 $DED7 DEFB $00,$00,$00,$00,$80,$01,$00,$00
 $DEDF DEFB $80,$01,$C0,$03,$E0,$07,$F8,$1F ; }
; #UDGARRAY2,7,4,2;$DEE7-$DEFE-1-16{0,0,64,48}(item-mask-purse)
 $DEE7 DEFB $FE,$7F,$F8,$3F,$F0,$1F,$F8,$3F ; {item_mask: PURSE
 $DEEF DEFB $FC,$3F,$F8,$3F,$F0,$1F,$E0,$0F
 $DEF7 DEFB $E0,$0F,$E0,$0F,$F0,$1F,$F8,$3F ; }
; #UDGARRAY2,7,4,2;$DEFF-$DF1C-1-16{0,0,64,60}(item-mask-papers)
 $DEFF DEFB $F3,$FF,$E0,$FF,$F0,$3F,$F0,$0F ; {item_mask: PAPERS
 $DF07 DEFB $C8,$03,$80,$01,$00,$01,$00,$00
 $DF0F DEFB $00,$00,$00,$00,$00,$00,$C0,$01
 $DF17 DEFB $F0,$03,$FC,$2F,$FF,$7F         ; }
; #UDGARRAY2,7,4,2;$DF1D-$DF32-1-16{0,0,64,44}(item-mask-wiresnips)
 $DF1D DEFB $FF,$E7,$FF,$C1,$FF,$80,$FC,$00 ; {item_mask: WIRESNIPS
 $DF25 DEFB $F0,$00,$C0,$00,$00,$01,$08,$1F
 $DF2D DEFB $20,$7F,$C1,$FF,$E7,$FF         ; }
; #UDGARRAY2,7,4,2;$DF33-$DF52-1-16{0,0,64,64}(item-food)
 $DF33 DEFB $00,$30,$00,$00,$00,$30,$00,$30 ; {item_bitmap: FOOD
 $DF3B DEFB $0E,$78,$1F,$B8,$07,$38,$18,$B8
 $DF43 DEFB $1E,$38,$19,$98,$17,$E0,$19,$F8
 $DF4B DEFB $06,$60,$07,$98,$01,$F8,$00,$60 ; }
; #UDGARRAY2,7,4,2;$DF53-$DF72-1-16{0,0,64,64}(item-poison)
 $DF53 DEFB $00,$00,$00,$80,$00,$80,$01,$40 ; {item_bitmap: POISON
 $DF5B DEFB $01,$C0,$00,$80,$01,$40,$03,$E0
 $DF63 DEFB $06,$30,$06,$B0,$06,$30,$06,$F0
 $DF6B DEFB $06,$F0,$07,$F0,$05,$D0,$03,$E0 ; }
; #UDGARRAY2,7,4,2;$DF73-$DF8A-1-16{0,0,64,48}(item-torch)
 $DF73 DEFB $00,$00,$00,$08,$00,$3C,$02,$FC ; {item_bitmap: TORCH
 $DF7B DEFB $0D,$70,$1E,$A0,$1E,$80,$16,$80
 $DF83 DEFB $16,$80,$16,$00,$0C,$00,$00,$00 ; }
; #UDGARRAY2,7,4,2;$DF8B-$DFAA-1-16{0,0,64,64}(item-uniform)
 $DF8B DEFB $01,$E0,$07,$F0,$0F,$F8,$0F,$F8 ; {item_bitmap: UNIFORM
 $DF93 DEFB $1F,$FC,$0F,$F3,$F3,$CC,$3C,$30
 $DF9B DEFB $0F,$CF,$F3,$3C,$3C,$F0,$0F,$CF
 $DFA3 DEFB $F3,$3C,$3C,$F0,$0F,$C0,$03,$00 ; }
; #UDGARRAY2,7,4,2;$DFAB-$DFC4-1-16{0,0,64,52}(item-bribe)
 $DFAB DEFB $00,$00,$00,$00,$03,$00,$0F,$C0 ; {item_bitmap: BRIBE
 $DFB3 DEFB $3F,$30,$4C,$FC,$F3,$F2,$3C,$CF
 $DFBB DEFB $0F,$3C,$03,$F0,$00,$C0,$00,$00
 $DFC3 DEFB $00,$00                         ; }
; #UDGARRAY2,7,4,2;$DFC5-$DFE4-1-16{0,0,64,64}(item-radio)
 $DFC5 DEFB $00,$10,$00,$10,$38,$10,$C6,$10 ; {item_bitmap: RADIO
 $DFCD DEFB $37,$90,$CC,$50,$F3,$50,$CC,$EE
 $DFD5 DEFB $B7,$38,$B6,$C6,$CF,$36,$3E,$D6
 $DFDD DEFB $0F,$36,$03,$D6,$00,$F6,$00,$35 ; }
; #UDGARRAY2,7,4,2;$DFE5-$E004-1-16{0,0,64,64}(item-parcel)
 $DFE5 DEFB $00,$00,$03,$00,$0E,$40,$39,$F0 ; {item_bitmap: PARCEL
 $DFED DEFB $E7,$E4,$1F,$9F,$8E,$7C,$B1,$F3
 $DFF5 DEFB $B8,$CF,$BB,$37,$BB,$73,$BB,$67
 $DFFD DEFB $BB,$77,$3B,$7C,$0B,$70,$03,$40 ; }
; #UDGARRAY2,7,4,2;$E005-$E01E-1-16{0,0,64,52}(item-mask-bribe)
 $E005 DEFB $FC,$FF,$F0,$3F,$C0,$0F,$80,$03 ; {item_mask: BRIBE
 $E00D DEFB $80,$00,$00,$00,$00,$00,$00,$00
 $E015 DEFB $C0,$00,$F0,$00,$FC,$00,$FF,$03
 $E01D DEFB $FF,$CF                         ; }
; #UDGARRAY2,7,4,2;$E01F-$E03E-1-16{0,0,64,48}(item-mask-uniform)
 $E01F DEFB $F8,$0F,$F0,$07,$E0,$03,$E0,$03 ; {item_mask: UNIFORM
 $E027 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $E02F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E037 DEFB $00,$00,$00,$03,$C0,$0F,$F0,$3F ; }
; #UDGARRAY2,7,4,2;$E03F-$E05E-1-16{0,0,64,64}(item-mask-parcel)
 $E03F DEFB $FC,$FF,$F0,$3F,$C0,$0F,$00,$03 ; {item_mask: PARCEL
 $E047 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E04F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E057 DEFB $00,$00,$00,$00,$C0,$03,$F0,$0F ; }
; #UDGARRAY2,7,4,2;$E05F-$E07E-1-16{0,0,64,64}(item-mask-poison)
 $E05F DEFB $FF,$7F,$FE,$3F,$FE,$3F,$FC,$1F ; {item_mask: POISON
 $E067 DEFB $FC,$1F,$FE,$3F,$FC,$1F,$F8,$0F
 $E06F DEFB $F0,$07,$F0,$07,$F0,$07,$F0,$07
 $E077 DEFB $F0,$07,$F0,$07,$F0,$07,$F8,$0F ; }
; #UDGARRAY2,7,4,2;$E07F-$E096-1-16{0,0,64,48}(item-mask-torch)
 $E07F DEFB $FF,$F7,$FF,$C3,$FD,$01,$F0,$01 ; {item_mask: TORCH
 $E087 DEFB $E0,$03,$C0,$0F,$C0,$1F,$C0,$3F
 $E08F DEFB $C0,$3F,$C0,$7F,$E1,$FF,$F3,$FF ; }
; #UDGARRAY2,7,4,2;$E097-$E0B6-1-16{0,0,64,64}(item-mask-radio)
 $E097 DEFB $FF,$C7,$C7,$C7,$01,$C7,$00,$47 ; {item_mask: RADIO
 $E09F DEFB $00,$07,$00,$07,$00,$01,$00,$00
 $E0A7 DEFB $00,$01,$00,$00,$00,$00,$00,$00
 $E0AF DEFB $C0,$00,$F0,$00,$FC,$00,$FF,$01 ; }
; #UDGARRAY2,7,4,2;$E0B7-$E0D6-1-16{0,0,64,64}(item-mask-food)
 $E0B7 DEFB $FF,$87,$FF,$CF,$FF,$87,$F1,$87 ; {item_mask: FOOD
 $E0BF DEFB $E0,$03,$C0,$03,$E0,$03,$C0,$03
 $E0C7 DEFB $C0,$03,$C0,$03,$C0,$07,$C0,$03
 $E0CF DEFB $E0,$07,$F0,$03,$F8,$03,$FE,$07 ; }

; unused_E0D7
;
; Unreferenced byte.
s$E0D7 DEFS 9

; masked_sprite_plotter_16_enables
;
; (<- setup_item_plotting, setup_sprite_plotting)
w$E0E0 DEFW $E319    ; masked_sprite_plotter_16_wide_case_1:jump0
 $E0E2 DEFW $E3C5    ; masked_sprite_plotter_16_wide_case_2:jump1
 $E0E4 DEFW $E32A    ; masked_sprite_plotter_16_wide_case_1:jump2
 $E0E6 DEFW $E3D6    ; masked_sprite_plotter_16_wide_case_2:jump3
 $E0E8 DEFW $E340    ; masked_sprite_plotter_16_wide_case_1:jump4
 $E0EA DEFW $E3EC    ; masked_sprite_plotter_16_wide_case_2:jump5

; masked_sprite_plotter_24_enables
;
; (<- setup_sprite_plotting)
w$E0EC DEFW $E188    ; masked_sprite_plotter_24_wide:E188
 $E0EE DEFW $E259    ; masked_sprite_plotter_24_wide:E259
 $E0F0 DEFW $E199    ; masked_sprite_plotter_24_wide:E199
 $E0F2 DEFW $E26A    ; masked_sprite_plotter_24_wide:E26A
 $E0F4 DEFW $E1AA    ; masked_sprite_plotter_24_wide:E1AA
 $E0F6 DEFW $E27B    ; masked_sprite_plotter_24_wide:E27B
 $E0F8 DEFW $E1BF    ; masked_sprite_plotter_24_wide:E1BF
 $E0FA DEFW $E290    ; masked_sprite_plotter_24_wide:E290
 $E0FC DEFW $E2A2    ; masked_sprite_plotter_16_wide_case_1
 $E0FE DEFW $E102    ; masked_sprite_plotter_24_wide

; unused_E100
;
; Unsure if related to the above masked_sprite_plotter_24_enables table.
u$E100 DEFB $06,$08

; masked_sprite_plotter_24_wide
;
; Used by the routine at #R$B866.
; .
; Sprite plotter. Used for characters and objects.
;
; I:IY Unsure. Have seen IY = 0x8020 => 0x8038, IY = 0x8040, IY = 0x80A0.
c$E102 LD A,(IY+$18) ; {if ((A = IY[24] & 7) >= 4) goto unaligned;
 $E105 AND $07       ;
 $E107 CP $04        ;
 $E109 JP NC,$E1CE   ; }
 $E10C CPL           ; {A = (~A & 3) * 8; // jump table offset
 $E10D AND $03       ;
 $E10F ADD A,A       ;
 $E110 ADD A,A       ;
 $E111 ADD A,A       ; }
 $E112 LD ($E161),A  ; ($E161) = A; // self-modify // set branch target of
                     ; second jump
 $E115 LD ($E143),A  ; ($E143) = A; // self-modify // set branch target of
                     ; first jump
 $E118 EXX           ; {maskptr = mask_pointer; // mask pointer
 $E119 LD HL,($81AE) ; }
 $E11C EXX           ; {bitmapptr = bitmap_pointer; // bitmap pointer
 $E11D LD HL,($81AC) ; }
 $E120 LD B,$20      ; iters = 32; // iterations // height? // self modified
*$E122 PUSH BC       ; {do <% bm0 = *bitmapptr++; // bitmap bytes
 $E123 LD B,(HL)     ;
 $E124 INC HL        ; }
 $E125 LD C,(HL)     ; {  bm1 = *bitmapptr++;
 $E126 INC HL        ; }
 $E127 LD E,(HL)     ; {  bm2 = *bitmapptr++;
 $E128 INC HL        ;
 $E129 PUSH HL       ;
 $E12A EXX           ; }
 $E12B LD B,(HL)     ; {  mask0 = *maskptr++; // mask bytes
 $E12C INC HL        ; }
 $E12D LD C,(HL)     ; {  mask1 = *maskptr++;
 $E12E INC HL        ; }
 $E12F LD E,(HL)     ; {  mask2 = *maskptr++;
 $E130 INC HL        ;
 $E131 PUSH HL       ; }
 $E132 LD A,($81B7)  ; {  if (flip_sprite & (1<<7)) flip_24_masked_pixels();
 $E135 AND A         ;
 $E136 CALL M,$E3FA  ; }
 $E139 LD HL,($81B0) ; {  foremaskptr = foreground_mask_pointer;
 $E13C EXX           ; }
 $E13D LD HL,($81A2) ;   screenptr = ($81A2); // screen ptr // moved compared
                     ; to the other routines
; Shift bitmap.
 $E140 LD D,$00      ;   bm3 = 0;
 $E142 JR $E144      ;   goto $E144; // self-modified // jump table
*$E144 SRL B         ;   SRL bm0 // 0 // carry = bm0 & 1; bm0 >>= 1;
 $E146 RR C          ;   RR bm1       // new_carry = bm1 & 1; bm1 = (bm1 >> 1)
                     ; | (carry << 7); carry = new_carry;
 $E148 RR E          ;   RR bm2       // new_carry = bm2 & 1; bm2 = (bm2 >> 1)
                     ; | (carry << 7); carry = new_carry;
 $E14A RR D          ;   RR bm3       // new_carry = bm3 & 1; bm3 = (bm3 >> 1)
                     ; | (carry << 7); carry = new_carry;
 $E14C SRL B         ;   SRL bm0 // 1
 $E14E RR C          ;   RR bm1
 $E150 RR E          ;   RR bm2
 $E152 RR D          ;   RR bm3
 $E154 SRL B         ;   SRL bm0 // 2
 $E156 RR C          ;   RR bm1
 $E158 RR E          ;   RR bm2
 $E15A RR D          ; {  RR bm3
 $E15C EXX           ; }
; Shift mask.
 $E15D LD D,$FF      ;   mask3 = 0xFF;
 $E15F SCF           ;   carry = 1;
 $E160 JR $E162      ;   goto $E162; // self-modified // jump table
*$E162 RR B          ;   RR mask0 // 0 // new_carry = mask0 & 1; mask0 = (mask0
                     ; >> 1) | (carry << 7); carry = new_carry;
 $E164 RR C          ;   RR mask1      // new_carry = mask1 & 1; mask1 = (mask1
                     ; >> 1) | (carry << 7); carry = new_carry;
 $E166 RR E          ;   RR mask2      // new_carry = mask2 & 1; mask2 = (mask2
                     ; >> 1) | (carry << 7); carry = new_carry;
 $E168 RR D          ;   RR mask3      // new_carry = mask3 & 1; mask3 = (mask3
                     ; >> 1) | (carry << 7); carry = new_carry;
 $E16A RR B          ;   RR mask0 // 1
 $E16C RR C          ;   RR mask1
 $E16E RR E          ;   RR mask2
 $E170 RR D          ;   RR mask3
 $E172 RR B          ;   RR mask0 // 2
 $E174 RR C          ;   RR mask1
 $E176 RR E          ;   RR mask2
 $E178 RR D          ;   RR mask3
;   Plot, using foreground mask.
 $E17A LD A,(HL)     ; {  A = ((~*foremaskptr | mask0) & *screenptr) | (bm0 &
 $E17B CPL           ; *foremaskptr);
 $E17C OR B          ;
 $E17D EXX           ;
 $E17E AND (HL)      ;
 $E17F EX AF,AF'     ;
 $E180 LD A,B        ;
 $E181 EXX           ;
 $E182 AND (HL)      ;
 $E183 LD B,A        ;
 $E184 EX AF,AF'     ;
 $E185 OR B          ; }
 $E186 INC L         ; {  foremaskptr++;
 $E187 EXX           ; }
 $E188 LD (HL),A     ; {  *screenptr++ = A;          // jump target 0
 $E189 INC HL        ;
 $E18A EXX           ; }
 $E18B LD A,(HL)     ; {  A = ((~*foremaskptr | mask1) & *screenptr) | (bm1 &
 $E18C CPL           ; *foremaskptr);
 $E18D OR C          ;
 $E18E EXX           ;
 $E18F AND (HL)      ;
 $E190 EX AF,AF'     ;
 $E191 LD A,C        ;
 $E192 EXX           ;
 $E193 AND (HL)      ;
 $E194 LD C,A        ;
 $E195 EX AF,AF'     ;
 $E196 OR C          ; }
 $E197 INC L         ; {  foremaskptr++;
 $E198 EXX           ; }
 $E199 LD (HL),A     ; {  *screenptr++ = A;          // jump target 2
 $E19A INC HL        ;
 $E19B EXX           ; }
 $E19C LD A,(HL)     ; {  A = ((~*foremaskptr | mask2) & *screenptr) | (bm2 &
 $E19D CPL           ; *foremaskptr);
 $E19E OR E          ;
 $E19F EXX           ;
 $E1A0 AND (HL)      ;
 $E1A1 EX AF,AF'     ;
 $E1A2 LD A,E        ;
 $E1A3 EXX           ;
 $E1A4 AND (HL)      ;
 $E1A5 LD E,A        ;
 $E1A6 EX AF,AF'     ;
 $E1A7 OR E          ; }
 $E1A8 INC L         ; {  foremaskptr++;
 $E1A9 EXX           ; }
 $E1AA LD (HL),A     ; {  *screenptr++ = A;          // jump target 4
 $E1AB INC HL        ;
 $E1AC EXX           ; }
 $E1AD LD A,(HL)     ; {  A = ((~*foremaskptr | mask3) & *screenptr) | (bm3 &
 $E1AE CPL           ; *foremaskptr);
 $E1AF OR D          ;
 $E1B0 EXX           ;
 $E1B1 AND (HL)      ;
 $E1B2 EX AF,AF'     ;
 $E1B3 LD A,D        ;
 $E1B4 EXX           ;
 $E1B5 AND (HL)      ;
 $E1B6 LD D,A        ;
 $E1B7 EX AF,AF'     ;
 $E1B8 OR D          ; }
 $E1B9 INC L         ;   foremaskptr++;
 $E1BA LD ($81B0),HL ;   foreground_mask_pointer = foremaskptr;
 $E1BD POP HL        ; {  *screenptr = A;            // jump target 6
 $E1BE EXX           ;
 $E1BF LD (HL),A     ; }
 $E1C0 LD BC,$0015   ; {  screenptr += 21; // stride (24 - 3)
 $E1C3 ADD HL,BC     ; }
 $E1C4 LD ($81A2),HL ; {  ($81A2) = screenptr;
 $E1C7 POP HL        ; }
 $E1C8 POP BC        ; {%> while (--iters);
 $E1C9 DEC B         ;
 $E1CA JP NZ,$E122   ; }
 $E1CD RET           ; return;
*$E1CE SUB $04       ; unaligned: A -= 4;
 $E1D0 RLCA          ; RLCA
 $E1D1 RLCA          ; RLCA
 $E1D2 RLCA          ; RLCA
 $E1D3 LD ($E22A),A  ; ($E22A) = A; // self-modify: set branch target - second
                     ; jump
 $E1D6 LD ($E204),A  ; ($E204) = A; // self-modify: set branch target - first
                     ; jump
 $E1D9 EXX           ; {HLdash = mask_pointer;
 $E1DA LD HL,($81AE) ; }
 $E1DD EXX           ; {HL = bitmap_pointer;
 $E1DE LD HL,($81AC) ; }
 $E1E1 LD B,$20      ; B = 32;
*$E1E3 PUSH BC       ; do <% PUSH BC
 $E1E4 LD B,(HL)     ; {  B = *HL++;
 $E1E5 INC HL        ; }
 $E1E6 LD C,(HL)     ; {  C = *HL++;
 $E1E7 INC HL        ; }
 $E1E8 LD E,(HL)     ; {  E = *HL++;
 $E1E9 INC HL        ; }
 $E1EA PUSH HL       ;   PUSH HL
 $E1EB EXX           ;   EXX
 $E1EC LD B,(HL)     ; {  B = *HL++;
 $E1ED INC HL        ; }
 $E1EE LD C,(HL)     ; {  C = *HL++;
 $E1EF INC HL        ; }
 $E1F0 LD E,(HL)     ; {  E = *HL++;
 $E1F1 INC HL        ; }
 $E1F2 PUSH HL       ;   PUSH HL
 $E1F3 LD A,($81B7)  ; {  if (flip_sprite & (1<<7)) flip_24_masked_pixels();
 $E1F6 AND A         ;
 $E1F7 CALL M,$E3FA  ; }
 $E1FA LD HL,($81B0) ;   HL = foreground_mask_pointer;
 $E1FD EXX           ;   EXX
 $E1FE LD HL,($81A2) ;   HL = ($81A2);
 $E201 LD D,$00      ;   D = 0;
 $E203 JR $E205      ;   goto $E205; // self-modified to jump into ...;
*$E205 SLA E         ;   SLA E
 $E207 RL C          ;   RL C
 $E209 RL B          ;   RL B
 $E20B RL D          ;   RL D
 $E20D SLA E         ;   SLA E
 $E20F RL C          ;   RL C
 $E211 RL B          ;   RL B
 $E213 RL D          ;   RL D
 $E215 SLA E         ;   SLA E
 $E217 RL C          ;   RL C
 $E219 RL B          ;   RL B
 $E21B RL D          ;   RL D
 $E21D SLA E         ;   SLA E
 $E21F RL C          ;   RL C
 $E221 RL B          ;   RL B
 $E223 RL D          ;   RL D
 $E225 EXX           ;   EXX
 $E226 LD D,$FF      ;   D = 255;
 $E228 SCF           ;   SCF
 $E229 JR $E22B      ;   goto $E22B; // self-modified to jump into ...;
*$E22B RL E          ;   RL E
 $E22D RL C          ;   RL C
 $E22F RL B          ;   RL B
 $E231 RL D          ;   RL D
 $E233 RL E          ;   RL E
 $E235 RL C          ;   RL C
 $E237 RL B          ;   RL B
 $E239 RL D          ;   RL D
 $E23B RL E          ;   RL E
 $E23D RL C          ;   RL C
 $E23F RL B          ;   RL B
 $E241 RL D          ;   RL D
 $E243 RL E          ;   RL E
 $E245 RL C          ;   RL C
 $E247 RL B          ;   RL B
 $E249 RL D          ;   RL D
 $E24B LD A,(HL)     ; {  A = ~*HL | D;       // 1
 $E24C CPL           ;
 $E24D OR D          ; }
 $E24E EXX           ;   EXX
 $E24F AND (HL)      ;   A &= *HL;
 $E250 EX AF,AF'     ;   EX AF,AF'
 $E251 LD A,D        ;   A = D;
 $E252 EXX           ;   EXX
 $E253 AND (HL)      ;   A &= *HL;
 $E254 LD D,A        ;   D = A;
 $E255 EX AF,AF'     ;   EX AF,AF'
 $E256 OR D          ;   A |= D;
 $E257 INC L         ;   L++;
 $E258 EXX           ;   EXX
 $E259 LD (HL),A     ; {  *HL++ = A;          // jump target 1
 $E25A INC HL        ; }
 $E25B EXX           ;   EXX
 $E25C LD A,(HL)     ; {  A = ~*HL | B;       // 2
 $E25D CPL           ;
 $E25E OR B          ; }
 $E25F EXX           ;   EXX
 $E260 AND (HL)      ;   A &= *HL;
 $E261 EX AF,AF'     ;   EX AF,AF'
 $E262 LD A,B        ;   A = B;
 $E263 EXX           ;   EXX
 $E264 AND (HL)      ;   A &= *HL;
 $E265 LD B,A        ;   B = A;
 $E266 EX AF,AF'     ;   EX AF,AF'
 $E267 OR B          ;   A |= B;
 $E268 INC L         ;   L++;
 $E269 EXX           ;   EXX
 $E26A LD (HL),A     ; {  *HL++ = A;          // jump target 3
 $E26B INC HL        ; }
 $E26C EXX           ;   EXX
 $E26D LD A,(HL)     ; {  A = ~*HL | C;       // 3
 $E26E CPL           ;
 $E26F OR C          ; }
 $E270 EXX           ;   EXX
 $E271 AND (HL)      ;   A &= *HL;
 $E272 EX AF,AF'     ;   EX AF,AF'
 $E273 LD A,C        ;   A = C;
 $E274 EXX           ;   EXX
 $E275 AND (HL)      ;   A &= *HL;
 $E276 LD C,A        ;   C = A;
 $E277 EX AF,AF'     ;   EX AF,AF'
 $E278 OR C          ;   A |= C;
 $E279 INC L         ;   L++;
 $E27A EXX           ;   EXX
 $E27B LD (HL),A     ; {  *HL++ = A;          // jump target 5
 $E27C INC HL        ; }
 $E27D EXX           ;   EXX
 $E27E LD A,(HL)     ; {  A = ~*HL | E;       // 4
 $E27F CPL           ;
 $E280 OR E          ; }
 $E281 EXX           ;   EXX
 $E282 AND (HL)      ;   A &= *HL;
 $E283 EX AF,AF'     ;   EX AF,AF'
 $E284 LD A,E        ;   A = E;
 $E285 EXX           ;   EXX
 $E286 AND (HL)      ;   A &= *HL;
 $E287 LD E,A        ;   E = A;
 $E288 EX AF,AF'     ;   EX AF,AF'
 $E289 OR E          ;   A |= E;
 $E28A INC L         ;   L++;
 $E28B LD ($81B0),HL ;   foreground_mask_pointer = HL;
 $E28E POP HL        ;   POP HL
 $E28F EXX           ;   EXX
 $E290 LD (HL),A     ;   *HL = A;            // jump target 7
 $E291 LD BC,$0015   ; {  HL += 21;
 $E294 ADD HL,BC     ; }
 $E295 LD ($81A2),HL ;   ($81A2) = HL;
 $E298 POP HL        ;   POP HL
 $E299 POP BC        ;   POP BC
 $E29A DEC B         ; {%> while (--B);
 $E29B JP NZ,$E1E3   ; }
 $E29E RET           ; return;

; masked_sprite_plotter_16_wide_case_1_searchlight
;
; Used by the routine at #R$B866.
; .
; Direct entry point used by searchlight code.
c$E29F XOR A         ; A = 0;
 $E2A0 JR $E2AC      ; goto $E2AC;

; masked_sprite_plotter_16_wide_case_1
;
; Used by the routine at #R$B866.
; .
; Sprite plotter. Used for characters and objects.
; .
; Looks like it plots a two byte-wide sprite with mask into a three byte-wide
; destination.
c$E2A2 LD A,(IY+$18) ; {if ((A = IY[24] & 7) >= 4) goto
 $E2A5 AND $07       ; masked_sprite_plotter_16_wide_case_2;
 $E2A7 CP $04        ;
 $E2A9 JP NC,$E34E   ; }
; This entry point is used by the routine at #R$E29F.
*$E2AC CPL           ; {A = (~A & 3) * 6; // jump table offset
 $E2AD AND $03       ;
 $E2AF ADD A,A       ;
 $E2B0 LD H,A        ;
 $E2B1 ADD A,A       ;
 $E2B2 ADD A,H       ; }
 $E2B3 LD ($E2DC),A  ; ($E2DC) = A; // self-modify - first jump
 $E2B6 LD ($E2F4),A  ; ($E2F4) = A; // self-modify - second jump
 $E2B9 EXX           ; {maskptr = mask_pointer; // maskptr = HL'  // observed:
 $E2BA LD HL,($81AE) ; $D505 (a mask)
 $E2BD EXX           ; }
 $E2BE LD HL,($81AC) ; bitmapptr = bitmap_pointer; // bitmapptr = HL  //
                     ; observed: $D256 (a bitmap)
 $E2C1 LD B,$20      ; B = 32; // iterations // height? // self modified
*$E2C3 LD D,(HL)     ; {do <% bm0 = *bitmapptr++; // D
 $E2C4 INC HL        ; }
 $E2C5 LD E,(HL)     ; {  bm1 = *bitmapptr++; // E
 $E2C6 INC HL        ; }
 $E2C7 PUSH HL       ; {  mask0 = *maskptr++; // D'
 $E2C8 EXX           ;
 $E2C9 LD D,(HL)     ;
 $E2CA INC HL        ; }
 $E2CB LD E,(HL)     ; {  mask1 = *maskptr++; // E'
 $E2CC INC HL        ;
 $E2CD PUSH HL       ; }
 $E2CE LD A,($81B7)  ; {  if (flip_sprite & (1<<7)) flip_16_masked_pixels();
 $E2D1 AND A         ;
 $E2D2 CALL M,$E40F  ; }
 $E2D5 LD HL,($81B0) ;   foremaskptr = foreground_mask_pointer;  // observed:
                     ; $8100 (mask buffer)
; Shift mask.
 $E2D8 LD C,$FF      ;   mask2 = 0xFF; // all bits set => mask OFF (that would
                     ; match the observed stored mask format)
 $E2DA SCF           ;   carry = 1; // mask OFF
 $E2DB JR $E2DD      ;   goto $E2DD; // self modified // jump table
*$E2DD RR D          ;   RR mask0 // 0 // new_carry = mask0 & 1; mask0 = (mask0
                     ; >> 1) | (carry << 7); carry = new_carry;
 $E2DF RR E          ;   RR mask1      // new_carry = mask1 & 1; mask1 = (mask1
                     ; >> 1) | (carry << 7); carry = new_carry;
 $E2E1 RR C          ;   RR mask2      // new_carry = mask2 & 1; mask2 = (mask2
                     ; >> 1) | (carry << 7); carry = new_carry;
 $E2E3 RR D          ;   RR mask0 // 1
 $E2E5 RR E          ;   RR mask1
 $E2E7 RR C          ;   RR mask2
 $E2E9 RR D          ;   RR mask0 // 2
 $E2EB RR E          ;   RR mask1
 $E2ED RR C          ;   RR mask2
; Shift bitmap.
 $E2EF EXX           ; {  bm2 = 0; // all bits clear => pixels OFF
 $E2F0 LD C,$00      ; }
 $E2F2 AND A         ;   A &= A; // I do not grok this. Setting carry flag?
 $E2F3 JR $E2F5      ;   goto $E2F5; // self modified // jump table
*$E2F5 SRL D         ;   SRL bm0 // 0 // carry = bm0 & 1; bm0 >>= 1;
 $E2F7 RR E          ;   RR bm1       // new_carry = bm1 & 1; bm1 = (bm1 >> 1)
                     ; | (carry << 7); carry = new_carry;
 $E2F9 RR C          ;   RR bm2       // new_carry = bm2 & 1; bm2 = (bm2 >> 1)
                     ; | (carry << 7); carry = new_carry;
 $E2FB SRL D         ;   SRL bm0 // 1
 $E2FD RR E          ;   RR bm1
 $E2FF RR C          ;   RR bm2
 $E301 SRL D         ;   SRL bm0 // 2
 $E303 RR E          ;   RR bm1
 $E305 RR C          ;   RR bm2
; Plot, using foreground mask.
 $E307 LD HL,($81A2) ;   screenptr = ($81A2);
 $E30A EXX           ; {  A = ((~*foremaskptr | mask0) & *screenptr) | (bm0 &
 $E30B LD A,(HL)     ; *foremaskptr);
 $E30C CPL           ;
 $E30D OR D          ;
 $E30E EXX           ;
 $E30F AND (HL)      ;
 $E310 EX AF,AF'     ;
 $E311 LD A,D        ;
 $E312 EXX           ;
 $E313 AND (HL)      ;
 $E314 LD D,A        ;
 $E315 EX AF,AF'     ;
 $E316 OR D          ; }
 $E317 INC L         ; {  foremaskptr++;
 $E318 EXX           ; }
 $E319 LD (HL),A     ; {  *screenptr++ = A; // entry point jump0
 $E31A INC HL        ; }
 $E31B EXX           ; {  A = ((~*foremaskptr | mask1) & *screenptr) | (bm1 &
 $E31C LD A,(HL)     ; *foremaskptr);
 $E31D CPL           ;
 $E31E OR E          ;
 $E31F EXX           ;
 $E320 AND (HL)      ;
 $E321 EX AF,AF'     ;
 $E322 LD A,E        ;
 $E323 EXX           ;
 $E324 AND (HL)      ;
 $E325 LD E,A        ;
 $E326 EX AF,AF'     ;
 $E327 OR E          ; }
 $E328 INC L         ; {  foremaskptr++;
 $E329 EXX           ; }
 $E32A LD (HL),A     ; {  *screenptr++ = A; // entry point jump2
 $E32B INC HL        ; }
 $E32C EXX           ; {  A = ((~*foremaskptr | mask2) & *screenptr) | (bm2 &
 $E32D LD A,(HL)     ; *foremaskptr);
 $E32E CPL           ;
 $E32F OR C          ;
 $E330 EXX           ;
 $E331 AND (HL)      ;
 $E332 EX AF,AF'     ;
 $E333 LD A,C        ;
 $E334 EXX           ;
 $E335 AND (HL)      ;
 $E336 LD C,A        ;
 $E337 EX AF,AF'     ;
 $E338 OR C          ; }
 $E339 INC L         ; {  foremaskptr += 2;
 $E33A INC L         ; }
 $E33B LD ($81B0),HL ; {  foreground_mask_pointer = foremaskptr;
 $E33E POP HL        ;
 $E33F EXX           ; }
 $E340 LD (HL),A     ;   *screenptr = A; // entry point jump4
 $E341 LD DE,$0016   ; {  screenptr += 22; // stride (24 - 2)
 $E344 ADD HL,DE     ; }
 $E345 LD ($81A2),HL ;   ($81A2) = screenptr;
 $E348 POP HL        ; {%> while (--B);
 $E349 DEC B         ;
 $E34A JP NZ,$E2C3   ; }
 $E34D RET           ; return;

; masked_sprite_plotter_16_wide_case_2
;
; Used by the routine at #R$E2A2.
; .
; Sprite plotter. Used for characters and objects.
; .
; Similar variant to above routine.
c$E34E SUB $04       ; {A = (A - 4) * 6; // jump table offset
 $E350 ADD A,A       ;
 $E351 LD L,A        ;
 $E352 ADD A,A       ;
 $E353 ADD A,L       ; }
 $E354 LD ($E39A),A  ; ($E39A) = A; // self-modify - first jump
 $E357 LD ($E37D),A  ; ($E37D) = A; // self-modify - second jump
 $E35A EXX           ; {maskptr = mask_pointer;
 $E35B LD HL,($81AE) ; }
 $E35E EXX           ; {bitmapptr = bitmap_pointer;
 $E35F LD HL,($81AC) ; }
 $E362 LD B,$20      ; B = 32; // iterations // height? // self modified
*$E364 LD D,(HL)     ; {do <% bm1 = *bitmapptr++; // numbering of the masks ...
 $E365 INC HL        ; unsure}
 $E366 LD E,(HL)     ; {  bm2 = *bitmapptr++;
 $E367 INC HL        ; }
 $E368 PUSH HL       ; {  mask1 = *maskptr++;
 $E369 EXX           ;
 $E36A LD D,(HL)     ;
 $E36B INC HL        ; }
 $E36C LD E,(HL)     ; {  mask2 = *maskptr++;
 $E36D INC HL        ; }
 $E36E PUSH HL       ; {  if (flip_sprite & (1<<7)) flip_16_masked_pixels();
 $E36F LD A,($81B7)  ;
 $E372 AND A         ;
 $E373 CALL M,$E40F  ; }
 $E376 LD HL,($81B0) ;   foremaskptr = foreground_mask_pointer;
;   Shift mask.
 $E379 LD C,$FF      ;   mask0 = 0xFF; // all bits set => mask OFF (that would
                     ; match the observed stored mask format)
 $E37B SCF           ;   carry = 1; // mask OFF
 $E37C JR $E37E      ;   goto $E37E; // self modified // jump table
*$E37E RL E          ;   RL mask2 // 0 // new_carry = mask2 >> 7; mask2 =
                     ; (mask2 << 1) | (carry << 0); carry = new_carry;
 $E380 RL D          ;   RL mask1      // new_carry = mask1 >> 7; mask1 =
                     ; (mask1 << 1) | (carry << 0); carry = new_carry;
 $E382 RL C          ;   RL mask0      // new_carry = mask0 >> 7; mask0 =
                     ; (mask0 << 1) | (carry << 0); carry = new_carry;
 $E384 RL E          ;   RL mask2 // 1
 $E386 RL D          ;   RL mask1
 $E388 RL C          ;   RL mask0
 $E38A RL E          ;   RL mask2 // 2
 $E38C RL D          ;   RL mask1
 $E38E RL C          ;   RL mask0
 $E390 RL E          ;   RL mask2 // 3 // four groups of shifting in this
                     ; routine, compared to three above.
 $E392 RL D          ;   RL mask1
 $E394 RL C          ;   RL mask0
; Shift bitmap.
 $E396 EXX           ; {  bm0 = 0; // all bits clear => pixels OFF
 $E397 XOR A         ;
 $E398 LD C,A        ; }
 $E399 JR $E39B      ;   goto $E39B; // self modified // jump table
*$E39B SLA E         ;   SLA bm2 // 0 // carry = bm2 >> 7; bm2 <<= 1;
 $E39D RL D          ;   RL bm1       // new_carry = bm1 >> 7; bm1 = (bm1 << 1)
                     ; | (carry << 0); carry = new_carry;
 $E39F RL C          ;   RL bm0       // new_carry = bm0 >> 7; bm0 = (bm0 << 1)
                     ; | (carry << 0); carry = new_carry;
 $E3A1 SLA E         ;   SLA bm2
 $E3A3 RL D          ;   RL bm1
 $E3A5 RL C          ;   RL bm0
 $E3A7 SLA E         ;   SLA bm2
 $E3A9 RL D          ;   RL bm1
 $E3AB RL C          ;   RL bm0
 $E3AD SLA E         ;   SLA bm2
 $E3AF RL D          ;   RL bm1
 $E3B1 RL C          ;   RL bm0
; Plot, using foreground mask.
 $E3B3 LD HL,($81A2) ;   screenptr = ($81A2);
 $E3B6 EXX           ; {  A = ((~*foremaskptr | mask0) & *screenptr) | (bm0 &
 $E3B7 LD A,(HL)     ; *foremaskptr);
 $E3B8 CPL           ;
 $E3B9 OR C          ;
 $E3BA EXX           ;
 $E3BB AND (HL)      ;
 $E3BC EX AF,AF'     ;
 $E3BD LD A,C        ;
 $E3BE EXX           ;
 $E3BF AND (HL)      ;
 $E3C0 LD C,A        ;
 $E3C1 EX AF,AF'     ;
 $E3C2 OR C          ; }
 $E3C3 INC L         ; {  foremaskptr++;
 $E3C4 EXX           ; }
 $E3C5 LD (HL),A     ; {  *screenptr++ = A; // entry point jump1
 $E3C6 INC HL        ; }
 $E3C7 EXX           ; {  A = ((~*foremaskptr | mask1) & *screenptr) | (bm1 &
 $E3C8 LD A,(HL)     ; *foremaskptr);
 $E3C9 CPL           ;
 $E3CA OR D          ;
 $E3CB EXX           ;
 $E3CC AND (HL)      ;
 $E3CD EX AF,AF'     ;
 $E3CE LD A,D        ;
 $E3CF EXX           ;
 $E3D0 AND (HL)      ;
 $E3D1 LD D,A        ;
 $E3D2 EX AF,AF'     ;
 $E3D3 OR D          ; }
 $E3D4 INC L         ; {  foremaskptr++;
 $E3D5 EXX           ; }
 $E3D6 LD (HL),A     ; {  *screenptr++ = A; // entry point jump3
 $E3D7 INC HL        ; }
 $E3D8 EXX           ; {  A = ((~*foremaskptr | mask2) & *screenptr) | (bm2 &
 $E3D9 LD A,(HL)     ; *foremaskptr);
 $E3DA CPL           ;
 $E3DB OR E          ;
 $E3DC EXX           ;
 $E3DD AND (HL)      ;
 $E3DE EX AF,AF'     ;
 $E3DF LD A,E        ;
 $E3E0 EXX           ;
 $E3E1 AND (HL)      ;
 $E3E2 LD E,A        ;
 $E3E3 EX AF,AF'     ;
 $E3E4 OR E          ; }
 $E3E5 INC L         ; {  foremaskptr += 2;
 $E3E6 INC L         ; }
 $E3E7 LD ($81B0),HL ; {  foreground_mask_pointer = foremaskptr;
 $E3EA POP HL        ;
 $E3EB EXX           ; }
 $E3EC LD (HL),A     ;   *screenptr = A; // entry point jump5
 $E3ED LD DE,$0016   ; {  screenptr += 22; // stride (24 - 2)
 $E3F0 ADD HL,DE     ; }
 $E3F1 LD ($81A2),HL ;   ($81A2) = screenptr;
 $E3F4 POP HL        ; {%> while (--B);
 $E3F5 DEC B         ;
 $E3F6 JP NZ,$E364   ; }
 $E3F9 RET           ; return;

; flip_24_masked_pixels
;
; Used by the routine at #R$E102.
; .
; Takes the 24 pixels in E,C,B and reverses them bitwise.
; .
; Does the same for the mask pixels in E',C',B'.
; .
; Roll the bitmap.
;
; I:E  First 8 pixels.
; I:BC Second 16 pixels.
; O:E  Reversed pixels.
; O:BC Reversed pixels.
c$E3FA LD H,$7F      ; H = 0x7F;  // HL = 0x7F00 | (DE & 0x00FF); // 0x7F00 ->
                     ; table of bit reversed bytes
 $E3FC LD L,E        ; L = E;
 $E3FD LD E,B        ; E = B;     // DE = (DE & 0xFF00) | (BC >> 8);
 $E3FE LD B,(HL)     ; B = *HL;   // BC = (*HL << 8) | (BC & 0xFF);
 $E3FF LD L,E        ; L = E;     // HL = (HL & 0xFF00) | (DE & 0xFF);
 $E400 LD E,(HL)     ; E = *HL;   // DE = (DE & 0xFF00) | *HL;
 $E401 LD L,C        ; L = C;     // HL = (HL & 0xFF00) | (BC & 0xFF);
 $E402 LD C,(HL)     ; C = *HL;   // BC = (BC & 0xFF00) | *HL;
 $E403 EXX           ; -
; Roll the mask.
 $E404 LD H,$7F      ; Hdash = 0x7F;
 $E406 LD L,E        ; Ldash = Edash;
 $E407 LD E,B        ; Edash = Bdash;
 $E408 LD B,(HL)     ; Bdash = *HLdash;
 $E409 LD L,E        ; Ldash = Edash;
 $E40A LD E,(HL)     ; Edash = *HLdash;
 $E40B LD L,C        ; Ldash = Cdash;
 $E40C LD C,(HL)     ; Cdash = *HLdash;
 $E40D EXX           ; -
 $E40E RET           ; return;

; flip_16_masked_pixels
;
; Used by the routines at #R$E2A2 and #R$E34E.
; .
; Takes the 16 pixels in D,E and reverses them bitwise.
; .
; Does the same for the mask pixels in D',E'.
; .
; Roll the bitmap.
;
; I:DE 16 pixels to reverse.
; O:DE Reversed pixels.
c$E40F LD H,$7F      ; H = 0x7F;  // HL = 0x7F00 | (DE >> 8); // 0x7F00 ->
                     ; table of bit reversed bytes
 $E411 LD L,D        ; L = D;
 $E412 LD D,E        ; D = E;     // DE = (E << 8) | *HL;
 $E413 LD E,(HL)     ; E = *HL;
 $E414 LD L,D        ; L = D;     // HL = (HL & 0xFF00) | (DE >> 8);
 $E415 LD D,(HL)     ; D = *HL;   // DE = (*HL << 8) | (DE & 0x00FF);
 $E416 EXX           ; -
; Roll the mask.
 $E417 LD H,$7F      ; Hdash = 0x7F;
 $E419 LD L,D        ; Ldash = Ddash;
 $E41A LD D,E        ; Ddash = Edash;
 $E41B LD E,(HL)     ; Edash = *HLdash;
 $E41C LD L,D        ; Ldash = Ddash;
 $E41D LD D,(HL)     ; Ddash = *HLdash;
 $E41E EXX           ; -
 $E41F RET           ; return;

; setup_sprite_plotting
;
; Used by the routine at #R$B866.
; .
; Sets sprites up for plotting.
;
; I:HL Pointer to ? // observed: always the same as IY
; I:IY Pointer to ? // observed: $8000+
c$E420 LD A,$0F      ; {HL += 15;
 $E422 ADD A,L       ;
 $E423 LD L,A        ; }
 $E424 LD DE,$81B2   ; DE = &byte_81B2;
 $E427 LD A,($68A0)  ; {if (room_index) <% // indoors
 $E42A AND A         ;
 $E42B JR Z,$E438    ; }
 $E42D LDI           ;   *DE++ = *HL++;
 $E42F INC L         ;   HL++;
 $E430 LDI           ;   *DE++ = *HL++;
 $E432 INC L         ;   HL++;
 $E433 LDI           ;   *DE++ = *HL++;
 $E435 INC L         ;   HL++; %>
 $E436 JR $E44E      ; else <% // outdoors
*$E438 LD A,(HL)     ; {  A = *HL++;
 $E439 INC L         ; }
 $E43A LD C,(HL)     ;   C = *HL;
 $E43B CALL $E550    ;   divide_by_8_with_rounding(C,A);
 $E43E LD (DE),A     ;   *DE++ = A;
 $E43F INC L         ; {  HL++;
 $E440 INC DE        ; }
 $E441 LD B,$02      ;   B = 2; // 2 iterations
*$E443 LD A,(HL)     ; {  do <% A = *HL++;
 $E444 INC L         ; }
 $E445 LD C,(HL)     ;     C = *HL;
 $E446 CALL $E555    ;     divide_by_8(C,A);
 $E449 LD (DE),A     ;     *DE++ = A;
 $E44A INC L         ; {    HL++;
 $E44B INC DE        ; }
 $E44C DJNZ $E443    ;   %> while (--B); %>
*$E44E LD C,(HL)     ; {C = *HL++;
 $E44F INC L         ; }
 $E450 LD B,(HL)     ; B = *HL++;
 $E451 PUSH BC       ; {PUSH BC
 $E452 INC L         ; }
 $E453 LD A,(HL)     ; {flip_sprite = *HL++;  // set left/right flip flag
 $E454 LD ($81B7),A  ; }
 $E457 EX AF,AF'     ; {-
 $E458 INC L         ; }
 $E459 LD B,$02      ; B = 2; // 2 iterations
*$E45B LD A,(HL)     ; {do <% Adash = *HL++;
 $E45C INC L         ; }
 $E45D LD C,(HL)     ;   C = *HL++;
 $E45E CALL $E555    ;   divide_by_8(C,Adash);
 $E461 LD (DE),A     ; {  *DE++ = Adash;
 $E462 INC L         ;
 $E463 INC DE        ; }
 $E464 DJNZ $E45B    ; %> while (--B);
 $E466 EX AF,AF'     ; -
 $E467 POP DE        ; POP DE
 $E468 ADD A,A       ; {DE += A * 6;
 $E469 LD C,A        ;
 $E46A ADD A,A       ;
 $E46B ADD A,C       ;
 $E46C ADD A,E       ;
 $E46D LD E,A        ;
 $E46E JR NC,$E471   ;
 $E470 INC D         ; }
*$E471 INC L         ; {L += 2;
 $E472 INC L         ; }
 $E473 EX DE,HL      ; EX DE,HL
 $E474 LDI           ; *DE++ = *HL++; // width in bytes
 $E476 LDI           ; *DE++ = *HL++; // height in rows
 $E478 LD DE,$81AC   ; {memcpy(bitmap_pointer, HL, 4); // copy bitmap pointer
 $E47B LD BC,$0004   ; and mask pointer
 $E47E LDIR          ; }
 $E480 CALL $BAF7    ; vischar_visible();
 $E483 AND A         ; {if (A) return;
 $E484 RET NZ        ; }
 $E485 PUSH BC       ; PUSH BC
 $E486 PUSH DE       ; PUSH DE
 $E487 LD A,(IY+$1E) ; A = IY[30];
 $E48A CP $03        ; {if (A == 3) <% // 3 => 16 wide (4 => 24 wide)
 $E48C JR NZ,$E49C   ; }
 $E48E LD A,E        ; {  ($E2C2) = E; // self-modify
 $E48F LD ($E2C2),A  ; }
 $E492 LD ($E363),A  ;   ($E363) = E; // self-modify
 $E495 LD A,$03      ;   A = 3;
 $E497 LD HL,$E0E0   ;   HL = masked_sprite_plotter_16_enables; %>
 $E49A JR $E4A8      ; else <%
*$E49C LD A,E        ;   -
 $E49D LD ($E121),A  ;   ($E121) = E; // self-modify
 $E4A0 LD ($E1E2),A  ;   ($E1E2) = E; // self-modify
 $E4A3 LD A,$04      ;   A = 4;
 $E4A5 LD HL,$E0EC   ;   HL = masked_sprite_plotter_24_enables; %>
*$E4A8 PUSH HL       ; PUSH HL
 $E4A9 LD ($E4C0),A  ; ($E4C0) = A; // self-modify
 $E4AC LD E,A        ; E = A;
 $E4AD LD A,B        ; A = B;
 $E4AE AND A         ; {if (A == 0) <%
 $E4AF JR NZ,$E4B7   ; }
 $E4B1 LD A,$77      ;   A = 0x77;
 $E4B3 EX AF,AF'     ;   -
 $E4B4 LD A,C        ;   Adash = C; %>
 $E4B5 JR $E4BB      ; else <%
*$E4B7 XOR A         ;   A = 0;
 $E4B8 EX AF,AF'     ;   -
 $E4B9 LD A,E        ; {  Adash = E - C; %>
 $E4BA SUB C         ; }
*$E4BB EXX           ; -
 $E4BC POP HL        ; POP HLdash
 $E4BD LD C,A        ; Cdash = Adash;
 $E4BE EX AF,AF'     ; -
 $E4BF LD B,$03      ; Bdash = 3; // 3 iterations // self modified by $E4A9
*$E4C1 LD E,(HL)     ; {do <% Edash = *HLdash++;
 $E4C2 INC HL        ; }
 $E4C3 LD D,(HL)     ;   Ddash = *HLdash++;
 $E4C4 LD (DE),A     ; {  *DEdash = A;
 $E4C5 INC HL        ; }
 $E4C6 LD E,(HL)     ; {  Edash = *HLdash++;
 $E4C7 INC HL        ; }
 $E4C8 LD D,(HL)     ; {  Ddash = *HLdash++;
 $E4C9 INC HL        ; }
 $E4CA LD (DE),A     ;   *DEdash = A;
 $E4CB DEC C         ;   Cdash--;
 $E4CC JR NZ,$E4D0   ; {  if (Z) A ^= 0x77;
 $E4CE XOR $77       ; }
*$E4D0 DJNZ $E4C1    ; %> while (--Bdash);
 $E4D2 EXX           ; -
 $E4D3 LD A,D        ; A = D;
 $E4D4 AND A         ; A &= A;
 $E4D5 LD DE,$0000   ; DE = 0;
 $E4D8 JR NZ,$E4F5   ; if (Z) <%
 $E4DA LD A,($81BC)  ; {  HL = $81BC * 8; // &map_position + 1;
 $E4DD LD L,A        ;
 $E4DE LD H,$00      ;
 $E4E0 ADD HL,HL     ;
 $E4E1 ADD HL,HL     ;
 $E4E2 ADD HL,HL     ; }
 $E4E3 EX DE,HL      ;   EX DE,HL
 $E4E4 LD L,(IY+$1A) ;   L = IY[26];
 $E4E7 LD H,(IY+$1B) ;   H = IY[27];
 $E4EA AND A         ;   A &= A;
 $E4EB SBC HL,DE     ;   SBC HL,DE
 $E4ED ADD HL,HL     ; {  HL *= 24;
 $E4EE ADD HL,HL     ;
 $E4EF ADD HL,HL     ;
 $E4F0 LD E,L        ;
 $E4F1 LD D,H        ;
 $E4F2 ADD HL,HL     ;
 $E4F3 ADD HL,DE     ; }
 $E4F4 EX DE,HL      ;   EX DE,HL %>
*$E4F5 LD A,($81B5)  ; {HL = map_position_related_1 - (map_position & 0xFF); //
 $E4F8 LD HL,$81BB   ; ie. low byte of map_position
 $E4FB SUB (HL)      ;
 $E4FC LD L,A        ;
 $E4FD LD H,$00      ; }
 $E4FF JR NC,$E503   ; {if (HL < 0) H = 0xFF;
 $E501 LD H,$FF      ; }
*$E503 ADD HL,DE     ; {HL += DE + 0xF290; // screen buffer start address
 $E504 LD DE,$F290   ;
 $E507 ADD HL,DE     ; }
 $E508 LD ($81A2),HL ; ($81A2) = HL;
 $E50B LD HL,$8100   ; HL = 0x8100;
 $E50E POP DE        ; POP DE
 $E50F PUSH DE       ; PUSH DE
 $E510 LD A,D        ; {L += D * 4 + (IY[26] & 7) * 4;
 $E511 ADD A,A       ;
 $E512 ADD A,A       ;
 $E513 ADD A,L       ;
 $E514 LD L,A        ;
 $E515 LD A,(IY+$1A) ;
 $E518 AND $07       ;
 $E51A ADD A,A       ;
 $E51B ADD A,A       ;
 $E51C ADD A,L       ;
 $E51D LD L,A        ; }
 $E51E LD ($81B0),HL ; foreground_mask_pointer = HL;
 $E521 POP DE        ; POP DE
 $E522 LD A,D        ; A = D;
 $E523 AND A         ; {if (A) <%
 $E524 JR Z,$E531    ; }
 $E526 LD D,A        ;   D = A;
 $E527 XOR A         ;   A = 0;
 $E528 LD E,(IY+$1E) ; {  E = IY[30] - 1;
 $E52B DEC E         ; }
*$E52C ADD A,E       ; {  do <% A += E; %> while (--D); %>
 $E52D DEC D         ;
 $E52E JP NZ,$E52C   ; }
*$E531 LD E,A        ; E = A;
 $E532 LD HL,($81AC) ; {bitmap_pointer += DE;
 $E535 ADD HL,DE     ;
 $E536 LD ($81AC),HL ; }
 $E539 LD HL,($81AE) ; {mask_pointer += DE;
 $E53C ADD HL,DE     ;
 $E53D LD ($81AE),HL ; }
 $E540 POP BC        ; POP BC
 $E541 RET           ; return;

; pos_to_tinypos
;
; Used by the routines at #R$7BB5, #R$9F21, #R$C5D3, #R$C918 and #R$CC37.
; .
; Scale down a pos_t and assign result to a tinypos_t.
; .
; Divides the three input 16-bit words by 8, with rounding to nearest, storing
; the result as bytes.
;
; I:HL Pointer to input words
; I:DE Pointer to output bytes
; O:HL Updated.
; O:DE Updated.
c$E542 LD B,$03      ; B = 3;
*$E544 LD A,(HL)     ; {do <% A = *HL++;
 $E545 INC L         ; }
 $E546 LD C,(HL)     ;   C = *HL++;
 $E547 CALL $E550    ;   divide_by_8_with_rounding(C,A);
 $E54A LD (DE),A     ; {  *DE++ = A;
 $E54B INC L         ;
 $E54C INC DE        ; }
 $E54D DJNZ $E544    ; %> while (--B);
 $E54F RET           ; return;

; divide_by_8_with_rounding
;
; Used by the routines at #R$7BB5, #R$C47E, #R$E420 and #R$E542.
; .
; Divides AC by 8, with rounding to nearest.
;
; I:A Low.
; I:C High.
; O:A Result.
c$E550 ADD A,$04     ; A += 4;
 $E552 JR NC,$E555   ; {if (carry) C++;
 $E554 INC C         ; }

; divide_by_8
;
; Used by the routines at #R$B2FC, #R$C47E, #R$E420 and #R$E550.
; .
; Divides AC by 8.
c$E555 SRL C         ; {A = (A >> 3) | (C << 5); C >>= 3;
 $E557 RRA           ;
 $E558 SRL C         ;
 $E55A RRA           ;
 $E55B SRL C         ;
 $E55D RRA           ; }
 $E55E RET           ; return;

; outdoors_mask_data
;
; { byte count+flags; ... }
b$E55F DEFB $2A,$A0,$00,$05,$07,$08,$09,$01 ; {outdoors_mask_0
 $E567 DEFB $0A,$A2,$00,$05,$06,$04,$85,$01
 $E56F DEFB $0B,$9F,$00,$05,$06,$04,$88,$01
 $E577 DEFB $0C,$9C,$00,$05,$06,$04,$8A,$01
 $E57F DEFB $0D,$0E,$99,$00,$05,$06,$04,$8D
 $E587 DEFB $01,$0F,$10,$96,$00,$05,$06,$04
 $E58F DEFB $90,$01,$11,$94,$00,$05,$06,$04
 $E597 DEFB $92,$01,$12,$92,$00,$05,$06,$04
 $E59F DEFB $94,$01,$12,$90,$00,$05,$06,$04
 $E5A7 DEFB $96,$01,$12,$8E,$00,$05,$06,$04
 $E5AF DEFB $98,$01,$12,$8C,$00,$05,$06,$04
 $E5B7 DEFB $9A,$01,$12,$8A,$00,$05,$06,$04
 $E5BF DEFB $9C,$01,$12,$88,$00,$05,$06,$04
 $E5C7 DEFB $9E,$01,$18,$86,$00,$05,$06,$04
 $E5CF DEFB $A1,$01,$84,$00,$05,$06,$04,$A3
 $E5D7 DEFB $01,$00,$00,$05,$06,$04,$A5,$01
 $E5DF DEFB $05,$03,$04,$A7,$01,$02,$A9,$01
 $E5E7 DEFB $02,$A9,$01,$02,$A9,$01,$02,$A9
 $E5EF DEFB $01,$02,$A9,$01,$02,$A9,$01,$02
 $E5F7 DEFB $A9,$01,$02,$A9,$01,$02,$A9,$01 ; }
 $E5FF DEFB $12,$02,$91,$01,$02,$91,$01,$02 ; {outdoors_mask_1
 $E607 DEFB $91,$01,$02,$91,$01,$02,$91,$01
 $E60F DEFB $02,$91,$01,$02,$91,$01,$02,$91
 $E617 DEFB $01,$02,$91,$01,$02,$91,$01     ; }
 $E61E DEFB $10,$13,$14,$15,$8D,$00,$16,$17 ; {outdoors_mask_2
 $E626 DEFB $18,$17,$15,$8B,$00,$19,$1A,$1B
 $E62E DEFB $17,$18,$17,$15,$89,$00,$19,$1A
 $E636 DEFB $1C,$1A,$1B,$17,$18,$17,$15,$87
 $E63E DEFB $00,$19,$1A,$1C,$1A,$1C,$1A,$1B
 $E646 DEFB $17,$13,$14,$15,$85,$00,$19,$1A
 $E64E DEFB $1C,$1A,$1C,$1A,$1C,$1D,$16,$17
 $E656 DEFB $18,$17,$15,$83,$00,$19,$1A,$1C
 $E65E DEFB $1A,$1C,$1A,$1C,$1D,$19,$1A,$1B
 $E666 DEFB $17,$18,$17,$15,$00,$19,$1A,$1C
 $E66E DEFB $1A,$1C,$1A,$1C,$1D,$19,$1A,$1C
 $E676 DEFB $1A,$1B,$17,$18,$17,$00,$20,$1C
 $E67E DEFB $1A,$1C,$1A,$1C,$1D,$19,$1A,$1C
 $E686 DEFB $1A,$1C,$1A,$1B,$17,$83,$00,$20
 $E68E DEFB $1C,$1A,$1C,$1D,$19,$1A,$1C,$1A
 $E696 DEFB $1C,$1A,$1C,$1D,$85,$00,$20,$1C
 $E69E DEFB $1D,$19,$1A,$1C,$1A,$1C,$1A,$1C
 $E6A6 DEFB $1D,$87,$00,$1F,$19,$1A,$1C,$1A
 $E6AE DEFB $1C,$1A,$1C,$1D,$89,$00,$20,$1C
 $E6B6 DEFB $1A,$1C,$1A,$1C,$1D,$8B,$00,$20
 $E6BE DEFB $1C,$1A,$1C,$1D,$8D,$00,$20,$1C
 $E6C6 DEFB $1D,$8F,$00,$1F                 ; }
 $E6CA DEFB $1A,$88,$00,$05,$4C,$90,$00,$86 ; {outdoors_mask_3
 $E6D2 DEFB $00,$05,$06,$04,$32,$30,$4C,$8E
 $E6DA DEFB $00,$84,$00,$05,$06,$04,$84,$01
 $E6E2 DEFB $32,$30,$4C,$8C,$00,$00,$00,$05
 $E6EA DEFB $06,$04,$88,$01,$32,$30,$4C,$8A
 $E6F2 DEFB $00,$00,$06,$04,$8C,$01,$32,$30
 $E6FA DEFB $4C,$88,$00,$02,$90,$01,$32,$30
 $E702 DEFB $4C,$86,$00,$02,$92,$01,$32,$30
 $E70A DEFB $4C,$84,$00,$02,$94,$01,$32,$30
 $E712 DEFB $4C,$00,$00,$02,$96,$01,$32,$30
 $E71A DEFB $00,$02,$98,$01,$12,$02,$98,$01
 $E722 DEFB $12,$02,$98,$01,$12,$02,$98,$01
 $E72A DEFB $12,$02,$98,$01,$12,$02,$98,$01
 $E732 DEFB $12,$02,$98,$01,$12,$02,$98,$01
 $E73A DEFB $12,$02,$98,$01,$12,$02,$98,$01
 $E742 DEFB $12,$02,$98,$01,$12,$02,$98,$01
 $E74A DEFB $12                             ; }
 $E74B DEFB $0D,$02,$8C,$01,$02,$8C,$01,$02 ; {outdoors_mask_4
 $E753 DEFB $8C,$01,$02,$8C,$01             ; }
 $E758 DEFB $0E,$02,$8C,$01,$12,$02,$8C,$01 ; {outdoors_mask_5
 $E760 DEFB $12,$02,$8C,$01,$12,$02,$8C,$01
 $E768 DEFB $12,$02,$8C,$01,$12,$02,$8C,$01
 $E770 DEFB $12,$02,$8C,$01,$12,$02,$8C,$01
 $E778 DEFB $12,$02,$8D,$01,$02,$8D,$01     ; }
 $E77F DEFB $08,$5B,$5A,$86,$00,$01,$01,$5B ; {outdoors_mask_6
 $E787 DEFB $5A,$84,$00,$84,$01,$5B,$5A,$00
 $E78F DEFB $00,$86,$01,$5B,$5A,$D8,$01     ; }
 $E796 DEFB $09,$88,$01,$12,$88,$01,$12,$88 ; {outdoors_mask_7
 $E79E DEFB $01,$12,$88,$01,$12,$88,$01,$12
 $E7A6 DEFB $88,$01,$12,$88,$01,$12,$88,$01
 $E7AE DEFB $12                             ; }
 $E7AF DEFB $10,$8D,$00,$23,$24,$25,$8B,$00 ; {outdoors_mask_8
 $E7B7 DEFB $23,$26,$27,$26,$28,$89,$00,$23
 $E7BF DEFB $26,$27,$26,$22,$29,$2A,$87,$00
 $E7C7 DEFB $23,$26,$27,$26,$22,$29,$2B,$29
 $E7CF DEFB $2A,$85,$00,$23,$24,$25,$26,$22
 $E7D7 DEFB $29,$2B,$29,$2B,$29,$2A,$83,$00
 $E7DF DEFB $23,$26,$27,$26,$28,$2F,$2B,$29
 $E7E7 DEFB $2B,$29,$2B,$29,$2A,$00,$23,$26
 $E7EF DEFB $27,$26,$22,$29,$2A,$2F,$2B,$29
 $E7F7 DEFB $2B,$29,$2B,$29,$2A,$26,$27,$26
 $E7FF DEFB $22,$29,$2B,$29,$2A,$2F,$2B,$29
 $E807 DEFB $2B,$29,$2B,$29,$2A,$26,$22,$29
 $E80F DEFB $2B,$29,$2B,$29,$2A,$2F,$2B,$29
 $E817 DEFB $2B,$29,$2B,$31,$2D,$2F,$2B,$29
 $E81F DEFB $2B,$29,$2B,$29,$2A,$2F,$2B,$29
 $E827 DEFB $2B,$31,$83,$00,$2F,$2B,$29,$2B
 $E82F DEFB $29,$2B,$29,$2A,$2F,$2B,$31,$85
 $E837 DEFB $00,$2F,$2B,$29,$2B,$29,$2B,$29
 $E83F DEFB $2A,$2E,$87,$00,$2F,$2B,$29,$2B
 $E847 DEFB $29,$2B,$31,$2D,$88,$00,$2F,$2B
 $E84F DEFB $29,$2B,$31,$8B,$00,$2F,$2B,$31
 $E857 DEFB $8D,$00,$2E,$8F,$00             ; }
 $E85C DEFB $0A,$83,$00,$05,$06,$30,$4C,$83 ; {outdoors_mask_9
 $E864 DEFB $00,$00,$05,$06,$04,$01,$01,$32
 $E86C DEFB $30,$4C,$00,$34,$04,$86,$01,$32
 $E874 DEFB $33,$83,$00,$40,$01,$01,$3F,$83
 $E87C DEFB $00,$02,$46,$47,$48,$49,$42,$41
 $E884 DEFB $45,$44,$12,$34,$01,$01,$46,$4B
 $E88C DEFB $43,$44,$01,$01,$33,$00,$3C,$3E
 $E894 DEFB $40,$01,$01,$3F,$37,$39,$00,$83
 $E89C DEFB $00,$3D,$3A,$3B,$38,$83,$00     ; }
 $E8A3 DEFB $08,$35,$86,$01,$36,$90,$01,$88 ; {outdoors_mask_10
 $E8AB DEFB $00,$3C,$86,$00,$39,$3C,$00,$02
 $E8B3 DEFB $36,$35,$12,$00,$39,$3C,$00,$02
 $E8BB DEFB $01,$01,$12,$00,$39,$3C,$00,$02
 $E8C3 DEFB $01,$01,$12,$00,$39,$3C,$00,$02
 $E8CB DEFB $01,$01,$12,$00,$39,$3C,$00,$02
 $E8D3 DEFB $01,$01,$12,$00,$39,$3C,$00,$02
 $E8DB DEFB $01,$01,$12,$00,$39,$3C,$00,$02
 $E8E3 DEFB $01,$01,$12,$00,$39,$3C,$00,$02
 $E8EB DEFB $01,$01,$12,$00,$39             ; }
 $E8F0 DEFB $08,$01,$4F,$86,$00,$01,$50,$01 ; {outdoors_mask_11
 $E8F8 DEFB $4F,$84,$00,$01,$00,$00,$51,$01
 $E900 DEFB $4F,$00,$00,$01,$00,$00,$53,$19
 $E908 DEFB $50,$01,$4F,$01,$00,$00,$53,$19
 $E910 DEFB $00,$00,$52,$01,$00,$00,$53,$19
 $E918 DEFB $00,$00,$52,$01,$54,$00,$53,$19
 $E920 DEFB $00,$00,$52,$83,$00,$55,$19,$00
 $E928 DEFB $00,$52,$85,$00,$54,$00,$52     ; }
 $E92F DEFB $02,$56,$57,$56,$57,$58,$59,$58 ; {outdoors_mask_12
 $E937 DEFB $59,$58,$59,$58,$59,$58,$59,$58
 $E93F DEFB $59                             ; }
 $E940 DEFB $05,$00,$00,$23,$24,$25,$02,$00 ; {outdoors_mask_13
 $E948 DEFB $27,$26,$28,$02,$00,$22,$26,$28
 $E950 DEFB $02,$00,$2B,$29,$2A,$02,$00,$2B
 $E958 DEFB $29,$2A,$02,$00,$2B,$29,$2A,$02
 $E960 DEFB $00,$2B,$29,$2A,$02,$00,$2B,$29
 $E968 DEFB $2A,$02,$00,$2B,$31,$00,$02,$00
 $E970 DEFB $83,$00                         ; }
 $E972 DEFB $04,$19,$83,$00,$19,$17,$15,$00 ; {outdoors_mask_14
 $E97A DEFB $19,$17,$18,$17,$19,$1A,$1B,$17
 $E982 DEFB $19,$1A,$1C,$1D,$19,$1A,$1C,$1D
 $E98A DEFB $19,$1A,$1C,$1D,$19,$1A,$1C,$1D
 $E992 DEFB $19,$1A,$1C,$1D,$00,$20,$1C,$1D ; }
 $E99A DEFB $02,$04,$32,$01,$01             ; outdoors_mask_15
 $E99F DEFB $09,$86,$00,$5D,$5C,$54,$84,$00 ; {outdoors_mask_16
 $E9A7 DEFB $5D,$5C,$01,$01,$01,$00,$00,$5D
 $E9AF DEFB $5C,$85,$01,$5D,$5C,$87,$01,$2B
 $E9B7 DEFB $88,$01                         ; }
 $E9B9 DEFB $05,$00,$00,$5D,$5C,$67,$5D,$5C ; {outdoors_mask_17
 $E9C1 DEFB $83,$01,$3C,$84,$01             ; }
 $E9C6 DEFB $02,$5D,$68,$3C,$69             ; outdoors_mask_18
 $E9CB DEFB $0A,$86,$00,$5D,$5C,$46,$47,$84 ; {outdoors_mask_19
 $E9D3 DEFB $00,$5D,$5C,$83,$01,$39,$00,$00
 $E9DB DEFB $5D,$5C,$86,$01,$5D,$5C,$88,$01
 $E9E3 DEFB $4A,$89,$01                     ; }
 $E9E6 DEFB $06,$5D,$5C,$01,$47,$6A,$00,$4A ; {outdoors_mask_20
 $E9EE DEFB $84,$01,$6B,$00,$84,$01,$5F     ; }
 $E9F5 DEFB $04,$05,$4C,$00,$00,$61,$65,$66 ; {outdoors_mask_21
 $E9FD DEFB $4C,$61,$12,$02,$60,$61,$12,$02
 $EA05 DEFB $60,$61,$12,$02,$60,$61,$12,$02
 $EA0D DEFB $60                             ; }
 $EA0E DEFB $04,$00,$00,$05,$4C,$05,$63,$64 ; {outdoors_mask_22
 $EA16 DEFB $60,$61,$12,$02,$60,$61,$12,$02
 $EA1E DEFB $60,$61,$12,$02,$60,$61,$12,$02
 $EA26 DEFB $60,$61,$12,$62,$00             ; }
 $EA2B DEFB $03,$00,$6C,$00,$02,$01,$68,$02 ; {outdoors_mask_23
 $EA33 DEFB $01,$69                         ; }
 $EA35 DEFB $05,$01,$5E,$4C,$00,$00,$01,$01 ; {outdoors_mask_24
 $EA3D DEFB $32,$30,$00,$84,$01,$5F         ; }
 $EA43 DEFB $02,$6E,$5A,$6D,$39,$3C,$39     ; outdoors_mask_25
 $EA4A DEFB $04,$5D,$5C,$46,$47,$4A,$01,$01 ; {outdoors_mask_26
 $EA52 DEFB $39                             ; }
 $EA53 DEFB $03,$2C,$47,$00,$00,$61,$12,$00 ; {outdoors_mask_27
 $EA5B DEFB $61,$12                         ; }
 $EA5D DEFB $03,$00,$45,$1E,$02,$60,$00,$02 ; {outdoors_mask_28
 $EA65 DEFB $60,$00                         ; }
 $EA67 DEFB $05,$45,$1E,$2C,$47,$00,$2C,$47 ; {outdoors_mask_29
 $EA6F DEFB $45,$1E,$12,$00,$61,$12,$61,$12
 $EA77 DEFB $00,$61,$5F,$00,$00             ; }

; stru_EA7C
;
; 47 7-byte structs.
b$EA7C DEFB $1B,$7B,$7F,$F1,$F3,$36,$28 ; {Elements.
 $EA83 DEFB $1B,$77,$7B,$F3,$F5,$36,$18
 $EA8A DEFB $1B,$7C,$80,$F1,$F3,$32,$2A
 $EA91 DEFB $19,$83,$86,$F2,$F7,$18,$24
 $EA98 DEFB $19,$81,$84,$F4,$F9,$18,$1A
 $EA9F DEFB $19,$81,$84,$F3,$F8,$1C,$17
 $EAA6 DEFB $19,$83,$86,$F4,$F8,$16,$20
 $EAAD DEFB $18,$7D,$80,$F4,$F9,$18,$1A
 $EAB4 DEFB $18,$7B,$7E,$F3,$F8,$22,$1A
 $EABB DEFB $18,$79,$7C,$F4,$F9,$22,$10
 $EAC2 DEFB $18,$7B,$7E,$F4,$F9,$1C,$17
 $EAC9 DEFB $18,$79,$7C,$F1,$F6,$2C,$1E
 $EAD0 DEFB $18,$7D,$80,$F2,$F7,$24,$22
 $EAD7 DEFB $1D,$7F,$82,$F6,$F7,$1C,$1E
 $EADE DEFB $1D,$82,$85,$F2,$F3,$23,$30
 $EAE5 DEFB $1D,$86,$89,$F2,$F3,$1C,$37
 $EAEC DEFB $1D,$86,$89,$F4,$F5,$18,$30
 $EAF3 DEFB $1D,$80,$83,$F1,$F2,$28,$30
 $EAFA DEFB $1C,$81,$82,$F4,$F6,$1C,$20
 $EB01 DEFB $1C,$83,$84,$F4,$F6,$1C,$2E
 $EB08 DEFB $1A,$7E,$80,$F5,$F7,$1C,$20
 $EB0F DEFB $12,$7A,$7B,$F2,$F3,$3A,$28
 $EB16 DEFB $12,$7A,$7B,$EF,$F0,$45,$35
 $EB1D DEFB $17,$80,$85,$F4,$F6,$1C,$24
 $EB24 DEFB $14,$80,$84,$F3,$F5,$26,$28
 $EB2B DEFB $15,$84,$85,$F6,$F7,$1A,$1E
 $EB32 DEFB $15,$7E,$7F,$F3,$F4,$2E,$26
 $EB39 DEFB $16,$7C,$85,$EF,$F3,$32,$22
 $EB40 DEFB $16,$79,$82,$F0,$F4,$34,$1A
 $EB47 DEFB $16,$7D,$86,$F2,$F6,$24,$1A
 $EB4E DEFB $10,$76,$78,$F5,$F7,$36,$0A
 $EB55 DEFB $10,$7A,$7C,$F3,$F5,$36,$0A
 $EB5C DEFB $10,$7E,$80,$F1,$F3,$36,$0A
 $EB63 DEFB $10,$82,$84,$EF,$F1,$36,$0A
 $EB6A DEFB $10,$86,$88,$ED,$EF,$36,$0A
 $EB71 DEFB $10,$8A,$8C,$EB,$ED,$36,$0A
 $EB78 DEFB $11,$73,$75,$EB,$ED,$0A,$30
 $EB7F DEFB $11,$77,$79,$ED,$EF,$0A,$30
 $EB86 DEFB $11,$7B,$7D,$EF,$F1,$0A,$30
 $EB8D DEFB $11,$7F,$81,$F1,$F3,$0A,$30
 $EB94 DEFB $11,$83,$85,$F3,$F5,$0A,$30
 $EB9B DEFB $11,$87,$89,$F5,$F7,$0A,$30
 $EBA2 DEFB $10,$84,$86,$F4,$F7,$0A,$30
 $EBA9 DEFB $11,$87,$89,$ED,$EF,$0A,$30
 $EBB0 DEFB $11,$7B,$7D,$F3,$F5,$0A,$0A
 $EBB7 DEFB $11,$79,$7B,$F4,$F6,$0A,$0A
 $EBBE DEFB $0F,$88,$8C,$F5,$F8,$0A,$0A ; }

; exterior_mask_data_pointers
;
; 30 pointers to byte arrays -- probably masks.
w$EBC5 DEFW $E55F
 $EBC7 DEFW $E5FF
 $EBC9 DEFW $E61E
 $EBCB DEFW $E6CA
 $EBCD DEFW $E74B
 $EBCF DEFW $E758
 $EBD1 DEFW $E77F
 $EBD3 DEFW $E796
 $EBD5 DEFW $E7AF
 $EBD7 DEFW $E85C
 $EBD9 DEFW $E8A3
 $EBDB DEFW $E8F0
 $EBDD DEFW $E940
 $EBDF DEFW $E972
 $EBE1 DEFW $E92F
 $EBE3 DEFW $EA67
 $EBE5 DEFW $EA53
 $EBE7 DEFW $EA5D
 $EBE9 DEFW $E99A
 $EBEB DEFW $E99F
 $EBED DEFW $E9B9
 $EBEF DEFW $E9C6
 $EBF1 DEFW $E9CB
 $EBF3 DEFW $E9E6
 $EBF5 DEFW $E9F5
 $EBF7 DEFW $EA0E
 $EBF9 DEFW $EA2B
 $EBFB DEFW $EA35
 $EBFD DEFW $EA43
 $EBFF DEFW $EA4A

; exterior_mask_data
;
; 58 8-byte structs.
; .
; Used by mask_stuff. Used in outdoor mode only.
; .
; struct { ?, lo, hi, lo, hi, ?, ?, ? };
b$EC01 DEFB $00,$47,$70,$27,$3F,$6A,$52,$0C
 $EC09 DEFB $00,$5F,$88,$33,$4B,$5E,$52,$0C
 $EC11 DEFB $00,$77,$A0,$3F,$57,$52,$52,$0C
 $EC19 DEFB $01,$9F,$B0,$28,$31,$3E,$6A,$3C
 $EC21 DEFB $01,$9F,$B0,$32,$3B,$3E,$6A,$3C
 $EC29 DEFB $02,$40,$4F,$4C,$5B,$46,$46,$08
 $EC31 DEFB $02,$50,$5F,$54,$63,$46,$46,$08
 $EC39 DEFB $02,$60,$6F,$5C,$6B,$46,$46,$08
 $EC41 DEFB $02,$70,$7F,$64,$73,$46,$46,$08
 $EC49 DEFB $02,$30,$3F,$54,$63,$3E,$3E,$08
 $EC51 DEFB $02,$40,$4F,$5C,$6B,$3E,$3E,$08
 $EC59 DEFB $02,$50,$5F,$64,$73,$3E,$3E,$08
 $EC61 DEFB $02,$60,$6F,$6C,$7B,$3E,$3E,$08
 $EC69 DEFB $02,$70,$7F,$74,$83,$3E,$3E,$08
 $EC71 DEFB $02,$10,$1F,$64,$73,$4A,$2E,$08
 $EC79 DEFB $02,$20,$2F,$6C,$7B,$4A,$2E,$08
 $EC81 DEFB $02,$30,$3F,$74,$83,$4A,$2E,$08
 $EC89 DEFB $03,$2B,$44,$33,$47,$67,$45,$12
 $EC91 DEFB $04,$2B,$37,$48,$4B,$6D,$45,$08
 $EC99 DEFB $05,$37,$44,$48,$51,$67,$45,$08
 $ECA1 DEFB $06,$08,$0F,$2A,$3C,$6E,$46,$0A
 $ECA9 DEFB $06,$10,$17,$2E,$40,$6E,$46,$0A
 $ECB1 DEFB $06,$18,$1F,$32,$44,$6E,$46,$0A
 $ECB9 DEFB $06,$20,$27,$36,$48,$6E,$46,$0A
 $ECC1 DEFB $06,$28,$2F,$3A,$4C,$6E,$46,$0A
 $ECC9 DEFB $07,$08,$10,$1F,$26,$82,$46,$12
 $ECD1 DEFB $07,$08,$10,$27,$2D,$82,$46,$12
 $ECD9 DEFB $08,$80,$8F,$64,$73,$46,$46,$08
 $ECE1 DEFB $08,$90,$9F,$5C,$6B,$46,$46,$08
 $ECE9 DEFB $08,$A0,$B0,$54,$63,$46,$46,$08
 $ECF1 DEFB $08,$B0,$BF,$4C,$5B,$46,$46,$08
 $ECF9 DEFB $08,$C0,$CF,$44,$53,$46,$46,$08
 $ED01 DEFB $08,$80,$8F,$74,$83,$3E,$3E,$08
 $ED09 DEFB $08,$90,$9F,$6C,$7B,$3E,$3E,$08
 $ED11 DEFB $08,$A0,$B0,$64,$73,$3E,$3E,$08
 $ED19 DEFB $08,$B0,$BF,$5C,$6B,$3E,$3E,$08
 $ED21 DEFB $08,$C0,$CF,$54,$63,$3E,$3E,$08
 $ED29 DEFB $08,$D0,$DF,$4C,$5B,$3E,$3E,$08
 $ED31 DEFB $08,$40,$4F,$74,$83,$4E,$2E,$08
 $ED39 DEFB $08,$50,$5F,$6C,$7B,$4E,$2E,$08
 $ED41 DEFB $08,$10,$1F,$58,$67,$68,$2E,$08
 $ED49 DEFB $08,$20,$2F,$50,$5F,$68,$2E,$08
 $ED51 DEFB $08,$30,$3F,$48,$57,$68,$2E,$08
 $ED59 DEFB $09,$1B,$24,$4E,$55,$68,$37,$0F
 $ED61 DEFB $0A,$1C,$23,$51,$5D,$68,$38,$0A
 $ED69 DEFB $09,$3B,$44,$72,$79,$4E,$2D,$0F
 $ED71 DEFB $0A,$3C,$43,$75,$81,$4E,$2E,$0A
 $ED79 DEFB $09,$7B,$84,$62,$69,$46,$45,$0F
 $ED81 DEFB $0A,$7C,$83,$65,$71,$46,$46,$0A
 $ED89 DEFB $09,$AB,$B4,$4A,$51,$46,$5D,$0F
 $ED91 DEFB $0A,$AC,$B3,$4D,$59,$46,$5E,$0A
 $ED99 DEFB $0B,$58,$5F,$5A,$62,$46,$46,$08
 $EDA1 DEFB $0B,$48,$4F,$62,$6A,$3E,$3E,$08
 $EDA9 DEFB $0C,$0B,$0F,$60,$67,$68,$2E,$08
 $EDB1 DEFB $0D,$0C,$0F,$61,$6A,$4E,$2E,$08
 $EDB9 DEFB $0E,$7F,$80,$7C,$83,$3E,$3E,$08
 $EDC1 DEFB $0D,$2C,$2F,$51,$5A,$3E,$3E,$08
 $EDC9 DEFB $0D,$3C,$3F,$49,$52,$46,$46,$08

; saved_sp
;
; Used by plot_game_window and wipe_game_window.
w$EDD1 DEFW $0000

; game_window_start_addresses
;
; 128 screen pointers.
w$EDD3 DEFW $4047
 $EDD5 DEFW $4147
 $EDD7 DEFW $4247
 $EDD9 DEFW $4347
 $EDDB DEFW $4447
 $EDDD DEFW $4547
 $EDDF DEFW $4647
 $EDE1 DEFW $4747
 $EDE3 DEFW $4067
 $EDE5 DEFW $4167
 $EDE7 DEFW $4267
 $EDE9 DEFW $4367
 $EDEB DEFW $4467
 $EDED DEFW $4567
 $EDEF DEFW $4667
 $EDF1 DEFW $4767
 $EDF3 DEFW $4087
 $EDF5 DEFW $4187
 $EDF7 DEFW $4287
 $EDF9 DEFW $4387
 $EDFB DEFW $4487
 $EDFD DEFW $4587
 $EDFF DEFW $4687
 $EE01 DEFW $4787
 $EE03 DEFW $40A7
 $EE05 DEFW $41A7
 $EE07 DEFW $42A7
 $EE09 DEFW $43A7
 $EE0B DEFW $44A7
 $EE0D DEFW $45A7
 $EE0F DEFW $46A7
 $EE11 DEFW $47A7
 $EE13 DEFW $40C7
 $EE15 DEFW $41C7
 $EE17 DEFW $42C7
 $EE19 DEFW $43C7
 $EE1B DEFW $44C7
 $EE1D DEFW $45C7
 $EE1F DEFW $46C7
 $EE21 DEFW $47C7
 $EE23 DEFW $40E7
 $EE25 DEFW $41E7
 $EE27 DEFW $42E7
 $EE29 DEFW $43E7
 $EE2B DEFW $44E7
 $EE2D DEFW $45E7
 $EE2F DEFW $46E7
 $EE31 DEFW $47E7
 $EE33 DEFW $4807
 $EE35 DEFW $4907
 $EE37 DEFW $4A07
 $EE39 DEFW $4B07
 $EE3B DEFW $4C07
 $EE3D DEFW $4D07
 $EE3F DEFW $4E07
 $EE41 DEFW $4F07
 $EE43 DEFW $4827
 $EE45 DEFW $4927
 $EE47 DEFW $4A27
 $EE49 DEFW $4B27
 $EE4B DEFW $4C27
 $EE4D DEFW $4D27
 $EE4F DEFW $4E27
 $EE51 DEFW $4F27
 $EE53 DEFW $4847
 $EE55 DEFW $4947
 $EE57 DEFW $4A47
 $EE59 DEFW $4B47
 $EE5B DEFW $4C47
 $EE5D DEFW $4D47
 $EE5F DEFW $4E47
 $EE61 DEFW $4F47
 $EE63 DEFW $4867
 $EE65 DEFW $4967
 $EE67 DEFW $4A67
 $EE69 DEFW $4B67
 $EE6B DEFW $4C67
 $EE6D DEFW $4D67
 $EE6F DEFW $4E67
 $EE71 DEFW $4F67
 $EE73 DEFW $4887
 $EE75 DEFW $4987
 $EE77 DEFW $4A87
 $EE79 DEFW $4B87
 $EE7B DEFW $4C87
 $EE7D DEFW $4D87
 $EE7F DEFW $4E87
 $EE81 DEFW $4F87
 $EE83 DEFW $48A7
 $EE85 DEFW $49A7
 $EE87 DEFW $4AA7
 $EE89 DEFW $4BA7
 $EE8B DEFW $4CA7
 $EE8D DEFW $4DA7
 $EE8F DEFW $4EA7
 $EE91 DEFW $4FA7
 $EE93 DEFW $48C7
 $EE95 DEFW $49C7
 $EE97 DEFW $4AC7
 $EE99 DEFW $4BC7
 $EE9B DEFW $4CC7
 $EE9D DEFW $4DC7
 $EE9F DEFW $4EC7
 $EEA1 DEFW $4FC7
 $EEA3 DEFW $48E7
 $EEA5 DEFW $49E7
 $EEA7 DEFW $4AE7
 $EEA9 DEFW $4BE7
 $EEAB DEFW $4CE7
 $EEAD DEFW $4DE7
 $EEAF DEFW $4EE7
 $EEB1 DEFW $4FE7
 $EEB3 DEFW $5007
 $EEB5 DEFW $5107
 $EEB7 DEFW $5207
 $EEB9 DEFW $5307
 $EEBB DEFW $5407
 $EEBD DEFW $5507
 $EEBF DEFW $5607
 $EEC1 DEFW $5707
 $EEC3 DEFW $5027
 $EEC5 DEFW $5127
 $EEC7 DEFW $5227
 $EEC9 DEFW $5327
 $EECB DEFW $5427
 $EECD DEFW $5527
 $EECF DEFW $5627
 $EED1 DEFW $5727

; plot_game_window
;
; Used by the routines at #R$9D78 and #R$A50B.
c$EED3 LD ($EDD1),SP ; saved_sp = SP;
 $EED7 LD A,($A7C8)  ; A = *(&plot_game_window_x + 1);
 $EEDA AND A         ; {if (A) goto unaligned;
 $EEDB JP NZ,$EF27   ; }
 $EEDE LD HL,$F291   ; {HL = $F291 + plot_game_window_x;
 $EEE1 LD A,($A7C7)  ;
 $EEE4 ADD A,L       ;
 $EEE5 JR NC,$EEE8   ;
 $EEE7 INC H         ;
*$EEE8 LD L,A        ; }
 $EEE9 LD SP,$EDD3   ; SP = game_window_start_addresses;
 $EEEC LD A,$80      ; A = 128; // 128 rows
*$EEEE POP DE        ; do <% DE = *SP++; // output address
 $EEEF LDI           ;   *DE++ = *HL++; // 23x
 $EEF1 LDI           ;   *DE++ = *HL++;
 $EEF3 LDI           ;   *DE++ = *HL++;
 $EEF5 LDI           ;   *DE++ = *HL++;
 $EEF7 LDI           ;   *DE++ = *HL++;
 $EEF9 LDI           ;   *DE++ = *HL++;
 $EEFB LDI           ;   *DE++ = *HL++;
 $EEFD LDI           ;   *DE++ = *HL++;
 $EEFF LDI           ;   *DE++ = *HL++;
 $EF01 LDI           ;   *DE++ = *HL++;
 $EF03 LDI           ;   *DE++ = *HL++;
 $EF05 LDI           ;   *DE++ = *HL++;
 $EF07 LDI           ;   *DE++ = *HL++;
 $EF09 LDI           ;   *DE++ = *HL++;
 $EF0B LDI           ;   *DE++ = *HL++;
 $EF0D LDI           ;   *DE++ = *HL++;
 $EF0F LDI           ;   *DE++ = *HL++;
 $EF11 LDI           ;   *DE++ = *HL++;
 $EF13 LDI           ;   *DE++ = *HL++;
 $EF15 LDI           ;   *DE++ = *HL++;
 $EF17 LDI           ;   *DE++ = *HL++;
 $EF19 LDI           ;   *DE++ = *HL++;
 $EF1B LDI           ;   *DE++ = *HL++;
 $EF1D INC HL        ;   HL++; // skip 24th
 $EF1E DEC A         ; {%> while (--A);
 $EF1F JP NZ,$EEEE   ; }
 $EF22 LD SP,($EDD1) ; SP = saved_sp;
 $EF26 RET           ; return;
*$EF27 LD HL,$F290   ; {unaligned: HL = $F290 + plot_game_window_x; // screen
 $EF2A LD A,($A7C7)  ; buffer start address
 $EF2D ADD A,L       ;
 $EF2E JR NC,$EF31   ;
 $EF30 INC H         ;
*$EF31 LD L,A        ; }
 $EF32 LD A,(HL)     ; {A = *HL++; // prime A
 $EF33 INC L         ; }
 $EF34 LD SP,$EDD3   ; SP = game_window_start_addresses;
 $EF37 EXX           ; {Bdash = 128; // 128 rows
 $EF38 LD B,$80      ; }
*$EF3A EXX           ; do <%
 $EF3B POP DE        ;   POP DE // output address
 $EF3C LD B,$04      ;   B = 4; // 4 iterations of 5 plus 3 at the end == 23
*$EF3E LD C,(HL)     ;   do <% C = *HL;
 $EF3F RRD           ; {    RRD             // tmp = *HL & 0x0F; *HL = (*HL >>
 $EF41 EX AF,AF'     ; 4) | (A << 4); A = (A & 0xF0) | tmp;}
 $EF42 LD A,(HL)     ;     Adash = *HL;
 $EF43 LD (DE),A     ;     *DE++ = Adash;
 $EF44 LD (HL),C     ; {    *HL++ = C;
 $EF45 EX AF,AF'     ;
 $EF46 INC HL        ;
 $EF47 INC E         ; }
 $EF48 LD C,(HL)     ;     C = *HL;
 $EF49 RRD           ; {    RRD
 $EF4B EX AF,AF'     ; }
 $EF4C LD A,(HL)     ;     Adash = *HL;
 $EF4D LD (DE),A     ;     *DE++ = Adash;
 $EF4E LD (HL),C     ; {    *HL++ = C;
 $EF4F EX AF,AF'     ;
 $EF50 INC HL        ;
 $EF51 INC E         ; }
 $EF52 LD C,(HL)     ;     C = *HL;
 $EF53 RRD           ; {    RRD
 $EF55 EX AF,AF'     ; }
 $EF56 LD A,(HL)     ;     Adash = *HL;
 $EF57 LD (DE),A     ;     *DE++ = Adash;
 $EF58 LD (HL),C     ; {    *HL++ = C;
 $EF59 EX AF,AF'     ;
 $EF5A INC HL        ;
 $EF5B INC E         ; }
 $EF5C LD C,(HL)     ;     C = *HL;
 $EF5D RRD           ; {    RRD
 $EF5F EX AF,AF'     ; }
 $EF60 LD A,(HL)     ;     Adash = *HL;
 $EF61 LD (DE),A     ;     *DE++ = Adash;
 $EF62 LD (HL),C     ; {    *HL++ = C;
 $EF63 EX AF,AF'     ;
 $EF64 INC HL        ;
 $EF65 INC E         ; }
 $EF66 LD C,(HL)     ;     C = *HL;
 $EF67 RRD           ; {    RRD
 $EF69 EX AF,AF'     ; }
 $EF6A LD A,(HL)     ;     Adash = *HL;
 $EF6B LD (DE),A     ;     *DE++ = Adash;
 $EF6C LD (HL),C     ; {    *HL++ = C;
 $EF6D EX AF,AF'     ;
 $EF6E INC HL        ;
 $EF6F INC E         ; }
 $EF70 DJNZ $EF3E    ;   %> while (--B);
 $EF72 LD C,(HL)     ;   C = *HL;
 $EF73 RRD           ; {  RRD
 $EF75 EX AF,AF'     ; }
 $EF76 LD A,(HL)     ;   Adash = *HL;
 $EF77 LD (DE),A     ;   *DE++ = Adash;
 $EF78 LD (HL),C     ; {  *HL++ = C;
 $EF79 EX AF,AF'     ;
 $EF7A INC HL        ;
 $EF7B INC E         ; }
 $EF7C LD C,(HL)     ;   C = *HL;
 $EF7D RRD           ; {  RRD
 $EF7F EX AF,AF'     ; }
 $EF80 LD A,(HL)     ;   Adash = *HL;
 $EF81 LD (DE),A     ;   *DE++ = Adash;
 $EF82 LD (HL),C     ; {  *HL++ = C;
 $EF83 EX AF,AF'     ;
 $EF84 INC HL        ;
 $EF85 INC E         ; }
 $EF86 LD C,(HL)     ;   C = *HL;
 $EF87 RRD           ; {  RRD
 $EF89 EX AF,AF'     ; }
 $EF8A LD A,(HL)     ;   Adash = *HL;
 $EF8B LD (DE),A     ;   *DE++ = Adash;
 $EF8C LD (HL),C     ; {  *HL++ = C;
 $EF8D EX AF,AF'     ;
 $EF8E INC HL        ;
 $EF8F INC E         ; }
 $EF90 LD A,(HL)     ; {  A = *HL++;
 $EF91 INC HL        ;
 $EF92 EXX           ; }
 $EF93 DJNZ $EF3A    ; %> while (--Bdash);
 $EF95 LD SP,($EDD1) ; SP = saved_sp;
 $EF99 RET           ; return;

; event_roll_call
;
; Is the player within the roll call area bounds?
; .
; Range checking. X in (0x72..0x7C) and Y in (0x6A..0x72).
c$EF9A LD DE,$727C   ; DE = map_ROLL_CALL_X;
 $EF9D LD HL,$81B8   ; HL = &player_map_position.y;
 $EFA0 LD B,$02      ; B = 2; // iterations
*$EFA2 LD A,(HL)     ; do <% A = *HL++;
 $EFA3 CP D          ; {  if (A < D || A >= E) goto not_at_roll_call;
 $EFA4 JR C,$EFC0    ;
 $EFA6 CP E          ;
 $EFA7 JR NC,$EFC0   ;
 $EFA9 INC HL        ; }
 $EFAA LD DE,$6A72   ;   DE = map_ROLL_CALL_Y;
 $EFAD DJNZ $EFA2    ; %> while (--B);
; All visible characters turn forward.
 $EFAF LD HL,$800D   ; HL = $800D;
 $EFB2 LD B,$08      ; B = 8; // iterations
*$EFB4 LD (HL),$80   ; {do <% *HL++ = 0x80; // movement
 $EFB6 INC L         ; }
 $EFB7 LD (HL),$03   ;   *HL = 0x03; // direction (3 => face bottom left)
 $EFB9 LD A,L        ; {  HL += 31;
 $EFBA ADD A,$1F     ;
 $EFBC LD L,A        ; }
 $EFBD DJNZ $EFB4    ; %> while (--B);
 $EFBF RET           ; return;
*$EFC0 XOR A         ; {not_at_roll_call: bell = bell_RING_PERPETUAL;
 $EFC1 LD ($A130),A  ; }
 $EFC4 LD B,A        ; {queue_message_for_display(message_MISSED_ROLL_CALL);
 $EFC5 CALL $7D15    ; }
 $EFC8 JP $CCAB      ; hostiles_persue(); // exit via

; action_papers
;
; Is the player within the main gate bounds?
; .
; Range checking. X in (0x69..0x6D) and Y in (0x49..0x4B).
c$EFCB LD DE,$696D   ; DE = map_MAIN_GATE_X;
 $EFCE LD HL,$81B8   ; HL = &player_map_position.y;
 $EFD1 LD B,$02      ; B = 2; // iterations
*$EFD3 LD A,(HL)     ; do <% A = *HL++;
 $EFD4 CP D          ; {  if (A < D || A >= E) return;
 $EFD5 RET C         ;
 $EFD6 CP E          ;
 $EFD7 RET NC        ;
 $EFD8 INC HL        ; }
 $EFD9 LD DE,$494B   ;   DE = map_MAIN_GATE_Y;
 $EFDC DJNZ $EFD3    ; %> while (--B);
; Using the papers at the main gate when not in uniform causes the player to be
; sent to solitary.
 $EFDE LD DE,$CEA6   ; {if ($8015 != sprite_guard_tl_4) goto solitary; // exit
 $EFE1 LD A,($8015)  ; via
 $EFE4 CP E          ;
 $EFE5 JP NZ,$CB98   ; }
 $EFE8 CALL $A0E9    ; increase_morale_by_10_score_by_50();
 $EFEB XOR A         ; {$801C = room_0_outdoors; // set room index
 $EFEC LD ($801C),A  ; }
; Transition to outside the main gate.
 $EFEF LD HL,$EFF9   ; HL = &word_EFF9; // pointer to location?
 $EFF2 LD IY,$8000   ; IY = $8000; // player character
 $EFF6 JP $68A2      ; transition(); return; // doesn't return: exits with goto
                     ; main_loop

; word_EFF9 (<- action_papers)
b$EFF9 DEFB $D6,$8A,$06 ; <% 0xD6, 0x8A, 0x06 %>

; user_confirm
;
; Used by the routines at #R$9DE5 and #R$F350.
; .
; Waits for the user to press Y or N.
;
; O:F 'Y'/'N' pressed => return Z/NZ
c$EFFC LD HL,$F014   ; HL = &screenlocstring_confirm_y_or_n[0];
 $EFFF CALL $A5BF    ; screenlocstring_plot();
*$F002 LD BC,$DFFE   ; for (;;) <% BC = port_KEYBOARD_POIUY;
 $F005 IN A,(C)      ;   IN A,(C)
 $F007 BIT 4,A       ; {  if ((A & (1<<4)) == 0) return; // is 'Y' pressed?
 $F009 RET Z         ; return Z}
 $F00A LD B,$7F      ;   BC = port_KEYBOARD_SPACESYMSHFTMNB;
 $F00C IN A,(C)      ;   IN A,(C)
 $F00E CPL           ;   A = ~A;
 $F00F BIT 3,A       ; {  if ((A & (1<<3)) != 0) return; // is 'N' pressed?
 $F011 RET NZ        ; return NZ}
 $F012 JR $F002      ; %>

; screenlocstring_confirm_y_or_n
;
; "CONFIRM. Y OR N"
t$F014 DEFB $0B      ; {#CALL:decode_screenlocstring($F014)
 $F015 DEFM "P"
 $F016 DEFB $0F
 $F017 DEFB $0C
 $F018 DEFB $00
 $F019 DEFB $17
 $F01A DEFB $0F
 $F01B DEFB $12
 $F01C DEFB $1A
 $F01D DEFB $16
 $F01E DEFM "$#!#"
 $F022 DEFB $00
 $F023 DEFB $1A
 $F024 DEFM "#"
 $F025 DEFB $17      ; }

; more_messages
;
; More messages.
; .
; "HE TAKES THE BRIBE"
t$F026 DEFB $11      ; {#CALL:decode_stringFF($F026)
 $F027 DEFB $0E
 $F028 DEFM "#"
 $F029 DEFB $1C
 $F02A DEFB $0A
 $F02B DEFB $14
 $F02C DEFB $0E
 $F02D DEFB $1B
 $F02E DEFM "#"
 $F02F DEFB $1C
 $F030 DEFB $11
 $F031 DEFB $0E
 $F032 DEFM "#"
 $F033 DEFB $0B
 $F034 DEFB $1A
 $F035 DEFB $12
 $F036 DEFB $0B
 $F037 DEFB $0E
 $F038 DEFB $FF      ; }
; "AND ACTS AS DECOY"
 $F039 DEFB $0A      ; {#CALL:decode_stringFF($F039)
 $F03A DEFB $17
 $F03B DEFB $0D
 $F03C DEFM "#"
 $F03D DEFB $0A
 $F03E DEFB $0C
 $F03F DEFB $1C
 $F040 DEFB $1B
 $F041 DEFM "#"
 $F042 DEFB $0A
 $F043 DEFB $1B
 $F044 DEFM "#"
 $F045 DEFB $0D
 $F046 DEFB $0E
 $F047 DEFB $0C
 $F048 DEFB $00
 $F049 DEFM "!"
 $F04A DEFB $FF      ; }
; "ANOTHER DAY DAWNS"
 $F04B DEFB $0A      ; {#CALL:decode_stringFF($F04B)
 $F04C DEFB $17
 $F04D DEFB $00
 $F04E DEFB $1C
 $F04F DEFB $11
 $F050 DEFB $0E
 $F051 DEFB $1A
 $F052 DEFM "#"
 $F053 DEFB $0D
 $F054 DEFB $0A
 $F055 DEFM "!#"
 $F057 DEFB $0D
 $F058 DEFB $0A
 $F059 DEFB $1F
 $F05A DEFB $17
 $F05B DEFB $1B
 $F05C DEFB $FF      ; }

; gates_and_doors
b$F05D DEFB $80,$81                     ; gates_flags
 $F05F DEFB $8D,$8C,$8E,$A2,$98,$9F,$96 ; door_flags
 $F066 DEFB $00,$00                     ; unknown

; jump_to_main
;
; Used by the routine at #R$FDE1.
c$F068 JP $F163      ;

; keydefs
;
; User-defined keys. Pairs of (port, key mask).
b$F06B DEFB $00,$00
 $F06D DEFB $00,$00
 $F06F DEFB $00,$00
 $F071 DEFB $00,$00
 $F073 DEFB $00,$00

; static_tiles_plot_direction
;
; 0 for horizontal, 255 for vertical.
b$F075 DEFB $00

; static_graphic_defs
;
; Definitions of fixed graphic elements.
; .
; Only used by #R$F1E0.
; .
; struct: w(addr), flags+length, attrs[length]
b$F076 DEFB $21,$40,$94,$18,$19,$19,$19,$19 ; {statics_flagpole
 $F07E DEFB $19,$19,$19,$19,$19,$19,$19,$19
 $F086 DEFB $19,$19,$19,$19,$19,$1A,$1A     ; }
 $F08D DEFB $06,$40,$94,$02,$04,$11,$12,$11 ; {statics_game_window_left_border
 $F095 DEFB $12,$11,$12,$11,$12,$11,$12,$11
 $F09D DEFB $12,$11,$12,$11,$12,$0E,$10     ; }
 $F0A4 DEFB $1E,$40,$94,$05,$07,$11,$12,$11 ; {statics_game_window_right_border
 $F0AC DEFB $12,$11,$12,$11,$12,$11,$12,$11
 $F0B4 DEFB $12,$11,$12,$11,$12,$09,$0B     ; }
 $F0BB DEFB $27,$40,$17,$13,$14,$13,$14,$13 ; {statics_game_window_top_border
 $F0C3 DEFB $14,$13,$14,$13,$14,$15,$16,$17
 $F0CB DEFB $13,$14,$13,$14,$13,$14,$13,$14
 $F0D3 DEFB $13,$14                         ; }
 $F0D5 DEFB $47,$50,$17,$13,$14,$13,$14,$13 ; {statics_game_window_bottom
 $F0DD DEFB $14,$13,$14,$13,$14,$15,$16,$17
 $F0E5 DEFB $13,$14,$13,$14,$13,$14,$13,$14
 $F0ED DEFB $13,$14                         ; }
 $F0EF DEFB $A0,$50,$05,$1F,$1B,$1C,$1D,$1E ; statics_flagpole_grass
 $F0F7 DEFB $73,$50,$0D,$20,$21,$22,$21,$23 ; {statics_medals_row0
 $F0FF DEFB $21,$24,$21,$22,$21,$25,$0B,$0C ; }
 $F107 DEFB $93,$50,$0B,$26,$4E,$27,$4E,$28 ; {statics_medals_row1
 $F10F DEFB $4E,$29,$4E,$27,$4E,$2A         ; }
 $F115 DEFB $B3,$50,$0B,$2B,$2C,$2D,$2C,$2E ; {statics_medals_row2
 $F11D DEFB $2C,$2F,$2C,$2D,$2C,$30         ; }
 $F123 DEFB $D3,$50,$0B,$31,$32,$33,$34,$35 ; {statics_medals_row3
 $F12B DEFB $36,$37,$38,$39,$3A,$3B         ; }
 $F131 DEFB $F3,$50,$0A,$3C,$3D,$3E,$3F,$40 ; {statics_medals_row4
 $F139 DEFB $41,$42,$43,$44,$45             ; }
 $F13E DEFB $6E,$50,$03,$46,$47,$48         ; statics_bell_row0
 $F144 DEFB $8E,$50,$03,$49,$4A,$4B         ; statics_bell_row1
 $F14A DEFB $AE,$50,$02,$4C,$4D             ; statics_bell_row2
 $F14F DEFB $05,$40,$82,$01,$03             ; statics_corner_tl
 $F154 DEFB $1F,$40,$82,$06,$08             ; statics_corner_tr
 $F159 DEFB $45,$50,$82,$0D,$0F             ; statics_corner_bl
 $F15E DEFB $5F,$50,$82,$0A,$0C             ; statics_corner_br

; main
;
; Used by the routine at #R$F068.
; .
; Main.
; .
; Disable interrupts and set up stack pointer.
c$F163 DI            ; {-
 $F164 LD SP,$FFFE   ; }
; Set up screen.
 $F167 CALL $F257    ; wipe_full_screen_and_attributes();
 $F16A LD A,$44      ; {set_morale_flag_screen_attributes(attribute_BRIGHT_GREEN_OVER_BLACK);
 $F16C CALL $A071    ; }
 $F16F LD E,$46      ; {set_menu_item_attributes(attribute_BRIGHT_YELLOW_OVER_BLACK);
 $F171 CALL $F408    ; }
 $F174 CALL $F1E0    ; plot_statics_and_menu_text();
 $F177 CALL $A10B    ; plot_score();
 $F17A CALL $F4B7    ; menu_screen();
; Construct a table of 256 bit-reversed bytes at 0x7F00.
 $F17D LD HL,$7F00   ; HL = 0x7F00;
*$F180 LD A,L        ; do <% A = L;
 $F181 LD C,$00      ;   C = 0;
 $F183 LD B,$08      ;   B = 8; // iterations
*$F185 RRA           ;   do <% carry = A & 1; A >>= 1; // flips a byte
 $F186 RL C          ;     C = (C << 1) | carry;
 $F188 DJNZ $F185    ;   %> while (--B);
 $F18A LD (HL),C     ; {  *HL++ = C;
 $F18B INC L         ;
 $F18C JP NZ,$F180   ; }
 $F18F INC H         ; %> while ((HL & 0xFF) != 0);
; Initialise visible characters (HL is $8000).
 $F190 LD DE,$F1C9   ; DE = &vischar_initial;
 $F193 LD B,$08      ; B = 8; // iterations
*$F195 PUSH BC       ; do <% -
 $F196 PUSH DE       ; {  -
 $F197 PUSH HL       ; }
 $F198 LD BC,$0017   ; {  memcpy(HL, DE, 23);
 $F19B EX DE,HL      ;
 $F19C LDIR          ; }
 $F19E POP HL        ;   -
 $F19F LD A,$20      ; {  HL += 32;
 $F1A1 ADD A,L       ;
 $F1A2 LD L,A        ; }
 $F1A3 POP DE        ;   -
 $F1A4 POP BC        ; {%> while (--B);
 $F1A5 DJNZ $F195    ; }
; Write 0xFF 0xFF at 0x8020 and every 32 bytes after.
 $F1A7 LD B,$07      ; B = 7; // iterations
 $F1A9 LD HL,$8020   ; HL = 0x8020; // iterate over non-player characters
 $F1AC LD DE,$001F   ; -
 $F1AF LD A,$FF      ; -
*$F1B1 LD (HL),A     ; {do <% HL[0] = character_NONE;
 $F1B2 INC L         ; }
 $F1B3 LD (HL),A     ;   HL[1] = 0xFF; // flags
 $F1B4 ADD HL,DE     ;   HL += 32;
 $F1B5 DJNZ $F1B1    ; %> while (--B);
; Zero 0x118 bytes at HL (== $8100) onwards.
; .
; This is likely wiping everything up until the start of tiles ($8218).
 $F1B7 LD BC,$0118   ; BC = 0x118;
*$F1BA LD (HL),$00   ; {do <% *HL++ = 0; %> while (--BC != 0); // turn into
 $F1BC INC HL        ; memset
 $F1BD DEC BC        ;
 $F1BE LD A,C        ;
 $F1BF OR B          ;
 $F1C0 JP NZ,$F1BA   ; }
 $F1C3 CALL $B75A    ; reset_game();
 $F1C6 JP $9D78      ; goto main_loop_setup;

; vischar_initial
;
; Initial state of a visible character.
b$F1C9 DEFB $00,$00,$2C,$01,$2E,$2E,$18,$00
 $F1D1 DEFB $F2,$CD,$76,$CF,$00,$00,$00,$00
 $F1D9 DEFB $00,$00,$00,$18,$00,$2E,$CE

; plot_statics_and_menu_text
;
; Used by the routine at #R$F163.
; .
; Plot statics and menu text.
c$F1E0 LD HL,$F076   ; HL = &static_graphic_defs[0];
 $F1E3 LD B,$12      ; B = NELEMS(static_graphic_defs); // 18 iterations
*$F1E5 PUSH BC       ; do <% PUSH BC
; Fetch screen address.
 $F1E6 LD E,(HL)     ; {  E = *HL++;
 $F1E7 INC HL        ; }
 $F1E8 LD D,(HL)     ; {  D = *HL++;
 $F1E9 INC HL        ; }
 $F1EA BIT 7,(HL)    ; {  if (*HL & statictiles_VERTICAL)
 $F1EC JR Z,$F1F3    ; }
 $F1EE CALL $F209    ;     plot_static_tiles_vertical();
 $F1F1 JR $F1F6      ;   else
*$F1F3 CALL $F206    ;     plot_static_tiles_horizontal();
*$F1F6 POP BC        ;   POP BC
 $F1F7 DJNZ $F1E5    ; %> while (--B);
; Plot menu text.
 $F1F9 LD B,$08      ; B = 8; // 8 iterations
 $F1FB LD HL,$F446   ; HL = &key_choice_screenlocstrings;
*$F1FE PUSH BC       ; do <% PUSH BC
 $F1FF CALL $A5BF    ;   screenlocstring_plot();
 $F202 POP BC        ;   POP BC
 $F203 DJNZ $F1FE    ; %> while (--B);
 $F205 RET           ; return;

; plot_static_tiles_horizontal
;
; Used by the routine at #R$F1E0.
; .
; Plot static screen tiles horizontally.
;
; I:DE Pointer to screen address.
; I:HL Pointer to tile indices.
c$F206 XOR A         ; A = 0;
 $F207 JR $F20B      ; goto plot_static_tiles;
; This entry point is used by the routine at #R$F1E0.
*$F209 LD A,$FF      ; plot_static_tiles_vertical: A = 255;
*$F20B LD ($F075),A  ; plot_static_tiles: static_tiles_plot_direction = A;
 $F20E LD A,(HL)     ; {B = *HL++ & statictiles_COUNT_MASK; // loop iterations
 $F20F AND $7F       ;
 $F211 LD B,A        ;
 $F212 INC HL        ; }
 $F213 PUSH DE       ; PUSH DE
 $F214 EXX           ; -
 $F215 POP DE        ; POP DEdash
 $F216 EXX           ; -
*$F217 LD A,(HL)     ; do <% A = *HL;
 $F218 EXX           ;   -
 $F219 LD C,A        ; {  HLdash = &static_tiles[A]; // elements: 9 bytes each
 $F21A LD B,$00      ;
 $F21C LD L,A        ;
 $F21D LD H,$00      ;
 $F21F ADD HL,HL     ;
 $F220 ADD HL,HL     ;
 $F221 ADD HL,HL     ;
 $F222 ADD HL,BC     ;
 $F223 LD BC,$7F00   ;
 $F226 ADD HL,BC     ; }
 $F227 LD B,$08      ;   Bdash = 8; // 8 iterations
; Plot a tile.
*$F229 LD A,(HL)     ; {  do <% *DEdash = *HLdash++;
 $F22A LD (DE),A     ; }
 $F22B INC D         ; {    DEdash += 256; // next row
 $F22C INC HL        ; }
 $F22D DJNZ $F229    ;   %> while (--Bdash);
 $F22F DEC D         ;   DEdash -= 256;
 $F230 PUSH DE       ;   PUSH DEdash
; Calculate screen attribute address of tile.
 $F231 LD A,D        ;   A = Ddash;
 $F232 LD D,$58      ;   Ddash = 0x58; // screen attributes base
 $F234 CP $48        ; {  if (A >= 0x48) DEdash += 256;
 $F236 JR C,$F23E    ;
 $F238 INC D         ; }
 $F239 CP $50        ; {  if (A >= 0x50) DEdash += 256;
 $F23B JR C,$F23E    ;
 $F23D INC D         ; }
*$F23E LD A,(HL)     ; {  *DEdash = *HLdash; // copy attribute byte
 $F23F LD (DE),A     ; }
 $F240 POP HL        ;   POP HLdash
 $F241 LD A,($F075)  ;   A = static_tiles_plot_direction;
 $F244 AND A         ; {  if (A == 0) <% // horizontal
 $F245 JR NZ,$F24E   ; }
 $F247 LD A,H        ; {    Hdash -= 7;  // HLdash -= 7 * 256;
 $F248 SUB $07       ;
 $F24A LD H,A        ; }
 $F24B INC L         ;     Ldash++; %>
 $F24C JR $F251      ;   else <% // vertical
*$F24E CALL $7CE9    ;     get_next_scanline(); %>
*$F251 EX DE,HL      ;   EX DEdash,HLdash
 $F252 EXX           ;   -
 $F253 INC HL        ;   HL++;
 $F254 DJNZ $F217    ; %> while (--B);
 $F256 RET           ; return;

; wipe_full_screen_and_attributes
;
; Used by the routine at #R$F163.
c$F257 LD HL,$4000   ; {memset(screen, 0, 0x1800);
 $F25A LD DE,$4001   ;
 $F25D LD (HL),$00   ;
 $F25F LD BC,$17FF   ;
 $F262 LDIR          ;
 $F264 INC HL        ; }
 $F265 INC DE        ; {memset(atttributes, attribute_WHITE_OVER_BLACK,
 $F266 LD (HL),$07   ; 0x300);
 $F268 LD BC,$02FF   ;
 $F26B LDIR          ; }
 $F26D XOR A         ; {border = 0; // black
 $F26E OUT ($FE),A   ; }
 $F270 RET           ; return;

; check_menu_keys
;
; Used by the routine at #R$F4B7.
; .
; Menu screen key handling.
; .
; Scan for a keypress which either starts the game or selects an input device.
; If an input device is chosen, update the menu highlight to match and record
; which input device was chosen.
; .
; If the game is started then copy the input routine to $F075. If the chosen
; input device is keyboard, then exit via choose_keys.
c$F271 CALL $F41C    ; A = menu_keyscan();
 $F274 CP $FF        ; {if (A == 0xFF) return; /* no keypress */
 $F276 RET Z         ; }
 $F277 AND A         ; {if (A) <%
 $F278 JR Z,$F28E    ; }
 $F27A DEC A         ;   A--; // 1..4 -> 0..3
 $F27B PUSH AF       ;   PUSH AF
 $F27C LD A,($F445)  ;   A = chosen_input_device;
 $F27F LD E,$07      ; {
 $F281 CALL $F408    ; set_menu_item_attributes(attribute_WHITE_OVER_BLACK);}
 $F284 POP AF        ;   POP AF
 $F285 LD ($F445),A  ;   chosen_input_device = A;
 $F288 LD E,$46      ; {
 $F28A CALL $F408    ; set_menu_item_attributes(attribute_BRIGHT_YELLOW_OVER_BLACK);}
 $F28D RET           ;   return; %>
; Zero pressed to start game.
*$F28E LD A,($F445)  ; {else <% A = chosen_input_device;
 $F291 ADD A,A       ; }
 $F292 LD C,A        ; {  memcpy($F075, inputroutine[A], 0x4A); // copy input
 $F293 LD B,$00      ; routine to $F075, length 0x4A
 $F295 EX AF,AF'     ;
 $F296 LD HL,$F43D   ;
 $F299 ADD HL,BC     ;
 $F29A LD A,(HL)     ;
 $F29B INC HL        ;
 $F29C LD H,(HL)     ;
 $F29D LD L,A        ;
 $F29E LD DE,$F075   ;
 $F2A1 LD BC,$004A   ;
 $F2A4 LDIR          ;
 $F2A6 EX AF,AF'     ; }
 $F2A7 AND A         ; {  if (A == inputdevice_KEYBOARD) goto choose_keys; //
 $F2A8 CALL Z,$F350  ; keyboard was selected
 $F2AB POP BC        ; }
 $F2AC RET           ;   return; %>

; define_key_prompts
;
; Key choice prompt strings.
; .
; "CHOOSE KEYS"
t$F2AD DEFM "m@"     ; {#CALL:decode_screenlocstring($F2AD)
 $F2AF DEFB $0B
 $F2B0 DEFB $0C
 $F2B1 DEFB $11
 $F2B2 DEFB $00
 $F2B3 DEFB $00
 $F2B4 DEFB $1B
 $F2B5 DEFB $0E
 $F2B6 DEFM "#"
 $F2B7 DEFB $14
 $F2B8 DEFB $0E
 $F2B9 DEFM "!"
 $F2BA DEFB $1B      ; }
; "LEFT."
 $F2BB DEFB $CD      ; {#CALL:decode_screenlocstring($F2BB)
 $F2BC DEFM "@"
 $F2BD DEFB $05
 $F2BE DEFB $15
 $F2BF DEFB $0E
 $F2C0 DEFB $0F
 $F2C1 DEFB $1C
 $F2C2 DEFM "$"      ; }
; "RIGHT."
 $F2C3 DEFB $0D      ; {#CALL:decode_screenlocstring($F2C3)
 $F2C4 DEFM "H"
 $F2C5 DEFB $06
 $F2C6 DEFB $1A
 $F2C7 DEFB $12
 $F2C8 DEFB $10
 $F2C9 DEFB $11
 $F2CA DEFB $1C
 $F2CB DEFM "$"      ; }
; "UP."
 $F2CC DEFM "MH"     ; {#CALL:decode_screenlocstring($F2CC)
 $F2CE DEFB $03
 $F2CF DEFB $1D
 $F2D0 DEFB $18
 $F2D1 DEFM "$"      ; }
; "DOWN."
 $F2D2 DEFB $8D      ; {#CALL:decode_screenlocstring($F2D2)
 $F2D3 DEFM "H"
 $F2D4 DEFB $05
 $F2D5 DEFB $0D
 $F2D6 DEFB $00
 $F2D7 DEFB $1F
 $F2D8 DEFB $17
 $F2D9 DEFM "$"      ; }
; "FIRE."
 $F2DA DEFB $CD      ; {#CALL:decode_screenlocstring($F2DA)
 $F2DB DEFM "H"
 $F2DC DEFB $05
 $F2DD DEFB $0F
 $F2DE DEFB $12
 $F2DF DEFB $1A
 $F2E0 DEFB $0E      ; }

; byte_F2E1
;
; Unsure if anything reads this byte for real, but its address is taken prior
; to accessing keyboard_port_hi_bytes.
; .
; (<- choose_keys)
b$F2E1 DEFB $24

; keyboard_port_hi_bytes
;
; Zero terminated.
; .
; (<- choose_keys)
b$F2E2 DEFB $F7,$EF,$FB,$DF,$FD,$BF,$FE,$7F
 $F2EA DEFB $00

; counted_strings
;
; Counted strings (encoded to match font; first byte is count).
; .
; "ENTER"
t$F2EB DEFB $05      ; {#CALL:decode_stringcounted($F2EB)
 $F2EC DEFB $0E
 $F2ED DEFB $17
 $F2EE DEFB $1C
 $F2EF DEFB $0E
 $F2F0 DEFB $1A      ; }
; "CAPS"
 $F2F1 DEFB $04      ; {#CALL:decode_stringcounted($F2F1)
 $F2F2 DEFB $0C
 $F2F3 DEFB $0A
 $F2F4 DEFB $18
 $F2F5 DEFB $1B      ; }
; "SYMBOL"
 $F2F6 DEFB $06      ; {#CALL:decode_stringcounted($F2F6)
 $F2F7 DEFB $1B
 $F2F8 DEFM "!"
 $F2F9 DEFB $16
 $F2FA DEFB $0B
 $F2FB DEFB $00
 $F2FC DEFB $15      ; }
; "SPACE"
 $F2FD DEFB $05      ; {#CALL:decode_stringcounted($F2FD)
 $F2FE DEFB $1B
 $F2FF DEFB $18
 $F300 DEFB $0A
 $F301 DEFB $0C
 $F302 DEFB $0E      ; }

; key_tables
;
; Five bytes each.
b$F303 DEFB $01,$02,$03,$04,$05 ; table_12345
 $F308 DEFB $00,$09,$08,$07,$06 ; table_09876
 $F30D DEFB $19,$1F,$0E,$1A,$1C ; table_QWERT
 $F312 DEFB $18,$00,$12,$1D,$21 ; table_POIUY
 $F317 DEFB $0A,$1B,$0D,$0F,$10 ; table_ASDFG
 $F31C DEFB $80,$15,$14,$13,$11 ; table_ENTERLKJH
 $F321 DEFB $86,$22,$20,$0C,$1E ; table_SHIFTZXCV
 $F326 DEFB $92,$8B,$16,$17,$0B ; table_SPACESYMSHFTMNB

; key_name_screen_addrs
;
; Screen addresses of chosen key names (5 long).
w$F32B DEFW $40D5
 $F32D DEFW $4815
 $F32F DEFW $4855
 $F331 DEFW $4895
 $F333 DEFW $48D5

; wipe_game_window
;
; Used by the routine at #R$F350.
; .
; Wipe the game window.
c$F335 DI            ; DI
 $F336 LD ($EDD1),SP ; saved_sp = SP;
 $F33A LD SP,$EDD3   ; sp = game_window_start_addresses;
 $F33D LD A,$80      ; A = 128; // 128 rows
*$F33F POP HL        ; do <% POP HL // start address
 $F340 LD B,$17      ;   B = 23; // 23 columns
*$F342 LD (HL),$00   ;   do <% *HL = 0;
 $F344 INC L         ;     HL++;
 $F345 DJNZ $F342    ;   %> while (--B);
 $F347 DEC A         ; {%> while (--A);
 $F348 JP NZ,$F33F   ; }
 $F34B LD SP,($EDD1) ; SP = saved_sp;
 $F34F RET           ; return;

; choose_keys
;
; Used by the routine at #R$F271.
c$F350 CALL $F335    ; for (;;) <% wipe_game_window();
 $F353 LD A,$07      ; {
 $F355 CALL $A15F    ; set_game_window_attributes(attribute_WHITE_OVER_BLACK);}
; Draw key choice prompt strings.
 $F358 LD B,$06      ;   B = 6; // iterations
 $F35A LD HL,$F2AD   ;   HL = &define_key_prompts[0];
*$F35D PUSH BC       ;   do <% PUSH BC
 $F35E LD E,(HL)     ; {    E = *HL++;
 $F35F INC HL        ; }
 $F360 LD D,(HL)     ; {    D = *HL++;
 $F361 INC HL        ; }
 $F362 LD B,(HL)     ; {    B = *HL++; // iterations
 $F363 INC HL        ; }
*$F364 PUSH BC       ;     do <% PUSH BC
 $F365 LD A,(HL)     ;       A = *HL; // redundant
 $F366 CALL $7D2F    ;       plot_glyph();
 $F369 INC HL        ;       HL++;
 $F36A POP BC        ;       POP BC
 $F36B DJNZ $F364    ;     %> while (--B);
 $F36D POP BC        ;     POP BC
 $F36E DJNZ $F35D    ;   %> while (--B);
; Wipe keydefs.
 $F370 LD HL,$F06B   ;   HL = &keydefs[0];
 $F373 LD B,$0A      ;   B = 10; // iterations
 $F375 XOR A         ;   A = 0;
*$F376 LD (HL),A     ; {  do <% *HL++ = A;
 $F377 INC HL        ; }
 $F378 DJNZ $F376    ;   %> while (--B);
 $F37A LD B,$05      ;   B = 5; // iterations L/R/U/D/F
 $F37C LD HL,$F32B   ;   HL = &key_name_screen_addrs[0];
*$F37F PUSH BC       ;   do <% PUSH BC
 $F380 LD E,(HL)     ; {    E = *HL++;
 $F381 INC HL        ; }
 $F382 LD D,(HL)     ; {    D = *HL++;
 $F383 INC HL        ; }
 $F384 PUSH HL       ;     PUSH HL
 $F385 LD ($F3E9),DE ;     ($F3E9) = DE; // self modify screen addr
 $F389 LD A,$FF      ;     A = 0xFF;
*$F38B EX AF,AF'     ;     for (;;) <% -
 $F38C LD HL,$F2E1   ;       HL = &keyboard_port_hi_bytes[-1]; // &byte_F2E1
 $F38F LD D,$FF      ;       D = 0xFF;
*$F391 INC HL        ;       do <% HL++;
 $F392 INC D         ;         D++;
 $F393 LD A,(HL)     ;         Adash = *HL;
 $F394 OR A          ; {        if (Adash == 0) goto $F38B; // end of
 $F395 JR Z,$F38B    ; keyboard_port_hi_bytes}
 $F397 LD B,A        ;         B = Adash;
 $F398 LD C,$FE      ;         C = 0xFE;
 $F39A IN A,(C)      ;         IN Adash,(C)
 $F39C CPL           ;         Adash = ~Adash;
 $F39D LD E,A        ;         E = Adash;
 $F39E LD C,$20      ;         C = 0x20;
*$F3A0 SRL C         ;         C >>= 1;
 $F3A2 JR C,$F391    ;       %> while (carry);  // loop structure is not quite
                     ; right
 $F3A4 LD A,C        ; {      Adash = C & E;
 $F3A5 AND E         ; }
 $F3A6 JR Z,$F3A0    ;       if (Adash == 0) goto $F3A0;
 $F3A8 EX AF,AF'     ;       -
 $F3A9 OR A          ; {      if (A) goto $F38B;
 $F3AA JR NZ,$F38B   ; }
 $F3AC LD A,D        ;       A = D;
 $F3AD EX AF,AF'     ;       -
 $F3AE LD HL,$F06A   ;       HL = 0xF06A;
*$F3B1 INC HL        ;       HL++;
 $F3B2 LD A,(HL)     ;       Adash = *HL;
 $F3B3 OR A          ; {      if (Adash == 0) goto $F3C1;
 $F3B4 JR Z,$F3C1    ; }
 $F3B6 CP B          ;       if (A != B) ...
 $F3B7 INC HL        ;       HL++; // interleaved
 $F3B8 JR NZ,$F3B1   ;       ... goto $F3B1;
 $F3BA LD A,(HL)     ;       Adash = *HL;
 $F3BB CP C          ; {      if (A != C) goto $F3B1;
 $F3BC JR NZ,$F3B1   ; }
 $F3BE JP $F38B      ;     %>
; Assign key def.
*$F3C1 LD (HL),B     ; {    *HL++ = B;
 $F3C2 INC L         ; }
 $F3C3 LD (HL),C     ;     *HL = C;
 $F3C4 EX AF,AF'     ;     -
 $F3C5 LD B,A        ; {    A *= 5;
 $F3C6 ADD A,A       ;
 $F3C7 ADD A,A       ;
 $F3C8 ADD A,B       ; }
 $F3C9 LD HL,$F302   ;     HL = 0xF302;  // &key_tables[0] - 1 byte + A //
                     ; strange: off by one
 $F3CC ADD A,L       ; {    HL += A;
 $F3CD LD L,A        ;
 $F3CE JR NC,$F3D1   ;
 $F3D0 INC H         ; }
*$F3D1 INC HL        ;     HL++;
 $F3D2 RR C          ;     RR C
 $F3D4 JR NC,$F3D1   ;     JR NC,$F3D1
 $F3D6 LD B,$01      ;     B = 1;
 $F3D8 LD A,(HL)     ;     A = *HL;
 $F3D9 OR A          ;     A |= A;
 $F3DA JP P,$F3E8    ;     JP P,$F3E8
 $F3DD AND $7F       ;     A &= 0x7F;
 $F3DF LD DE,$F2EB   ; {    HL = &counted_strings[0] + A;
 $F3E2 LD L,A        ;
 $F3E3 LD H,$00      ;
 $F3E5 ADD HL,DE     ; }
 $F3E6 LD B,(HL)     ; {    B = *HL++;
 $F3E7 INC HL        ; }
*$F3E8 LD DE,$40D5   ;     DE = 0x40D5; // self modified // screen address
*$F3EB PUSH BC       ;     do <% PUSH BC
 $F3EC LD A,(HL)     ;       A = *HL; // Bug: Redundant.
 $F3ED CALL $7D2F    ;       plot_glyph();
 $F3F0 INC HL        ;       HL++;
 $F3F1 POP BC        ;       POP BC
 $F3F2 DJNZ $F3EB    ;     %> while (--B);
 $F3F4 POP HL        ;     POP HL
 $F3F5 POP BC        ;     POP BC
 $F3F6 DEC B         ; {  %> while (--B);
 $F3F7 JR NZ,$F37F   ; }
; Delay loop.
 $F3F9 LD BC,$FFFF   ;   BC = 0xFFFF;
*$F3FC DEC BC        ; {  while (--BC);
 $F3FD LD A,B        ;
 $F3FE OR C          ;
 $F3FF JR NZ,$F3FC   ; }
; Wait for user's input.
 $F401 CALL $EFFC    ;   user_confirm();
 $F404 RET Z         ;   if (Z) return; // confirmed
 $F405 JP NZ,$F350   ; %>

; set_menu_item_attributes
;
; Used by the routines at #R$F163 and #R$F271.
; .
; Set the screen attributes of the specified menu item.
;
; I:A Item index.
; I:E Attributes.
c$F408 LD HL,$590D   ; HL = 0x590D; // initial screen attribute address
; Skip to the item's row.
 $F40B AND A         ; {if (A) <%
 $F40C JR Z,$F415    ; }
 $F40E LD B,A        ;   B = A;
*$F40F LD A,L        ; {  do <% L += 32 * 2; %> while (--B); %> // skip two
 $F410 ADD A,$40     ; rows per iteration
 $F412 LD L,A        ;
 $F413 DJNZ $F40F    ; }
; Draw.
*$F415 LD B,$0A      ; B = 10;
*$F417 LD (HL),E     ; {do <% *HL++ = E; %> while (--B);
 $F418 INC L         ;
 $F419 DJNZ $F417    ; }
 $F41B RET           ; return;

; menu_keyscan
;
; Used by the routine at #R$F271.
; .
; Scan for keys to select an input device.
;
; O:A 0/1/2/3/4 = keypress, or 255 = no keypress.
c$F41C LD BC,$F7FE   ; BC = port_KEYBOARD_12345;
 $F41F LD E,$00      ; E = 0;
 $F421 IN A,(C)      ; IN A,(C)
 $F423 CPL           ; {A = ~A & 0x0F;
 $F424 AND $0F       ; }
 $F426 JR Z,$F432    ; if (A) <%
 $F428 LD B,$04      ;   B = 4; // iterations
*$F42A RRA           ;   do <% A >>= 1;
 $F42B INC E         ;     E++;
 $F42C JR C,$F430    ;     if (carry) goto found;
 $F42E DJNZ $F42A    ;   %> while (--B);
*$F430 LD A,E        ;   found: A = E;
 $F431 RET           ;   return; %> // 1..4
*$F432 LD B,$EF      ; else <% B = 0xEF; // port_KEYBOARD_09876
 $F434 IN A,(C)      ;   IN A,(C)
 $F436 AND $01       ;   A &= 1;
 $F438 LD A,E        ;   A = E; // interleaved
 $F439 RET Z         ;   if (Z) return; // always zero
 $F43A LD A,$FF      ;   A = 0xFF; // no keypress
 $F43C RET           ;   return; %>

; inputroutines
;
; Array [4] of pointers to input routines.
w$F43D DEFW $FE00    ; &inputroutine_keyboard,
 $F43F DEFW $FE7E    ; &inputroutine_kempston,
 $F441 DEFW $FECD    ; &inputroutine_sinclair,
 $F443 DEFW $FE47    ; &inputroutine_protek,

; chosen_input_device
;
; 0/1/2/3 keyboard/kempston/sinclair/protek
b$F445 DEFB $00

; key_choice_screenlocstrings
;
; Key choice screenlocstrings.
; .
; "CONTROLS"
t$F446 DEFB $8E      ; {#CALL:decode_screenlocstring($F446)
 $F447 DEFM "@"
 $F448 DEFB $08
 $F449 DEFB $0C
 $F44A DEFB $00
 $F44B DEFB $17
 $F44C DEFB $1C
 $F44D DEFB $1A
 $F44E DEFB $00
 $F44F DEFB $15
 $F450 DEFB $1B      ; }
; "0 SELECT"
 $F451 DEFB $CD      ; {#CALL:decode_screenlocstring($F451)
 $F452 DEFM "@"
 $F453 DEFB $08
 $F454 DEFB $00
 $F455 DEFM "#"
 $F456 DEFB $1B
 $F457 DEFB $0E
 $F458 DEFB $15
 $F459 DEFB $0E
 $F45A DEFB $0C
 $F45B DEFB $1C      ; }
; "1 KEYBOARD"
 $F45C DEFB $0D      ; {#CALL:decode_screenlocstring($F45C)
 $F45D DEFM "H"
 $F45E DEFB $0A
 $F45F DEFB $01
 $F460 DEFM "#"
 $F461 DEFB $14
 $F462 DEFB $0E
 $F463 DEFM "!"
 $F464 DEFB $0B
 $F465 DEFB $00
 $F466 DEFB $0A
 $F467 DEFB $1A
 $F468 DEFB $0D      ; }
; "2 KEMPSTON"
 $F469 DEFM "MH"     ; {#CALL:decode_screenlocstring($F469)
 $F46B DEFB $0A
 $F46C DEFB $02
 $F46D DEFM "#"
 $F46E DEFB $14
 $F46F DEFB $0E
 $F470 DEFB $16
 $F471 DEFB $18
 $F472 DEFB $1B
 $F473 DEFB $1C
 $F474 DEFB $00
 $F475 DEFB $17      ; }
; "3 SINCLAIR"
 $F476 DEFB $8D      ; {#CALL:decode_screenlocstring($F476)
 $F477 DEFM "H"
 $F478 DEFB $0A
 $F479 DEFB $03
 $F47A DEFM "#"
 $F47B DEFB $1B
 $F47C DEFB $12
 $F47D DEFB $17
 $F47E DEFB $0C
 $F47F DEFB $15
 $F480 DEFB $0A
 $F481 DEFB $12
 $F482 DEFB $1A      ; }
; "4 PROTEK"
 $F483 DEFB $CD      ; {#CALL:decode_screenlocstring($F483)
 $F484 DEFM "H"
 $F485 DEFB $08
 $F486 DEFB $04
 $F487 DEFM "#"
 $F488 DEFB $18
 $F489 DEFB $1A
 $F48A DEFB $00
 $F48B DEFB $1C
 $F48C DEFB $0E
 $F48D DEFB $14      ; }
; "BREAK OR CAPS AND SPACE"
 $F48E DEFB $07      ; {#CALL:decode_screenlocstring($F48E)
 $F48F DEFM "P"
 $F490 DEFB $17
 $F491 DEFB $0B
 $F492 DEFB $1A
 $F493 DEFB $0E
 $F494 DEFB $0A
 $F495 DEFB $14
 $F496 DEFM "#"
 $F497 DEFB $00
 $F498 DEFB $1A
 $F499 DEFM "#"
 $F49A DEFB $0C
 $F49B DEFB $0A
 $F49C DEFB $18
 $F49D DEFB $1B
 $F49E DEFM "#"
 $F49F DEFB $0A
 $F4A0 DEFB $17
 $F4A1 DEFB $0D
 $F4A2 DEFM "#"
 $F4A3 DEFB $1B
 $F4A4 DEFB $18
 $F4A5 DEFB $0A
 $F4A6 DEFB $0C
 $F4A7 DEFB $0E      ; }
; "FOR NEW GAME"
 $F4A8 DEFM ",P"     ; {#CALL:decode_screenlocstring($F4A8)
 $F4AA DEFB $0C
 $F4AB DEFB $0F
 $F4AC DEFB $00
 $F4AD DEFB $1A
 $F4AE DEFM "#"
 $F4AF DEFB $17
 $F4B0 DEFB $0E
 $F4B1 DEFB $1F
 $F4B2 DEFM "#"
 $F4B3 DEFB $10
 $F4B4 DEFB $0A
 $F4B5 DEFB $16
 $F4B6 DEFB $0E      ; }

; menu_screen
;
; Used by the routine at #R$F163.
; .
; Runs the menu screen.
; .
; Waits for user to select an input device, waves the morale flag and plays the
; title tune.
c$F4B7 CALL $F271    ; for (;;) <% check_menu_keys();
 $F4BA CALL $A035    ;   wave_morale_flag();
; Play music.
 $F4BD LD HL,($F541) ; {  HL = music_channel0_index + 1;
 $F4C0 INC HL        ; }
*$F4C1 LD ($F541),HL ;   for (;;) <% music_channel0_index = HL;
 $F4C4 LD DE,$F546   ; {    A = music_channel0_data[HL];
 $F4C7 ADD HL,DE     ;
 $F4C8 LD A,(HL)     ; }
 $F4C9 CP $FF        ; {    if (A != 0xFF) break; // end marker
 $F4CB JR NZ,$F4D2   ; }
 $F4CD LD HL,$0000   ;     HL = 0;
 $F4D0 JR $F4C1      ;   %>
*$F4D2 CALL $F52C    ;   get_tuning();
 $F4D5 EXX           ;   -
 $F4D6 LD HL,($F543) ; {  HLdash = music_channel1_index + 1;
 $F4D9 INC HL        ; }
*$F4DA LD ($F543),HL ;   for (;;) <% music_channel1_index = HLdash;
 $F4DD LD DE,$F7C7   ; {    A = music_channel1_data[HLdash];
 $F4E0 ADD HL,DE     ;
 $F4E1 LD A,(HL)     ; }
 $F4E2 CP $FF        ; {    if (A != 0xFF) break; // end marker
 $F4E4 JR NZ,$F4EB   ; }
 $F4E6 LD HL,$0000   ;     HLdash = 0;
 $F4E9 JR $F4DA      ;   %>
*$F4EB CALL $F52C    ;   get_tuning(); // using banked registers
 $F4EE LD A,B        ;   A = Bdash;
 $F4EF EXX           ;   -
 $F4F0 PUSH BC       ;   PUSH BC
 $F4F1 CP $FF        ; {  if (A == 0xFF) <%
 $F4F3 JR NZ,$F4FC   ; }
 $F4F5 EXX           ;     -
 $F4F6 POP BC        ;     POP BCdash
 $F4F7 LD E,C        ; {    DEdash = BCdash;
 $F4F8 LD D,B        ; }
 $F4F9 EXX           ;     - %>
 $F4FA JR $F4FD      ;   else <%
*$F4FC POP BC        ;     POP BC %>
*$F4FD LD A,$18      ;   A = 24; // overall tune speed (lower => faster)
*$F4FF EX AF,AF'     ;   do <% -
 $F500 LD H,$FF      ;     H = 0xFF; // iterations
*$F502 DJNZ $F510    ;     do <% if (--B == 0) <% // big-endian counting down?
 $F504 DEC C         ; {        if (--C == 0) <%
 $F505 JP NZ,$F510   ; }
 $F508 LD A,L        ; {          L ^= 16;
 $F509 XOR $10       ;
 $F50B LD L,A        ; }
 $F50C OUT ($FE),A   ;           OUT ($FE),L
 $F50E LD C,E        ; {          BC = DE; %> %>
 $F50F LD B,D        ; }
*$F510 EXX           ;       -
 $F511 DJNZ $F51F    ;       if (--Bdash == 0) <%
 $F513 DEC C         ; {        if (--Cdash == 0) <%
 $F514 JP NZ,$F51F   ; }
 $F517 LD A,L        ; {          Ldash ^= 16;
 $F518 XOR $10       ;
 $F51A LD L,A        ; }
 $F51B OUT ($FE),A   ;           OUT ($FE),Ldash
 $F51D LD C,E        ; {          BCdash = DEdash; %> %>
 $F51E LD B,D        ; }
*$F51F EXX           ;       -
 $F520 DEC H         ; {    %> while (--H);
 $F521 JP NZ,$F502   ; }
 $F524 EX AF,AF'     ;     -
 $F525 DEC A         ; {  %> while (--A);
 $F526 JP NZ,$F4FF   ; }
 $F529 JP $F4B7      ; %>

; get_tuning
;
; Used by the routine at #R$F4B7.
;
; I:A  Index.
; O:BC ...
; O:DE ...
; O:HL ...
c$F52C ADD A,A       ; {BC = music_tuning_table[A];
 $F52D LD HL,$FA48   ;
 $F530 LD E,A        ;
 $F531 LD D,$00      ;
 $F533 ADD HL,DE     ;
 $F534 LD B,(HL)     ;
 $F535 INC HL        ;
 $F536 LD C,(HL)     ; }
 $F537 INC C         ; C++;
 $F538 INC B         ; B++;
 $F539 JR NZ,$F53C   ; {if (B == 0) C++; // big-endian 16-bit add?
 $F53B INC C         ; }
*$F53C LD L,$00      ; L = 0;
 $F53E LD D,B        ; {DE = BC;
 $F53F LD E,C        ; }
 $F540 RET           ; return;

; music_channel0_index
w$F541 DEFW $0000

; music_channel1_index
w$F543 DEFW $0000

; unknown/unused
b$F545 DEFB $00

; music_channel0_data
b$F546 DEFB $13,$00,$14,$00,$00,$15,$16,$00
 $F54E DEFB $1B,$00,$00,$00,$00,$00,$00,$00
 $F556 DEFB $16,$00,$1F,$00,$00,$1D,$1B,$00
 $F55E DEFB $18,$00,$00,$00,$00,$00,$00,$00
 $F566 DEFB $00,$00,$00,$00,$00,$00,$1D,$00
 $F56E DEFB $00,$00,$1D,$00,$00,$1B,$1A,$00
 $F576 DEFB $1B,$00,$1A,$00,$18,$00,$16,$00
 $F57E DEFB $13,$00,$00,$00,$00,$00,$00,$00
 $F586 DEFB $13,$00,$14,$00,$00,$15,$16,$00
 $F58E DEFB $1B,$00,$00,$00,$00,$00,$00,$00
 $F596 DEFB $16,$00,$1F,$00,$00,$1D,$1B,$00
 $F59E DEFB $18,$00,$00,$00,$00,$00,$00,$00
 $F5A6 DEFB $00,$00,$00,$00,$00,$00,$1D,$00
 $F5AE DEFB $00,$00,$1D,$00,$00,$1B,$1A,$00
 $F5B6 DEFB $16,$00,$00,$00,$1D,$00,$1B,$00
 $F5BE DEFB $00,$00,$1F,$00,$00,$1D,$1B,$00
 $F5C6 DEFB $19,$00,$18,$00,$16,$00,$1B,$00
 $F5CE DEFB $00,$00,$1B,$00,$1D,$00,$1B,$00
 $F5D6 DEFB $19,$00,$18,$00,$19,$00,$1B,$00
 $F5DE DEFB $00,$00,$24,$00,$00,$00,$24,$00
 $F5E6 DEFB $00,$00,$22,$00,$00,$00,$20,$00
 $F5EE DEFB $00,$00,$00,$00,$00,$00,$1D,$00
 $F5F6 DEFB $00,$00,$00,$00,$00,$00,$1B,$00
 $F5FE DEFB $00,$00,$1B,$00,$00,$1D,$1B,$00
 $F606 DEFB $19,$00,$18,$00,$16,$00,$1B,$00
 $F60E DEFB $00,$00,$1B,$00,$1D,$00,$1B,$00
 $F616 DEFB $19,$00,$18,$00,$19,$00,$1B,$00
 $F61E DEFB $00,$00,$24,$00,$00,$00,$20,$00
 $F626 DEFB $1F,$00,$20,$00,$21,$00,$22,$00
 $F62E DEFB $00,$00,$1D,$00,$00,$00,$1F,$00
 $F636 DEFB $00,$00,$20,$00,$00,$00,$22,$00
 $F63E DEFB $00,$00,$22,$00,$00,$20,$1F,$00
 $F646 DEFB $1B,$00,$1D,$00,$1F,$00,$20,$00
 $F64E DEFB $00,$00,$00,$00,$22,$00,$24,$00
 $F656 DEFB $00,$00,$20,$00,$00,$00,$1F,$00
 $F65E DEFB $20,$00,$22,$00,$1B,$1D,$1F,$00
 $F666 DEFB $20,$00,$22,$00,$24,$00,$25,$00
 $F66E DEFB $00,$00,$22,$00,$00,$00,$24,$00
 $F676 DEFB $00,$00,$20,$00,$00,$00,$22,$00
 $F67E DEFB $00,$00,$1B,$00,$00,$1D,$1B,$00
 $F686 DEFB $19,$00,$18,$00,$19,$00,$1B,$00
 $F68E DEFB $00,$00,$1B,$00,$1D,$00,$1B,$00
 $F696 DEFB $19,$00,$18,$00,$19,$00,$1B,$00
 $F69E DEFB $00,$00,$27,$00,$00,$00,$27,$00
 $F6A6 DEFB $00,$00,$25,$00,$00,$00,$24,$00
 $F6AE DEFB $1B,$1B,$1A,$00,$1B,$00,$22,$00
 $F6B6 DEFB $1B,$1B,$1A,$00,$1B,$00,$20,$00
 $F6BE DEFB $1B,$00,$18,$00,$1B,$00,$14,$00
 $F6C6 DEFB $1D,$00,$1E,$00,$1F,$00,$20,$00
 $F6CE DEFB $00,$00,$20,$00,$00,$00,$00,$00
 $F6D6 DEFB $20,$00,$22,$00,$24,$00,$25,$00
 $F6DE DEFB $00,$00,$29,$00,$00,$00,$00,$00
 $F6E6 DEFB $00,$00,$29,$00,$27,$00,$25,$00
 $F6EE DEFB $00,$00,$22,$00,$00,$00,$00,$00
 $F6F6 DEFB $00,$00,$25,$00,$00,$00,$20,$00
 $F6FE DEFB $00,$00,$20,$00,$00,$22,$20,$00
 $F706 DEFB $1E,$00,$1D,$00,$1E,$00,$20,$00
 $F70E DEFB $00,$00,$20,$00,$00,$00,$20,$00
 $F716 DEFB $20,$00,$22,$00,$24,$00,$25,$00
 $F71E DEFB $00,$00,$29,$00,$00,$00,$00,$00
 $F726 DEFB $24,$00,$25,$00,$26,$00,$27,$00
 $F72E DEFB $00,$00,$22,$00,$00,$00,$24,$00
 $F736 DEFB $00,$00,$25,$00,$00,$00,$27,$00
 $F73E DEFB $00,$00,$27,$00,$00,$29,$27,$00
 $F746 DEFB $25,$00,$24,$00,$22,$00,$20,$00
 $F74E DEFB $00,$00,$20,$00,$00,$00,$20,$00
 $F756 DEFB $20,$00,$22,$00,$24,$00,$25,$00
 $F75E DEFB $00,$00,$29,$00,$00,$00,$00,$00
 $F766 DEFB $25,$00,$27,$00,$29,$00,$2A,$00
 $F76E DEFB $00,$00,$22,$00,$00,$00,$25,$00
 $F776 DEFB $00,$00,$2A,$00,$00,$00,$29,$00
 $F77E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F786 DEFB $00,$00,$25,$00,$27,$00,$29,$00
 $F78E DEFB $00,$00,$29,$00,$00,$00,$29,$00
 $F796 DEFB $25,$00,$27,$00,$25,$00,$22,$00
 $F79E DEFB $00,$00,$00,$00,$00,$00,$20,$00
 $F7A6 DEFB $00,$00,$25,$00,$00,$00,$29,$00
 $F7AE DEFB $00,$00,$25,$00,$00,$00,$00,$00
 $F7B6 DEFB $00,$00,$27,$00,$00,$00,$25,$00
 $F7BE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F7C6 DEFB $FF

; music_channel1_data
b$F7C7 DEFB $0A,$00,$0C,$00,$00,$0E,$0F,$00
 $F7CF DEFB $13,$00,$0A,$00,$13,$00,$0F,$00
 $F7D7 DEFB $13,$00,$0A,$00,$13,$00,$14,$00
 $F7DF DEFB $18,$00,$0F,$00,$18,$00,$14,$00
 $F7E7 DEFB $18,$00,$14,$00,$15,$00,$16,$00
 $F7EF DEFB $1A,$00,$11,$00,$1A,$00,$16,$00
 $F7F7 DEFB $1A,$00,$11,$00,$1A,$00,$0F,$00
 $F7FF DEFB $13,$00,$00,$00,$00,$00,$00,$00
 $F807 DEFB $0A,$00,$0C,$00,$00,$0E,$0F,$00
 $F80F DEFB $13,$00,$0A,$00,$13,$00,$0F,$00
 $F817 DEFB $13,$00,$0A,$00,$13,$00,$14,$00
 $F81F DEFB $18,$00,$0F,$00,$18,$00,$14,$00
 $F827 DEFB $18,$00,$14,$00,$15,$00,$16,$00
 $F82F DEFB $1A,$00,$11,$00,$1A,$00,$16,$00
 $F837 DEFB $1A,$00,$11,$00,$1A,$00,$0F,$00
 $F83F DEFB $13,$00,$0A,$00,$13,$00,$0F,$00
 $F847 DEFB $13,$00,$0A,$00,$13,$00,$14,$00
 $F84F DEFB $18,$00,$0F,$00,$18,$00,$14,$00
 $F857 DEFB $18,$00,$0F,$00,$18,$00,$14,$00
 $F85F DEFB $18,$00,$0F,$00,$18,$00,$14,$00
 $F867 DEFB $14,$00,$16,$00,$18,$00,$0D,$00
 $F86F DEFB $11,$00,$08,$00,$11,$00,$0D,$00
 $F877 DEFB $11,$00,$08,$00,$11,$00,$14,$00
 $F87F DEFB $18,$00,$0F,$00,$18,$00,$14,$00
 $F887 DEFB $0F,$00,$11,$00,$13,$00,$14,$00
 $F88F DEFB $18,$00,$0F,$00,$18,$00,$14,$00
 $F897 DEFB $18,$00,$0F,$00,$18,$00,$14,$00
 $F89F DEFB $18,$00,$0F,$00,$18,$00,$14,$00
 $F8A7 DEFB $0F,$00,$14,$00,$15,$00,$16,$00
 $F8AF DEFB $1A,$00,$11,$00,$1A,$00,$16,$00
 $F8B7 DEFB $1A,$00,$11,$00,$1A,$00,$0F,$00
 $F8BF DEFB $13,$00,$0A,$00,$13,$00,$0F,$00
 $F8C7 DEFB $13,$00,$0A,$00,$13,$00,$14,$00
 $F8CF DEFB $18,$00,$0F,$00,$18,$00,$14,$00
 $F8D7 DEFB $18,$00,$0F,$00,$14,$00,$13,$00
 $F8DF DEFB $16,$00,$0F,$00,$13,$00,$0A,$00
 $F8E7 DEFB $13,$00,$16,$00,$18,$00,$19,$00
 $F8EF DEFB $14,$00,$11,$00,$19,$00,$18,$00
 $F8F7 DEFB $14,$00,$0F,$00,$18,$00,$13,$00
 $F8FF DEFB $16,$00,$0F,$00,$13,$00,$0A,$00
 $F907 DEFB $13,$00,$0F,$00,$13,$00,$14,$00
 $F90F DEFB $18,$00,$0F,$00,$18,$00,$14,$00
 $F917 DEFB $18,$00,$0F,$00,$18,$00,$14,$00
 $F91F DEFB $18,$00,$0F,$00,$18,$00,$14,$00
 $F927 DEFB $18,$00,$0F,$00,$18,$00,$14,$00
 $F92F DEFB $18,$00,$0F,$00,$18,$00,$13,$00
 $F937 DEFB $16,$00,$0F,$00,$16,$00,$14,$00
 $F93F DEFB $18,$00,$0F,$00,$18,$00,$14,$00
 $F947 DEFB $00,$00,$00,$00,$00,$00,$0D,$00
 $F94F DEFB $11,$00,$08,$00,$11,$00,$0D,$00
 $F957 DEFB $11,$00,$08,$00,$11,$00,$0D,$00
 $F95F DEFB $11,$00,$08,$00,$11,$00,$0D,$00
 $F967 DEFB $11,$00,$0F,$00,$11,$00,$12,$00
 $F96F DEFB $16,$00,$0D,$00,$16,$00,$12,$00
 $F977 DEFB $16,$00,$0D,$00,$16,$00,$0D,$00
 $F97F DEFB $11,$00,$08,$00,$11,$00,$0D,$00
 $F987 DEFB $08,$00,$0A,$00,$0C,$00,$0D,$00
 $F98F DEFB $11,$00,$08,$00,$11,$00,$0D,$00
 $F997 DEFB $11,$00,$08,$00,$11,$00,$0D,$00
 $F99F DEFB $11,$00,$08,$00,$11,$00,$0D,$00
 $F9A7 DEFB $11,$00,$0D,$00,$0E,$00,$0F,$00
 $F9AF DEFB $13,$00,$0A,$00,$13,$00,$0F,$00
 $F9B7 DEFB $13,$00,$0A,$00,$13,$00,$14,$00
 $F9BF DEFB $18,$00,$0F,$00,$18,$00,$14,$00
 $F9C7 DEFB $08,$00,$0A,$00,$0C,$00,$0D,$00
 $F9CF DEFB $11,$00,$08,$00,$11,$00,$0D,$00
 $F9D7 DEFB $11,$00,$0A,$00,$11,$00,$0D,$00
 $F9DF DEFB $11,$00,$08,$00,$11,$00,$0D,$00
 $F9E7 DEFB $0D,$00,$0F,$00,$11,$00,$12,$00
 $F9EF DEFB $16,$00,$0D,$00,$16,$00,$12,$00
 $F9F7 DEFB $16,$00,$12,$00,$12,$00,$11,$00
 $F9FF DEFB $15,$00,$0C,$00,$15,$00,$11,$00
 $FA07 DEFB $15,$00,$11,$00,$0C,$00,$0D,$00
 $FA0F DEFB $11,$00,$08,$00,$11,$00,$0D,$00
 $FA17 DEFB $11,$00,$08,$00,$11,$00,$12,$00
 $FA1F DEFB $16,$00,$0D,$00,$16,$00,$0D,$00
 $FA27 DEFB $11,$00,$08,$00,$11,$00,$0D,$00
 $FA2F DEFB $11,$00,$08,$00,$11,$00,$0F,$00
 $FA37 DEFB $08,$00,$0A,$00,$0C,$00,$0D,$00
 $FA3F DEFB $11,$00,$08,$00,$11,$00,$0D,$00
 $FA47 DEFB $FF

; music_tuning_table
w$FA48 DEFW $FEFE
 $FA4A DEFW $0000
 $FA4C DEFW $0000
 $FA4E DEFW $0000
 $FA50 DEFW $0000
 $FA52 DEFW $0218
 $FA54 DEFW $01FA
 $FA56 DEFW $01DE
 $FA58 DEFW $01C3
 $FA5A DEFW $01A9
 $FA5C DEFW $0192
 $FA5E DEFW $017B
 $FA60 DEFW $0166
 $FA62 DEFW $0152
 $FA64 DEFW $013F
 $FA66 DEFW $012D
 $FA68 DEFW $011C
 $FA6A DEFW $010C
 $FA6C DEFW $00FD
 $FA6E DEFW $00EF
 $FA70 DEFW $00E1
 $FA72 DEFW $00D5
 $FA74 DEFW $00C9
 $FA76 DEFW $00BE
 $FA78 DEFW $00B3
 $FA7A DEFW $00A9
 $FA7C DEFW $009F
 $FA7E DEFW $0096
 $FA80 DEFW $008E
 $FA82 DEFW $0086
 $FA84 DEFW $007E
 $FA86 DEFW $0077
 $FA88 DEFW $0071
 $FA8A DEFW $006A
 $FA8C DEFW $0064
 $FA8E DEFW $005F
 $FA90 DEFW $0059
 $FA92 DEFW $0054
 $FA94 DEFW $0050
 $FA96 DEFW $004B
 $FA98 DEFW $0047
 $FA9A DEFW $0043
 $FA9C DEFW $003F
 $FA9E DEFW $003C
 $FAA0 DEFW $0038
 $FAA2 DEFW $0035
 $FAA4 DEFW $0032
 $FAA6 DEFW $002F
 $FAA8 DEFW $002D
 $FAAA DEFW $002A
 $FAAC DEFW $0028
 $FAAE DEFW $0026
 $FAB0 DEFW $0023
 $FAB2 DEFW $0021
 $FAB4 DEFW $0020
 $FAB6 DEFW $001E
 $FAB8 DEFW $001C
 $FABA DEFW $001B
 $FABC DEFW $0019
 $FABE DEFW $0018
 $FAC0 DEFW $0016
 $FAC2 DEFW $0015
 $FAC4 DEFW $0014
 $FAC6 DEFW $0013
 $FAC8 DEFW $0012
 $FACA DEFW $0011
 $FACC DEFW $0000
 $FACE DEFW $0000
 $FAD0 DEFW $0000
 $FAD2 DEFW $0000
 $FAD4 DEFW $0000
 $FAD6 DEFW $0000
 $FAD8 DEFW $0000
 $FADA DEFW $0000
 $FADC DEFW $0000
 $FADE DEFW $0000
 $FAE0 DEFW $0F00
 $FAE2 DEFW $1800
 $FAE4 DEFW $1400
 $FAE6 DEFW $1800
 $FAE8 DEFW $1400
 $FAEA DEFW $1500
 $FAEC DEFW $1600
 $FAEE DEFW $1A00
 $FAF0 DEFW $1100
 $FAF2 DEFW $1A00
 $FAF4 DEFW $1600
 $FAF6 DEFW $1A00
 $FAF8 DEFW $1100
 $FAFA DEFW $1A00
 $FAFC DEFW $0F00
 $FAFE DEFW $1300
 $FB00 DEFW $0000
 $FB02 DEFW $0000
 $FB04 DEFW $0000
 $FB06 DEFW $0A00
 $FB08 DEFW $0C00
 $FB0A DEFW $0000
 $FB0C DEFW $0F0E
 $FB0E DEFW $1300
 $FB10 DEFW $0A00
 $FB12 DEFW $1300
 $FB14 DEFW $0F00
 $FB16 DEFW $1300
 $FB18 DEFW $0A00
 $FB1A DEFW $1300
 $FB1C DEFW $1400
 $FB1E DEFW $1800
 $FB20 DEFW $0F00
 $FB22 DEFW $1800
 $FB24 DEFW $1400
 $FB26 DEFW $1800
 $FB28 DEFW $1400
 $FB2A DEFW $1500
 $FB2C DEFW $1600
 $FB2E DEFW $1A00
 $FB30 DEFW $1100
 $FB32 DEFW $1A00
 $FB34 DEFW $1600
 $FB36 DEFW $1A00
 $FB38 DEFW $1100
 $FB3A DEFW $1A00
 $FB3C DEFW $0F00
 $FB3E DEFW $1300
 $FB40 DEFW $0A00
 $FB42 DEFW $1300
 $FB44 DEFW $0F00
 $FB46 DEFW $1300
 $FB48 DEFW $0A00
 $FB4A DEFW $1300
 $FB4C DEFW $1400
 $FB4E DEFW $1800
 $FB50 DEFW $0F00
 $FB52 DEFW $1800
 $FB54 DEFW $1400
 $FB56 DEFW $1800
 $FB58 DEFW $0F00
 $FB5A DEFW $1800
 $FB5C DEFW $1400
 $FB5E DEFW $1800
 $FB60 DEFW $0F00
 $FB62 DEFW $1800
 $FB64 DEFW $1400
 $FB66 DEFW $1400
 $FB68 DEFW $1600
 $FB6A DEFW $1800
 $FB6C DEFW $0D00
 $FB6E DEFW $1100
 $FB70 DEFW $0800
 $FB72 DEFW $1100
 $FB74 DEFW $0D00
 $FB76 DEFW $1100
 $FB78 DEFW $0800
 $FB7A DEFW $1100
 $FB7C DEFW $1400
 $FB7E DEFW $1800
 $FB80 DEFW $0F00
 $FB82 DEFW $1800
 $FB84 DEFW $1400
 $FB86 DEFW $0F00
 $FB88 DEFW $1100
 $FB8A DEFW $1300
 $FB8C DEFW $1400
 $FB8E DEFW $1800
 $FB90 DEFW $0F00
 $FB92 DEFW $1800
 $FB94 DEFW $1400
 $FB96 DEFW $1800
 $FB98 DEFW $0F00
 $FB9A DEFW $1800
 $FB9C DEFW $1400
 $FB9E DEFW $1800
 $FBA0 DEFW $0F00
 $FBA2 DEFW $1800
 $FBA4 DEFW $1400
 $FBA6 DEFW $0F00
 $FBA8 DEFW $1400
 $FBAA DEFW $1500
 $FBAC DEFW $1600
 $FBAE DEFW $1A00
 $FBB0 DEFW $1100
 $FBB2 DEFW $1A00
 $FBB4 DEFW $1600
 $FBB6 DEFW $1A00
 $FBB8 DEFW $1100
 $FBBA DEFW $1A00
 $FBBC DEFW $0F00
 $FBBE DEFW $1300
 $FBC0 DEFW $0A00
 $FBC2 DEFW $1300
 $FBC4 DEFW $0F00
 $FBC6 DEFW $1300
 $FBC8 DEFW $0A00
 $FBCA DEFW $1300
 $FBCC DEFW $1400
 $FBCE DEFW $1800
 $FBD0 DEFW $0F00
 $FBD2 DEFW $1800
 $FBD4 DEFW $1400
 $FBD6 DEFW $1800
 $FBD8 DEFW $0F00
 $FBDA DEFW $1400
 $FBDC DEFW $1300
 $FBDE DEFW $1600
 $FBE0 DEFW $0F00
 $FBE2 DEFW $1300
 $FBE4 DEFW $0A00
 $FBE6 DEFW $1300
 $FBE8 DEFW $1600
 $FBEA DEFW $1800
 $FBEC DEFW $1900
 $FBEE DEFW $1400
 $FBF0 DEFW $1100
 $FBF2 DEFW $1900
 $FBF4 DEFW $1800
 $FBF6 DEFW $1400
 $FBF8 DEFW $0F00
 $FBFA DEFW $1800
 $FBFC DEFW $1300
 $FBFE DEFW $1600
 $FC00 DEFW $0F00
 $FC02 DEFW $1300
 $FC04 DEFW $0A00
 $FC06 DEFW $1300
 $FC08 DEFW $0F00
 $FC0A DEFW $1300
 $FC0C DEFW $1400
 $FC0E DEFW $1800
 $FC10 DEFW $0F00
 $FC12 DEFW $1800
 $FC14 DEFW $1400
 $FC16 DEFW $1800
 $FC18 DEFW $0F00
 $FC1A DEFW $1800
 $FC1C DEFW $1400
 $FC1E DEFW $1800
 $FC20 DEFW $0F00
 $FC22 DEFW $1800
 $FC24 DEFW $1400
 $FC26 DEFW $1800
 $FC28 DEFW $0F00
 $FC2A DEFW $1800
 $FC2C DEFW $1400
 $FC2E DEFW $1800
 $FC30 DEFW $0F00
 $FC32 DEFW $1800
 $FC34 DEFW $1300
 $FC36 DEFW $1600
 $FC38 DEFW $0F00
 $FC3A DEFW $1600
 $FC3C DEFW $1400
 $FC3E DEFW $1800
 $FC40 DEFW $0F00
 $FC42 DEFW $1800
 $FC44 DEFW $1400
 $FC46 DEFW $0000
 $FC48 DEFW $0000
 $FC4A DEFW $0000
 $FC4C DEFW $0D00
 $FC4E DEFW $1100
 $FC50 DEFW $0800
 $FC52 DEFW $1100
 $FC54 DEFW $0D00
 $FC56 DEFW $1100
 $FC58 DEFW $0800
 $FC5A DEFW $1100
 $FC5C DEFW $0D00
 $FC5E DEFW $1100
 $FC60 DEFW $0800
 $FC62 DEFW $1100
 $FC64 DEFW $0D00
 $FC66 DEFW $1100
 $FC68 DEFW $0F00
 $FC6A DEFW $1100
 $FC6C DEFW $1200
 $FC6E DEFW $1600
 $FC70 DEFW $0D00
 $FC72 DEFW $1600
 $FC74 DEFW $1200
 $FC76 DEFW $1600
 $FC78 DEFW $0D00
 $FC7A DEFW $1600
 $FC7C DEFW $0D00
 $FC7E DEFW $1100
 $FC80 DEFW $0800
 $FC82 DEFW $1100
 $FC84 DEFW $0D00
 $FC86 DEFW $0800
 $FC88 DEFW $0A00
 $FC8A DEFW $0C00
 $FC8C DEFW $0D00
 $FC8E DEFW $1100
 $FC90 DEFW $0800
 $FC92 DEFW $1100
 $FC94 DEFW $0D00
 $FC96 DEFW $1100
 $FC98 DEFW $0800
 $FC9A DEFW $1100
 $FC9C DEFW $0D00
 $FC9E DEFW $1100
 $FCA0 DEFW $0800
 $FCA2 DEFW $1100
 $FCA4 DEFW $0D00
 $FCA6 DEFW $1100
 $FCA8 DEFW $0D00
 $FCAA DEFW $0E00
 $FCAC DEFW $0F00
 $FCAE DEFW $1300
 $FCB0 DEFW $0A00
 $FCB2 DEFW $1300
 $FCB4 DEFW $0F00
 $FCB6 DEFW $1300
 $FCB8 DEFW $0A00
 $FCBA DEFW $1300
 $FCBC DEFW $1400
 $FCBE DEFW $1800
 $FCC0 DEFW $0F00
 $FCC2 DEFW $1800
 $FCC4 DEFW $1400
 $FCC6 DEFW $0800
 $FCC8 DEFW $0A00
 $FCCA DEFW $0C00
 $FCCC DEFW $0D00
 $FCCE DEFW $1100
 $FCD0 DEFW $0800
 $FCD2 DEFW $1100
 $FCD4 DEFW $0D00
 $FCD6 DEFW $1100
 $FCD8 DEFW $0A00
 $FCDA DEFW $1100
 $FCDC DEFW $0D00
 $FCDE DEFW $1100
 $FCE0 DEFW $0800
 $FCE2 DEFW $1100
 $FCE4 DEFW $0D00
 $FCE6 DEFW $0D00
 $FCE8 DEFW $0F00
 $FCEA DEFW $1100
 $FCEC DEFW $1200
 $FCEE DEFW $1600
 $FCF0 DEFW $0D00
 $FCF2 DEFW $1600
 $FCF4 DEFW $1200
 $FCF6 DEFW $1600
 $FCF8 DEFW $1200
 $FCFA DEFW $1200
 $FCFC DEFW $1100
 $FCFE DEFW $1500
 $FD00 DEFW $0C00
 $FD02 DEFW $1500
 $FD04 DEFW $1100
 $FD06 DEFW $1500
 $FD08 DEFW $1100
 $FD0A DEFW $0C00
 $FD0C DEFW $0D00
 $FD0E DEFW $1100
 $FD10 DEFW $0800
 $FD12 DEFW $1100
 $FD14 DEFW $0D00
 $FD16 DEFW $1100
 $FD18 DEFW $0800
 $FD1A DEFW $1100
 $FD1C DEFW $1200
 $FD1E DEFW $1600
 $FD20 DEFW $0D00
 $FD22 DEFW $1600
 $FD24 DEFW $0D00
 $FD26 DEFW $1100
 $FD28 DEFW $0800
 $FD2A DEFW $1100
 $FD2C DEFW $0D00
 $FD2E DEFW $1100
 $FD30 DEFW $0800
 $FD32 DEFW $1100
 $FD34 DEFW $0F00
 $FD36 DEFW $0800
 $FD38 DEFW $0A00
 $FD3A DEFW $0C00
 $FD3C DEFW $0D00
 $FD3E DEFW $1100
 $FD40 DEFW $0800
 $FD42 DEFW $1100
 $FD44 DEFW $0D00
 $FD46 DEFW $FF00
 $FD48 DEFW $FEFE
 $FD4A DEFW $0000
 $FD4C DEFW $0000
 $FD4E DEFW $0000
 $FD50 DEFW $0000
 $FD52 DEFW $0218
 $FD54 DEFW $01FA
 $FD56 DEFW $01DE
 $FD58 DEFW $01C3
 $FD5A DEFW $01A9
 $FD5C DEFW $0192
 $FD5E DEFW $017B
 $FD60 DEFW $0166
 $FD62 DEFW $0152
 $FD64 DEFW $013F
 $FD66 DEFW $012D
 $FD68 DEFW $011C
 $FD6A DEFW $010C
 $FD6C DEFW $00FD
 $FD6E DEFW $00EF
 $FD70 DEFW $00E1
 $FD72 DEFW $00D5
 $FD74 DEFW $00C9
 $FD76 DEFW $00BE
 $FD78 DEFW $00B3
 $FD7A DEFW $00A9
 $FD7C DEFW $009F
 $FD7E DEFW $0096
 $FD80 DEFW $008E
 $FD82 DEFW $0086
 $FD84 DEFW $007E
 $FD86 DEFW $0077
 $FD88 DEFW $0071
 $FD8A DEFW $006A
 $FD8C DEFW $0064
 $FD8E DEFW $005F
 $FD90 DEFW $0059
 $FD92 DEFW $0054
 $FD94 DEFW $0050
 $FD96 DEFW $004B
 $FD98 DEFW $0047
 $FD9A DEFW $0043
 $FD9C DEFW $003F
 $FD9E DEFW $003C
 $FDA0 DEFW $0038
 $FDA2 DEFW $0035
 $FDA4 DEFW $0032
 $FDA6 DEFW $002F
 $FDA8 DEFW $002D
 $FDAA DEFW $002A
 $FDAC DEFW $0028
 $FDAE DEFW $0026
 $FDB0 DEFW $0023
 $FDB2 DEFW $0021
 $FDB4 DEFW $0020
 $FDB6 DEFW $001E
 $FDB8 DEFW $001C
 $FDBA DEFW $001B
 $FDBC DEFW $0019
 $FDBE DEFW $0018
 $FDC0 DEFW $0016
 $FDC2 DEFW $0015
 $FDC4 DEFW $0014
 $FDC6 DEFW $0013
 $FDC8 DEFW $0012
 $FDCA DEFW $0011
 $FDCC DEFW $0000
 $FDCE DEFW $0000
 $FDD0 DEFW $0000
 $FDD2 DEFW $0000
 $FDD4 DEFW $0000
 $FDD6 DEFW $0000
 $FDD8 DEFW $0000
 $FDDA DEFW $0000
 $FDDC DEFW $0000
 $FDDE DEFW $0000

; unused_FDE0
;
; Unreferenced byte.
u$FDE0 DEFB $C9

; loaded
;
; Very first entry point used to shunt the game image down into its proper
; position.
c$FDE1 DI            ; Disable interrupts.
 $FDE2 LD SP,$FFFF   ; SP = 0xFFFF;
 $FDE5 LD BC,$9FE0   ; {memmove(0x5B00, 0x5E00, 0x9FE0);
 $FDE8 LD HL,$5E00   ;
 $FDEB LD DE,$5B00   ;
 $FDEE LDIR          ; }
 $FDF0 JP $F068      ; goto jump_to_main; // exit via

; unused_FDF3
;
; Unreferenced bytes.
s$FDF3 DEFS $0D

; inputroutine_keyboard
;
; Input routine for keyboard.
;
; O:A Input value (as per enum input).
c$FE00 LD HL,$F06B   ; HL = keydefs; // pairs of bytes (port high byte, key
                     ; mask)
 $FE03 LD C,$FE      ; C = 0xFE; // port 0xXXFE
; Left/right.
 $FE05 LD B,(HL)     ; {B = *HL++;
 $FE06 INC HL        ; }
 $FE07 IN A,(C)      ; IN A,(C)
 $FE09 CPL           ; {A = ~A & *HL++;
 $FE0A AND (HL)      ;
 $FE0B INC HL        ; }
 $FE0C JR Z,$FE14    ; if (A) <%
 $FE0E INC HL        ; {  HL += 2; // skip right keydef
 $FE0F INC HL        ; }
 $FE10 LD E,$03      ;   E = input_LEFT;
 $FE12 JR $FE22      ; %>
*$FE14 LD B,(HL)     ; {else <% B = *HL++;
 $FE15 INC HL        ; }
 $FE16 IN A,(C)      ;   IN A,(C)
 $FE18 CPL           ; {  A = ~A & *HL++;
 $FE19 AND (HL)      ;
 $FE1A INC HL        ; }
 $FE1B JR Z,$FE21    ;   if (A) <%
 $FE1D LD E,$06      ;     E = input_RIGHT;
 $FE1F JR $FE22      ;   %>
*$FE21 LD E,A        ;   else <% E = A; %> %>
; Up/down.
*$FE22 LD B,(HL)     ; {B = *HL++;
 $FE23 INC HL        ; }
 $FE24 IN A,(C)      ; IN A,(C)
 $FE26 CPL           ; {A = ~A & *HL++;
 $FE27 AND (HL)      ;
 $FE28 INC HL        ; }
 $FE29 JR Z,$FE30    ; if (A) <%
 $FE2B INC HL        ; {  HL += 2; // skip down keydef
 $FE2C INC HL        ; }
 $FE2D INC E         ;   E += input_UP;
 $FE2E JR $FE3B      ; %>
*$FE30 LD B,(HL)     ; {else <% B = *HL++;
 $FE31 INC HL        ; }
 $FE32 IN A,(C)      ;   IN A,(C)
 $FE34 CPL           ; {  A = ~A & *HL++;
 $FE35 AND (HL)      ;
 $FE36 INC HL        ; }
 $FE37 JR Z,$FE3B    ;   if (A) <%
 $FE39 INC E         ; {    E += input_DOWN; %> %>
 $FE3A INC E         ; }
; Fire.
*$FE3B LD B,(HL)     ; {B = *HL++;
 $FE3C INC HL        ; }
 $FE3D IN A,(C)      ; IN A,(C)
 $FE3F CPL           ; {A = ~A & *HL++;
 $FE40 AND (HL)      ;
 $FE41 INC HL        ; }
 $FE42 LD A,E        ; A = E;
 $FE43 RET Z         ; if (A)
 $FE44 ADD A,$09     ;   A += input_FIRE;
 $FE46 RET           ; return;

; inputroutine_protek
;
; Input routine for Protek (cursor) joystick.
;
; O:A Input value (as per enum input).
c$FE47 LD BC,$F7FE   ; BC = port_KEYBOARD_12345;
 $FE4A IN A,(C)      ; IN A,(C)
 $FE4C CPL           ; {A = ~A & (1<<4); // 5 == left
 $FE4D AND $10       ; }
 $FE4F LD E,$03      ; E = input_LEFT;
 $FE51 LD B,$EF      ; B = 0xEF; // port_KEYBOARD_09876
 $FE53 JR NZ,$FE60   ; if (Z) <%
 $FE55 IN A,(C)      ;   IN A,(C)
 $FE57 CPL           ; {  A = ~A & (1<<2);
 $FE58 AND $04       ; }
 $FE5A LD E,$06      ;   E = input_RIGHT;
 $FE5C JR NZ,$FE60   ;   if (Z)
 $FE5E LD E,$00      ;     E = 0; // no horizontal %>
*$FE60 IN A,(C)      ; IN A,(C)
 $FE62 CPL           ; A = ~A;
 $FE63 LD D,A        ; D = A;
 $FE64 AND $08       ; A &= (1<<3);
 $FE66 LD A,$01      ; A = input_UP; // interleaved
 $FE68 JR NZ,$FE72   ; if (Z) <%
 $FE6A LD A,D        ;   A = D;
 $FE6B AND $10       ;   A &= (1<<4);
 $FE6D LD A,$02      ;   A = input_DOWN; // interleaved
 $FE6F JR NZ,$FE72   ;   if (Z)
 $FE71 XOR A         ;     A = input_NONE; %>
*$FE72 ADD A,E       ; {E += A;
 $FE73 LD E,A        ; }
 $FE74 LD A,D        ; {A = D & (1<<0);
 $FE75 AND $01       ; }
 $FE77 LD A,$09      ; A = input_FIRE; // interleaved
 $FE79 JR NZ,$FE7C   ; {if (Z) A = 0; // no vertical
 $FE7B XOR A         ; }
*$FE7C ADD A,E       ; A += E; // combine axis
 $FE7D RET           ; return;

; inputroutine_kempston
;
; Input routine for Kempston joystick.
;
; O:A Input value (as per enum input).
c$FE7E LD BC,$001F   ; BC = 0x001F;
 $FE81 IN A,(C)      ; IN A,(C)
 $FE83 LD BC,$0000   ; BC = 0;
 $FE86 RRA           ; carry = A & 1; A >>= 1;
 $FE87 JR NC,$FE8B   ; {if (carry) B = input_RIGHT;
 $FE89 LD B,$06      ; }
*$FE8B RRA           ; carry = A & 1; A >>= 1;
 $FE8C JR NC,$FE90   ; {if (carry) B = input_LEFT;
 $FE8E LD B,$03      ; }
*$FE90 RRA           ; carry = A & 1; A >>= 1;
 $FE91 JR NC,$FE95   ; {if (carry) C = input_DOWN;
 $FE93 LD C,$02      ; }
*$FE95 RRA           ; carry = A & 1; A >>= 1;
 $FE96 JR NC,$FE9A   ; {if (carry) C = input_UP;
 $FE98 LD C,$01      ; }
*$FE9A RRA           ; carry = A & 1; A >>= 1;
 $FE9B LD A,$09      ; A = input_FIRE;
 $FE9D JR C,$FEA0    ; {if (!carry) A = 0;
 $FE9F XOR A         ; }
*$FEA0 ADD A,B       ; {A += B + C;
 $FEA1 ADD A,C       ; }
 $FEA2 RET           ; return;

; inputroutine_fuller
;
; Input routine for Fuller joystick. (Unused).
;
; O:A Input value (as per enum input).
c$FEA3 LD BC,$007F   ; BC = 0x007F;
 $FEA6 IN A,(C)      ; IN A,(C)
 $FEA8 LD BC,$0000   ; BC = 0;
 $FEAB BIT 4,A       ; {if (A & (1<<4)) A = ~A;
 $FEAD JR Z,$FEB0    ;
 $FEAF CPL           ; }
*$FEB0 RRA           ; carry = A & 1; A >>= 1;
 $FEB1 JR NC,$FEB5   ; {if (carry) C = input_UP;
 $FEB3 LD C,$01      ; }
*$FEB5 RRA           ; carry = A & 1; A >>= 1;
 $FEB6 JR NC,$FEBA   ; {if (carry) C = input_DOWN;
 $FEB8 LD C,$02      ; }
*$FEBA RRA           ; carry = A & 1; A >>= 1;
 $FEBB JR NC,$FEBF   ; {if (carry) B = input_LEFT;
 $FEBD LD B,$03      ; }
*$FEBF RRA           ; carry = A & 1; A >>= 1;
 $FEC0 JR NC,$FEC4   ; {if (carry) B = input_RIGHT;
 $FEC2 LD B,$06      ; }
*$FEC4 AND $08       ; {if (A & (1<<3)) A = input_FIRE; // otherwise A is zero
 $FEC6 JR Z,$FECA    ;
 $FEC8 LD A,$09      ; }
*$FECA ADD A,B       ; {A += B + C;
 $FECB ADD A,C       ; }
 $FECC RET           ; return;

; inputroutine_sinclair
;
; Input routine for Sinclair joystick.
;
; O:A Input value (as per enum input).
c$FECD LD BC,$EFFE   ; BC = port_KEYBOARD_09876;
 $FED0 IN A,(C)      ; IN A,(C)
 $FED2 CPL           ; A = ~A; // xxx67890
 $FED3 LD BC,$0000   ; BC = 0;
 $FED6 RRCA          ; RRCA // 0xxx6789
 $FED7 RRCA          ; RRCA // 90xxx678
 $FED8 JR NC,$FEDC   ; {if (carry) C = input_UP;
 $FEDA LD C,$01      ; }
*$FEDC RRCA          ; RRCA // 890xxx67
 $FEDD JR NC,$FEE1   ; {if (carry) C = input_DOWN;
 $FEDF LD C,$02      ; }
*$FEE1 RRCA          ; RRCA // 7890xxx6
 $FEE2 JR NC,$FEE6   ; {if (carry) B = input_RIGHT;
 $FEE4 LD B,$06      ; }
*$FEE6 RRCA          ; RRCA // 67890xxx
 $FEE7 JR NC,$FEEB   ; {if (carry) B = input_LEFT;
 $FEE9 LD B,$03      ; }
*$FEEB AND $08       ; {if ((A & (1<<3)) == 0) A = input_FIRE;
 $FEED JR Z,$FEF1    ;
 $FEEF LD A,$09      ; }
*$FEF1 ADD A,B       ; {A += B + C;
 $FEF2 ADD A,C       ; }
 $FEF3 RET           ; return;

; mystery_FEF4
;
; A block starting with NOPs.
b$FEF4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEFC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF04 DEFB $00,$00,$00,$00,$00,$00,$E0,$57
 $FF0C DEFB $DB,$02,$DB,$02,$4D,$00,$EC,$55
 $FF14 DEFB $00,$00,$05,$3D,$F3,$0D,$CE,$0B
 $FF1C DEFB $F0,$50,$DB,$02,$4D,$00,$F9,$55
 $FF24 DEFB $00,$00,$CE,$0B,$FB,$50,$06,$17
 $FF2C DEFB $DC,$0A,$D7,$18,$38,$00,$38,$00
 $FF34 DEFB $0D,$19,$DB,$02,$DB,$02,$4D,$00
 $FF3C DEFB $F7,$54,$09,$00,$F6,$54,$0C,$02
 $FF44 DEFB $5C,$0E,$C0,$57,$71,$0E,$F3,$0D
 $FF4C DEFB $21,$17,$C6,$1E,$FF,$5D,$76,$1B
 $FF54 DEFB $03,$13,$00,$3E,$00,$3C,$42,$42
 $FF5C DEFB $7E,$42,$42,$00,$00,$7C,$42,$7C
 $FF64 DEFB $42,$42,$7C,$00,$00,$3C,$42,$40
 $FF6C DEFB $40,$42,$3C,$00,$00,$78,$44,$42
 $FF74 DEFB $42,$44,$78,$00,$00,$7E,$40,$7C
 $FF7C DEFB $40,$40,$7E,$00,$00,$7E,$40,$7C
 $FF84 DEFB $40,$40,$40,$00,$00,$3C,$42,$40
 $FF8C DEFB $4E,$42,$3C,$00,$00,$42,$42,$7E
 $FF94 DEFB $42,$42,$42,$00,$D9,$F5,$DD,$2E
 $FF9C DEFB $00,$0E,$FA,$DD,$7C,$F3,$06,$87
 $FFA4 DEFB $D9,$DD,$2D,$E6,$34,$27,$DD,$5D
 $FFAC DEFB $C1,$3E,$F8,$DD,$65,$16,$5C,$D9
 $FFB4 DEFB $51,$DD,$6F,$3E,$1E,$DD,$F9,$80
 $FFBC DEFB $FD,$CB,$01,$A6,$2E,$24,$D9,$DD
 $FFC4 DEFB $00,$80,$00,$00,$7C,$B8,$0A,$0F
 $FFCC DEFB $B1,$33,$00,$80,$00,$00,$DB,$02
 $FFD4 DEFB $4D,$00,$00,$00,$33,$03,$BB,$63
 $FFDC DEFB $44,$0F,$EF,$2F,$B1,$33,$BB,$63
 $FFE4 DEFB $6A,$32,$9B,$36,$65,$33,$B7,$2D
 $FFEC DEFB $BB,$63,$B6,$63,$9C,$1E,$92,$1E
 $FFF4 DEFB $54,$00,$1F,$19,$FE,$81,$FD,$93
 $FFFC DEFB $00,$BF,$FE,$00
